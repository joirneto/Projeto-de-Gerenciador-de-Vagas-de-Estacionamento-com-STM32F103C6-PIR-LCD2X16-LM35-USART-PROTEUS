
projeto_estacionamento_stm32f103c6_sensor_pir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae8  08003ae8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ae8  08003ae8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ae8  08003ae8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08003b60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003b60  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008eb9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a99  00000000  00000000  00028f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002a9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000730  00000000  00000000  0002b208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018319  00000000  00000000  0002b938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000784c  00000000  00000000  00043c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085c6b  00000000  00000000  0004b49d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002694  00000000  00000000  000d1184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800399c 	.word	0x0800399c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800399c 	.word	0x0800399c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_frsub>:
 800094c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000950:	e002      	b.n	8000958 <__addsf3>
 8000952:	bf00      	nop

08000954 <__aeabi_fsub>:
 8000954:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000958 <__addsf3>:
 8000958:	0042      	lsls	r2, r0, #1
 800095a:	bf1f      	itttt	ne
 800095c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000960:	ea92 0f03 	teqne	r2, r3
 8000964:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000968:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800096c:	d06a      	beq.n	8000a44 <__addsf3+0xec>
 800096e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000972:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000976:	bfc1      	itttt	gt
 8000978:	18d2      	addgt	r2, r2, r3
 800097a:	4041      	eorgt	r1, r0
 800097c:	4048      	eorgt	r0, r1
 800097e:	4041      	eorgt	r1, r0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	2b19      	cmp	r3, #25
 8000986:	bf88      	it	hi
 8000988:	4770      	bxhi	lr
 800098a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800098e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4249      	negne	r1, r1
 80009aa:	ea92 0f03 	teq	r2, r3
 80009ae:	d03f      	beq.n	8000a30 <__addsf3+0xd8>
 80009b0:	f1a2 0201 	sub.w	r2, r2, #1
 80009b4:	fa41 fc03 	asr.w	ip, r1, r3
 80009b8:	eb10 000c 	adds.w	r0, r0, ip
 80009bc:	f1c3 0320 	rsb	r3, r3, #32
 80009c0:	fa01 f103 	lsl.w	r1, r1, r3
 80009c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009c8:	d502      	bpl.n	80009d0 <__addsf3+0x78>
 80009ca:	4249      	negs	r1, r1
 80009cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009d4:	d313      	bcc.n	80009fe <__addsf3+0xa6>
 80009d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009da:	d306      	bcc.n	80009ea <__addsf3+0x92>
 80009dc:	0840      	lsrs	r0, r0, #1
 80009de:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e2:	f102 0201 	add.w	r2, r2, #1
 80009e6:	2afe      	cmp	r2, #254	; 0xfe
 80009e8:	d251      	bcs.n	8000a8e <__addsf3+0x136>
 80009ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f2:	bf08      	it	eq
 80009f4:	f020 0001 	biceq.w	r0, r0, #1
 80009f8:	ea40 0003 	orr.w	r0, r0, r3
 80009fc:	4770      	bx	lr
 80009fe:	0049      	lsls	r1, r1, #1
 8000a00:	eb40 0000 	adc.w	r0, r0, r0
 8000a04:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a08:	f1a2 0201 	sub.w	r2, r2, #1
 8000a0c:	d1ed      	bne.n	80009ea <__addsf3+0x92>
 8000a0e:	fab0 fc80 	clz	ip, r0
 8000a12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a16:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1e:	bfaa      	itet	ge
 8000a20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a24:	4252      	neglt	r2, r2
 8000a26:	4318      	orrge	r0, r3
 8000a28:	bfbc      	itt	lt
 8000a2a:	40d0      	lsrlt	r0, r2
 8000a2c:	4318      	orrlt	r0, r3
 8000a2e:	4770      	bx	lr
 8000a30:	f092 0f00 	teq	r2, #0
 8000a34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a38:	bf06      	itte	eq
 8000a3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a3e:	3201      	addeq	r2, #1
 8000a40:	3b01      	subne	r3, #1
 8000a42:	e7b5      	b.n	80009b0 <__addsf3+0x58>
 8000a44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a4c:	bf18      	it	ne
 8000a4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a52:	d021      	beq.n	8000a98 <__addsf3+0x140>
 8000a54:	ea92 0f03 	teq	r2, r3
 8000a58:	d004      	beq.n	8000a64 <__addsf3+0x10c>
 8000a5a:	f092 0f00 	teq	r2, #0
 8000a5e:	bf08      	it	eq
 8000a60:	4608      	moveq	r0, r1
 8000a62:	4770      	bx	lr
 8000a64:	ea90 0f01 	teq	r0, r1
 8000a68:	bf1c      	itt	ne
 8000a6a:	2000      	movne	r0, #0
 8000a6c:	4770      	bxne	lr
 8000a6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a72:	d104      	bne.n	8000a7e <__addsf3+0x126>
 8000a74:	0040      	lsls	r0, r0, #1
 8000a76:	bf28      	it	cs
 8000a78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	4770      	bx	lr
 8000a7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a82:	bf3c      	itt	cc
 8000a84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bxcc	lr
 8000a8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	4770      	bx	lr
 8000a98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a9c:	bf16      	itet	ne
 8000a9e:	4608      	movne	r0, r1
 8000aa0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa4:	4601      	movne	r1, r0
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	bf06      	itte	eq
 8000aaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aae:	ea90 0f01 	teqeq	r0, r1
 8000ab2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_ui2f>:
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e004      	b.n	8000ac8 <__aeabi_i2f+0x8>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2f>:
 8000ac0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ac4:	bf48      	it	mi
 8000ac6:	4240      	negmi	r0, r0
 8000ac8:	ea5f 0c00 	movs.w	ip, r0
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	e01c      	b.n	8000b16 <__aeabi_l2f+0x2a>

08000adc <__aeabi_ul2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e00a      	b.n	8000b00 <__aeabi_l2f+0x14>
 8000aea:	bf00      	nop

08000aec <__aeabi_l2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__aeabi_l2f+0x14>
 8000afa:	4240      	negs	r0, r0
 8000afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b00:	ea5f 0c01 	movs.w	ip, r1
 8000b04:	bf02      	ittt	eq
 8000b06:	4684      	moveq	ip, r0
 8000b08:	4601      	moveq	r1, r0
 8000b0a:	2000      	moveq	r0, #0
 8000b0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b10:	bf08      	it	eq
 8000b12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b1a:	fabc f28c 	clz	r2, ip
 8000b1e:	3a08      	subs	r2, #8
 8000b20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b24:	db10      	blt.n	8000b48 <__aeabi_l2f+0x5c>
 8000b26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b38:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f102 0220 	add.w	r2, r2, #32
 8000b4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b50:	f1c2 0220 	rsb	r2, r2, #32
 8000b54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b58:	fa21 f202 	lsr.w	r2, r1, r2
 8000b5c:	eb43 0002 	adc.w	r0, r3, r2
 8000b60:	bf08      	it	eq
 8000b62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b66:	4770      	bx	lr

08000b68 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000b76:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000b7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b82:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b86:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000b88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b8a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f80e 	bl	8000bbe <Lcd_init>

	return lcd;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	461d      	mov	r5, r3
 8000ba6:	f107 0410 	add.w	r4, r7, #16
 8000baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bb2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bdb0      	pop	{r4, r5, r7, pc}

08000bbe <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7d9b      	ldrb	r3, [r3, #22]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10c      	bne.n	8000be8 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000bce:	2133      	movs	r1, #51	; 0x33
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f861 	bl	8000c98 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000bd6:	2132      	movs	r1, #50	; 0x32
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f85d 	bl	8000c98 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000bde:	2128      	movs	r1, #40	; 0x28
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 f859 	bl	8000c98 <lcd_write_command>
 8000be6:	e003      	b.n	8000bf0 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000be8:	2138      	movs	r1, #56	; 0x38
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f854 	bl	8000c98 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f850 	bl	8000c98 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000bf8:	210c      	movs	r1, #12
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f84c 	bl	8000c98 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000c00:	2106      	movs	r1, #6
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f848 	bl	8000c98 <lcd_write_command>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e00a      	b.n	8000c36 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 f862 	bl	8000cf4 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	3301      	adds	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	7bfc      	ldrb	r4, [r7, #15]
 8000c38:	6838      	ldr	r0, [r7, #0]
 8000c3a:	f7ff fa89 	bl	8000150 <strlen>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	429c      	cmp	r4, r3
 8000c42:	d3ed      	bcc.n	8000c20 <Lcd_string+0x10>
	}
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}

08000c4c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	70fb      	strb	r3, [r7, #3]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <Lcd_cursor+0x30>)
 8000c60:	5cd2      	ldrb	r2, [r2, r3]
 8000c62:	78bb      	ldrb	r3, [r7, #2]
 8000c64:	4413      	add	r3, r2
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	3b80      	subs	r3, #128	; 0x80
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 f812 	bl	8000c98 <lcd_write_command>
	#endif
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	08003a40 	.word	0x08003a40

08000c80 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000c88:	2101      	movs	r1, #1
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f804 	bl	8000c98 <lcd_write_command>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6898      	ldr	r0, [r3, #8]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	899b      	ldrh	r3, [r3, #12]
 8000cac:	2200      	movs	r2, #0
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f001 fae1 	bl	8002276 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7d9b      	ldrb	r3, [r3, #22]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d111      	bne.n	8000ce0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f842 	bl	8000d50 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 f839 	bl	8000d50 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000cde:	e005      	b.n	8000cec <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f832 	bl	8000d50 <lcd_write>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6898      	ldr	r0, [r3, #8]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	899b      	ldrh	r3, [r3, #12]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f001 fab3 	bl	8002276 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7d9b      	ldrb	r3, [r3, #22]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d111      	bne.n	8000d3c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2204      	movs	r2, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f814 	bl	8000d50 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2204      	movs	r2, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f80b 	bl	8000d50 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000d3a:	e005      	b.n	8000d48 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	2208      	movs	r2, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 f804 	bl	8000d50 <lcd_write>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e019      	b.n	8000d9a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	8819      	ldrh	r1, [r3, #0]
 8000d7e:	78fa      	ldrb	r2, [r7, #3]
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	fa42 f303 	asr.w	r3, r2, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f001 fa71 	bl	8002276 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3301      	adds	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	78bb      	ldrb	r3, [r7, #2]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d3e1      	bcc.n	8000d66 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6918      	ldr	r0, [r3, #16]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	8a9b      	ldrh	r3, [r3, #20]
 8000daa:	2201      	movs	r2, #1
 8000dac:	4619      	mov	r1, r3
 8000dae:	f001 fa62 	bl	8002276 <HAL_GPIO_WritePin>
	DELAY(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 fcda 	bl	800176c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6918      	ldr	r0, [r3, #16]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	8a9b      	ldrh	r3, [r3, #20]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f001 fa57 	bl	8002276 <HAL_GPIO_WritePin>
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b099      	sub	sp, #100	; 0x64
 8000dd4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int vagas = 5;
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dda:	f000 fc65 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dde:	f000 f99f 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de2:	f000 fa55 	bl	8001290 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000de6:	f000 f9eb 	bl	80011c0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000dea:	f000 fa27 	bl	800123c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000dee:	48ba      	ldr	r0, [pc, #744]	; (80010d8 <main+0x308>)
 8000df0:	f000 fdb6 	bl	8001960 <HAL_ADC_Start>

  Lcd_PortType ports [] = {
 8000df4:	4bb9      	ldr	r3, [pc, #740]	; (80010dc <main+0x30c>)
 8000df6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		D5_GPIO_Port,
		D6_GPIO_Port,
		D7_GPIO_Port
  };

  Lcd_PinType pins [] = {
 8000e00:	4ab7      	ldr	r2, [pc, #732]	; (80010e0 <main+0x310>)
 8000e02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e0a:	e883 0003 	stmia.w	r3, {r0, r1}
		D5_Pin,
		D6_Pin,
		D7_Pin
  };

  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000e0e:	f107 001c 	add.w	r0, r7, #28
 8000e12:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e16:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	9303      	str	r3, [sp, #12]
 8000e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	4baf      	ldr	r3, [pc, #700]	; (80010e4 <main+0x314>)
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	4bad      	ldr	r3, [pc, #692]	; (80010e4 <main+0x314>)
 8000e30:	f7ff fe9a 	bl	8000b68 <Lcd_create>
  Lcd_cursor(&lcd, 0, 0);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff05 	bl	8000c4c <Lcd_cursor>
  Lcd_string(&lcd,"ESTACIONAMENTO");
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	49a8      	ldr	r1, [pc, #672]	; (80010e8 <main+0x318>)
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fee1 	bl	8000c10 <Lcd_string>
  Lcd_cursor(&lcd, 1, 0);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	2101      	movs	r1, #1
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fef8 	bl	8000c4c <Lcd_cursor>
  Lcd_string(&lcd,"DEDEL");
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	49a2      	ldr	r1, [pc, #648]	; (80010ec <main+0x31c>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fed4 	bl	8000c10 <Lcd_string>
  HAL_Delay(50);
 8000e68:	2032      	movs	r0, #50	; 0x32
 8000e6a:	f000 fc7f 	bl	800176c <HAL_Delay>
  Lcd_clear(&lcd);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff04 	bl	8000c80 <Lcd_clear>
  HAL_Delay(50);
 8000e78:	2032      	movs	r0, #50	; 0x32
 8000e7a:	f000 fc77 	bl	800176c <HAL_Delay>

  Lcd_cursor(&lcd, 0, 0);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fee0 	bl	8000c4c <Lcd_cursor>
  Lcd_string(&lcd,"SEJA");
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4997      	ldr	r1, [pc, #604]	; (80010f0 <main+0x320>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff febc 	bl	8000c10 <Lcd_string>
  Lcd_cursor(&lcd, 1, 0);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fed3 	bl	8000c4c <Lcd_cursor>
  Lcd_string(&lcd,"BEM-VINDO");
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4992      	ldr	r1, [pc, #584]	; (80010f4 <main+0x324>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff feaf 	bl	8000c10 <Lcd_string>
  HAL_Delay(50);
 8000eb2:	2032      	movs	r0, #50	; 0x32
 8000eb4:	f000 fc5a 	bl	800176c <HAL_Delay>
  Lcd_clear(&lcd);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fedf 	bl	8000c80 <Lcd_clear>
  HAL_Delay(50);
 8000ec2:	2032      	movs	r0, #50	; 0x32
 8000ec4:	f000 fc52 	bl	800176c <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  char snum1[5];
	  adc_buffer = (float)HAL_ADC_GetValue(&hadc1)/8.215;
 8000ec8:	4883      	ldr	r0, [pc, #524]	; (80010d8 <main+0x308>)
 8000eca:	f000 fdf7 	bl	8001abc <HAL_ADC_GetValue>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fdf1 	bl	8000ab8 <__aeabi_ui2f>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff faa5 	bl	8000428 <__aeabi_f2d>
 8000ede:	a37c      	add	r3, pc, #496	; (adr r3, 80010d0 <main+0x300>)
 8000ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee4:	f7ff fc22 	bl	800072c <__aeabi_ddiv>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	460c      	mov	r4, r1
 8000eec:	4618      	mov	r0, r3
 8000eee:	4621      	mov	r1, r4
 8000ef0:	f7ff fd04 	bl	80008fc <__aeabi_d2iz>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	4b80      	ldr	r3, [pc, #512]	; (80010f8 <main+0x328>)
 8000ef8:	601a      	str	r2, [r3, #0]

	  // convert 123 to string [buf]
	  itoa(adc_buffer, snum1, 10);
 8000efa:	4b7f      	ldr	r3, [pc, #508]	; (80010f8 <main+0x328>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f107 0114 	add.w	r1, r7, #20
 8000f02:	220a      	movs	r2, #10
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 f89b 	bl	8003040 <itoa>
	  Lcd_cursor(&lcd, 0, 0);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fe9a 	bl	8000c4c <Lcd_cursor>
	  Lcd_string(&lcd,"TEMPERATURA");
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4977      	ldr	r1, [pc, #476]	; (80010fc <main+0x32c>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fe76 	bl	8000c10 <Lcd_string>
	  Lcd_cursor(&lcd, 1, 0);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fe8d 	bl	8000c4c <Lcd_cursor>
	  Lcd_string(&lcd,snum1);
 8000f32:	f107 0214 	add.w	r2, r7, #20
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fe67 	bl	8000c10 <Lcd_string>
	  HAL_Delay(50);
 8000f42:	2032      	movs	r0, #50	; 0x32
 8000f44:	f000 fc12 	bl	800176c <HAL_Delay>
	  Lcd_clear(&lcd);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fe97 	bl	8000c80 <Lcd_clear>
	//  sprintf((char *)usart_temp,"AN1:%.1f C \r\n",adc_buffer); // @suppress("Float formatting support")
	//  HAL_UART_Transmit(&huart1,&mdata,1,100);


	//   	uint16_t buffer_size = strlen(&mdata);
	   	uint8_t CRLFbuff[] = "\r\n";
 8000f52:	4a6b      	ldr	r2, [pc, #428]	; (8001100 <main+0x330>)
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	8019      	strh	r1, [r3, #0]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	0c12      	lsrs	r2, r2, #16
 8000f62:	701a      	strb	r2, [r3, #0]
	   	uint8_t Tempbuff[] = "T: ";
 8000f64:	4b67      	ldr	r3, [pc, #412]	; (8001104 <main+0x334>)
 8000f66:	60fb      	str	r3, [r7, #12]

	   	HAL_UART_Transmit(&huart1, Tempbuff, 3, 0xFF);
 8000f68:	f107 010c 	add.w	r1, r7, #12
 8000f6c:	23ff      	movs	r3, #255	; 0xff
 8000f6e:	2203      	movs	r2, #3
 8000f70:	4865      	ldr	r0, [pc, #404]	; (8001108 <main+0x338>)
 8000f72:	f001 feb8 	bl	8002ce6 <HAL_UART_Transmit>
	   	HAL_UART_Transmit(&huart1, (uint8_t *)snum1, 10, 100); // ok
 8000f76:	f107 0114 	add.w	r1, r7, #20
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	4862      	ldr	r0, [pc, #392]	; (8001108 <main+0x338>)
 8000f80:	f001 feb1 	bl	8002ce6 <HAL_UART_Transmit>
	   	HAL_UART_Transmit(&huart1, CRLFbuff, 2, 0xFF); // ok
 8000f84:	f107 0110 	add.w	r1, r7, #16
 8000f88:	23ff      	movs	r3, #255	; 0xff
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	485e      	ldr	r0, [pc, #376]	; (8001108 <main+0x338>)
 8000f8e:	f001 feaa 	bl	8002ce6 <HAL_UART_Transmit>


	  Lcd_cursor(&lcd, 0, 0);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe56 	bl	8000c4c <Lcd_cursor>
	  Lcd_string(&lcd,"VAGAS");
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4959      	ldr	r1, [pc, #356]	; (800110c <main+0x33c>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fe32 	bl	8000c10 <Lcd_string>
	  Lcd_cursor(&lcd, 1, 0);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe49 	bl	8000c4c <Lcd_cursor>

	  char snum[5];

	  // convert 123 to string [buf]
	  itoa(vagas, snum, 10);
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	220a      	movs	r2, #10
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000fc2:	f002 f83d 	bl	8003040 <itoa>

	  // print our string
	  printf("%s\n", snum);
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 f89f 	bl	800310c <puts>
	  Lcd_string(&lcd, snum);
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fe1a 	bl	8000c10 <Lcd_string>
	  HAL_Delay(100);
 8000fdc:	2064      	movs	r0, #100	; 0x64
 8000fde:	f000 fbc5 	bl	800176c <HAL_Delay>
	  Lcd_clear(&lcd);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fe4a 	bl	8000c80 <Lcd_clear>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8000fec:	2101      	movs	r1, #1
 8000fee:	4848      	ldr	r0, [pc, #288]	; (8001110 <main+0x340>)
 8000ff0:	f001 f92a 	bl	8002248 <HAL_GPIO_ReadPin>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d030      	beq.n	800105c <main+0x28c>
		 if(vagas!=0){
 8000ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d018      	beq.n	8001032 <main+0x262>
			 vagas--;
 8001000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001002:	3b01      	subs	r3, #1
 8001004:	64fb      	str	r3, [r7, #76]	; 0x4c
			 while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8001006:	e00c      	b.n	8001022 <main+0x252>
				 Lcd_cursor(&lcd, 0, 0);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fe1b 	bl	8000c4c <Lcd_cursor>
				 Lcd_string(&lcd,"AGUARDE");
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	493e      	ldr	r1, [pc, #248]	; (8001114 <main+0x344>)
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fdf7 	bl	8000c10 <Lcd_string>
			 while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8001022:	2101      	movs	r1, #1
 8001024:	483a      	ldr	r0, [pc, #232]	; (8001110 <main+0x340>)
 8001026:	f001 f90f 	bl	8002248 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1eb      	bne.n	8001008 <main+0x238>
 8001030:	e00f      	b.n	8001052 <main+0x282>
			 }
		 }
		 else{
			 Lcd_cursor(&lcd, 0, 0);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fe06 	bl	8000c4c <Lcd_cursor>
			 Lcd_string(&lcd,"LOTADO");
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4934      	ldr	r1, [pc, #208]	; (8001118 <main+0x348>)
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fde2 	bl	8000c10 <Lcd_string>
			 HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	f000 fb8d 	bl	800176c <HAL_Delay>
		 }

		 Lcd_clear(&lcd);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fe12 	bl	8000c80 <Lcd_clear>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 800105c:	2102      	movs	r1, #2
 800105e:	482c      	ldr	r0, [pc, #176]	; (8001110 <main+0x340>)
 8001060:	f001 f8f2 	bl	8002248 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	f43f af2e 	beq.w	8000ec8 <main+0xf8>
		  if(vagas<5){
 800106c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800106e:	2b04      	cmp	r3, #4
 8001070:	dc18      	bgt.n	80010a4 <main+0x2d4>
			vagas++;
 8001072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001074:	3301      	adds	r3, #1
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 8001078:	e00c      	b.n	8001094 <main+0x2c4>
				 Lcd_cursor(&lcd, 0, 0);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fde2 	bl	8000c4c <Lcd_cursor>
				 Lcd_string(&lcd,"AGUARDE");
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4921      	ldr	r1, [pc, #132]	; (8001114 <main+0x344>)
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fdbe 	bl	8000c10 <Lcd_string>
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 8001094:	2102      	movs	r1, #2
 8001096:	481e      	ldr	r0, [pc, #120]	; (8001110 <main+0x340>)
 8001098:	f001 f8d6 	bl	8002248 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1eb      	bne.n	800107a <main+0x2aa>
 80010a2:	e00f      	b.n	80010c4 <main+0x2f4>
			 }
		  }
		  else{
			  Lcd_cursor(&lcd, 0, 0);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fdcd 	bl	8000c4c <Lcd_cursor>
			  Lcd_string(&lcd,"DISPONIVEL");
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4919      	ldr	r1, [pc, #100]	; (800111c <main+0x34c>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fda9 	bl	8000c10 <Lcd_string>
			  HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f000 fb54 	bl	800176c <HAL_Delay>
		  }
		  Lcd_clear(&lcd);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fdd9 	bl	8000c80 <Lcd_clear>
  {
 80010ce:	e6fb      	b.n	8000ec8 <main+0xf8>
 80010d0:	7ae147ae 	.word	0x7ae147ae
 80010d4:	40206e14 	.word	0x40206e14
 80010d8:	200000ac 	.word	0x200000ac
 80010dc:	08003a10 	.word	0x08003a10
 80010e0:	08003a20 	.word	0x08003a20
 80010e4:	40010800 	.word	0x40010800
 80010e8:	080039b4 	.word	0x080039b4
 80010ec:	080039c4 	.word	0x080039c4
 80010f0:	080039cc 	.word	0x080039cc
 80010f4:	080039d4 	.word	0x080039d4
 80010f8:	20000120 	.word	0x20000120
 80010fc:	080039e0 	.word	0x080039e0
 8001100:	08003a28 	.word	0x08003a28
 8001104:	00203a54 	.word	0x00203a54
 8001108:	200000e0 	.word	0x200000e0
 800110c:	080039ec 	.word	0x080039ec
 8001110:	40010c00 	.word	0x40010c00
 8001114:	080039f4 	.word	0x080039f4
 8001118:	080039fc 	.word	0x080039fc
 800111c:	08003a04 	.word	0x08003a04

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b094      	sub	sp, #80	; 0x50
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112a:	2228      	movs	r2, #40	; 0x28
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f001 ff88 	bl	8003044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001150:	2302      	movs	r3, #2
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001158:	2310      	movs	r3, #16
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800115c:	2300      	movs	r3, #0
 800115e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001164:	4618      	mov	r0, r3
 8001166:	f001 f89f 	bl	80022a8 <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001170:	f000 f8dc 	bl	800132c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001174:	230f      	movs	r3, #15
 8001176:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fb0a 	bl	80027a8 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800119a:	f000 f8c7 	bl	800132c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800119e:	2302      	movs	r3, #2
 80011a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fc99 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011b4:	f000 f8ba 	bl	800132c <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	; 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_ADC1_Init+0x74>)
 80011d2:	4a19      	ldr	r2, [pc, #100]	; (8001238 <MX_ADC1_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_ADC1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_ADC1_Init+0x74>)
 80011de:	2201      	movs	r2, #1
 80011e0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_ADC1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_ADC1_Init+0x74>)
 80011ea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_ADC1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_ADC1_Init+0x74>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_ADC1_Init+0x74>)
 80011fe:	f000 fad7 	bl	80017b0 <HAL_ADC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001208:	f000 f890 	bl	800132c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800120c:	2301      	movs	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001210:	2301      	movs	r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_ADC1_Init+0x74>)
 800121e:	f000 fc59 	bl	8001ad4 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001228:	f000 f880 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200000ac 	.word	0x200000ac
 8001238:	40012400 	.word	0x40012400

0800123c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_USART1_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001248:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800124c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001274:	f001 fcea 	bl	8002c4c <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f855 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000e0 	.word	0x200000e0
 800128c:	40013800 	.word	0x40013800

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_GPIO_Init+0x90>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <MX_GPIO_Init+0x90>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_GPIO_Init+0x90>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_GPIO_Init+0x90>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <MX_GPIO_Init+0x90>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_GPIO_Init+0x90>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 715e 	mov.w	r1, #888	; 0x378
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <MX_GPIO_Init+0x94>)
 80012dc:	f000 ffcb 	bl	8002276 <HAL_GPIO_WritePin>
                          |RS_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80012e0:	f44f 735e 	mov.w	r3, #888	; 0x378
 80012e4:	60bb      	str	r3, [r7, #8]
                          |RS_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2302      	movs	r3, #2
 80012f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	4619      	mov	r1, r3
 80012f8:	480a      	ldr	r0, [pc, #40]	; (8001324 <MX_GPIO_Init+0x94>)
 80012fa:	f000 fe53 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012fe:	2303      	movs	r3, #3
 8001300:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_GPIO_Init+0x98>)
 8001312:	f000 fe47 	bl	8001fa4 <HAL_GPIO_Init>

}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	40010800 	.word	0x40010800
 8001328:	40010c00 	.word	0x40010c00

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001332:	e7fe      	b.n	8001332 <Error_Handler+0x6>

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_MspInit+0x5c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_MspInit+0x5c>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_MspInit+0x5c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_MspInit+0x5c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_MspInit+0x5c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_MspInit+0x5c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_MspInit+0x60>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_MspInit+0x60>)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000

08001398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a14      	ldr	r2, [pc, #80]	; (8001404 <HAL_ADC_MspInit+0x6c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d121      	bne.n	80013fc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013e8:	2302      	movs	r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_ADC_MspInit+0x74>)
 80013f8:	f000 fdd4 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40012400 	.word	0x40012400
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800

08001410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <HAL_UART_MspInit+0xa4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d13d      	bne.n	80014ac <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <HAL_UART_MspInit+0xa8>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <HAL_UART_MspInit+0xa8>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_UART_MspInit+0xa8>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_UART_MspInit+0xa8>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <HAL_UART_MspInit+0xa8>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_UART_MspInit+0xa8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001460:	2340      	movs	r3, #64	; 0x40
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <HAL_UART_MspInit+0xac>)
 8001474:	f000 fd96 	bl	8001fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	480c      	ldr	r0, [pc, #48]	; (80014bc <HAL_UART_MspInit+0xac>)
 800148c:	f000 fd8a 	bl	8001fa4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_UART_MspInit+0xb0>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
 80014a6:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_UART_MspInit+0xb0>)
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40013800 	.word	0x40013800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40010000 	.word	0x40010000

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150a:	f000 f913 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}

08001512 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e00a      	b.n	800153a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001524:	f3af 8000 	nop.w
 8001528:	4601      	mov	r1, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	60ba      	str	r2, [r7, #8]
 8001530:	b2ca      	uxtb	r2, r1
 8001532:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbf0      	blt.n	8001524 <_read+0x12>
	}

return len;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e009      	b.n	8001572 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	60ba      	str	r2, [r7, #8]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	dbf1      	blt.n	800155e <_write+0x12>
	}
	return len;
 800157a:	687b      	ldr	r3, [r7, #4]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_close>:

int _close(int file)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	return -1;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015aa:	605a      	str	r2, [r3, #4]
	return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <_isatty>:

int _isatty(int file)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	return 1;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <_sbrk+0x5c>)
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <_sbrk+0x60>)
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <_sbrk+0x64>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <_sbrk+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	d207      	bcs.n	8001624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001614:	f001 fcd2 	bl	8002fbc <__errno>
 8001618:	4602      	mov	r2, r0
 800161a:	230c      	movs	r3, #12
 800161c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	e009      	b.n	8001638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <_sbrk+0x64>)
 8001634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20002800 	.word	0x20002800
 8001644:	00000400 	.word	0x00000400
 8001648:	2000008c 	.word	0x2000008c
 800164c:	20000130 	.word	0x20000130

08001650 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800165c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800165e:	e003      	b.n	8001668 <LoopCopyDataInit>

08001660 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001662:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001664:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001666:	3104      	adds	r1, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001668:	480a      	ldr	r0, [pc, #40]	; (8001694 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800166c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800166e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001670:	d3f6      	bcc.n	8001660 <CopyDataInit>
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001674:	e002      	b.n	800167c <LoopFillZerobss>

08001676 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001678:	f842 3b04 	str.w	r3, [r2], #4

0800167c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800167e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001680:	d3f9      	bcc.n	8001676 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001682:	f7ff ffe5 	bl	8001650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f001 fc9f 	bl	8002fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168a:	f7ff fba1 	bl	8000dd0 <main>
  bx lr
 800168e:	4770      	bx	lr
  ldr r3, =_sidata
 8001690:	08003af0 	.word	0x08003af0
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001698:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800169c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80016a0:	2000012c 	.word	0x2000012c

080016a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC1_2_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_Init+0x28>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_Init+0x28>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 fc3f 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fe36 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40022000 	.word	0x40022000

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fc49 	bl	8001f8a <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 fc1f 	bl	8001f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000000 	.word	0x20000000
 800172c:	20000008 	.word	0x20000008
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_IncTick+0x1c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x20>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_IncTick+0x20>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	20000008 	.word	0x20000008
 8001754:	20000124 	.word	0x20000124

08001758 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <HAL_GetTick+0x10>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	20000124 	.word	0x20000124

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fff0 	bl	8001758 <HAL_GetTick>
 8001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_Delay+0x40>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001792:	bf00      	nop
 8001794:	f7ff ffe0 	bl	8001758 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000008 	.word	0x20000008

080017b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0be      	b.n	8001950 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d109      	bne.n	80017f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fdd2 	bl	8001398 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fab7 	bl	8001d68 <ADC_ConversionStop_Disable>
 80017fa:	4603      	mov	r3, r0
 80017fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 8099 	bne.w	800193e <HAL_ADC_Init+0x18e>
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 8095 	bne.w	800193e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800181c:	f023 0302 	bic.w	r3, r3, #2
 8001820:	f043 0202 	orr.w	r2, r3, #2
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001830:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7b1b      	ldrb	r3, [r3, #12]
 8001836:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001838:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4313      	orrs	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001848:	d003      	beq.n	8001852 <HAL_ADC_Init+0xa2>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d102      	bne.n	8001858 <HAL_ADC_Init+0xa8>
 8001852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001856:	e000      	b.n	800185a <HAL_ADC_Init+0xaa>
 8001858:	2300      	movs	r3, #0
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7d1b      	ldrb	r3, [r3, #20]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d119      	bne.n	800189c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7b1b      	ldrb	r3, [r3, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	3b01      	subs	r3, #1
 8001876:	035a      	lsls	r2, r3, #13
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	e00b      	b.n	800189c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	f043 0220 	orr.w	r2, r3, #32
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_ADC_Init+0x1a8>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	430b      	orrs	r3, r1
 80018c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018cc:	d003      	beq.n	80018d6 <HAL_ADC_Init+0x126>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d104      	bne.n	80018e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	3b01      	subs	r3, #1
 80018dc:	051b      	lsls	r3, r3, #20
 80018de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_ADC_Init+0x1ac>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	429a      	cmp	r2, r3
 8001902:	d10b      	bne.n	800191c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800191a:	e018      	b.n	800194e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f023 0312 	bic.w	r3, r3, #18
 8001924:	f043 0210 	orr.w	r2, r3, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800193c:	e007      	b.n	800194e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	f043 0210 	orr.w	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800194e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	ffe1f7fd 	.word	0xffe1f7fd
 800195c:	ff1f0efe 	.word	0xff1f0efe

08001960 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_ADC_Start+0x1a>
 8001976:	2302      	movs	r3, #2
 8001978:	e098      	b.n	8001aac <HAL_ADC_Start+0x14c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f99e 	bl	8001cc4 <ADC_Enable>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 8087 	bne.w	8001aa2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a41      	ldr	r2, [pc, #260]	; (8001ab4 <HAL_ADC_Start+0x154>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d105      	bne.n	80019be <HAL_ADC_Start+0x5e>
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_ADC_Start+0x158>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d115      	bne.n	80019ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d026      	beq.n	8001a26 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019e8:	e01d      	b.n	8001a26 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a2f      	ldr	r2, [pc, #188]	; (8001ab8 <HAL_ADC_Start+0x158>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d004      	beq.n	8001a0a <HAL_ADC_Start+0xaa>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2b      	ldr	r2, [pc, #172]	; (8001ab4 <HAL_ADC_Start+0x154>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d10d      	bne.n	8001a26 <HAL_ADC_Start+0xc6>
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_ADC_Start+0x158>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	f023 0206 	bic.w	r2, r3, #6
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a3e:	e002      	b.n	8001a46 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f06f 0202 	mvn.w	r2, #2
 8001a56:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a66:	d113      	bne.n	8001a90 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a6c:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <HAL_ADC_Start+0x154>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d105      	bne.n	8001a7e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_ADC_Start+0x158>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d108      	bne.n	8001a90 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	e00c      	b.n	8001aaa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	e003      	b.n	8001aaa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40012800 	.word	0x40012800
 8001ab8:	40012400 	.word	0x40012400

08001abc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x20>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e0dc      	b.n	8001cae <HAL_ADC_ConfigChannel+0x1da>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d81c      	bhi.n	8001b3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3b05      	subs	r3, #5
 8001b16:	221f      	movs	r2, #31
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4019      	ands	r1, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b05      	subs	r3, #5
 8001b30:	fa00 f203 	lsl.w	r2, r0, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b3c:	e03c      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d81c      	bhi.n	8001b80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b23      	subs	r3, #35	; 0x23
 8001b58:	221f      	movs	r2, #31
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	4019      	ands	r1, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b23      	subs	r3, #35	; 0x23
 8001b72:	fa00 f203 	lsl.w	r2, r0, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b7e:	e01b      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b41      	subs	r3, #65	; 0x41
 8001b92:	221f      	movs	r2, #31
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	4019      	ands	r1, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b41      	subs	r3, #65	; 0x41
 8001bac:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b09      	cmp	r3, #9
 8001bbe:	d91c      	bls.n	8001bfa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68d9      	ldr	r1, [r3, #12]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b1e      	subs	r3, #30
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4019      	ands	r1, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6898      	ldr	r0, [r3, #8]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	3b1e      	subs	r3, #30
 8001bec:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	e019      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6919      	ldr	r1, [r3, #16]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4019      	ands	r1, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6898      	ldr	r0, [r3, #8]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	fa00 f203 	lsl.w	r2, r0, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b10      	cmp	r3, #16
 8001c34:	d003      	beq.n	8001c3e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c3a:	2b11      	cmp	r3, #17
 8001c3c:	d132      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1d      	ldr	r2, [pc, #116]	; (8001cb8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d125      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d126      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c64:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b10      	cmp	r3, #16
 8001c6c:	d11a      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_ADC_ConfigChannel+0x1e8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	0c9a      	lsrs	r2, r3, #18
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c84:	e002      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f9      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x1b2>
 8001c92:	e007      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	f043 0220 	orr.w	r2, r3, #32
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	40012400 	.word	0x40012400
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	431bde83 	.word	0x431bde83

08001cc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d039      	beq.n	8001d56 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <ADC_Enable+0x9c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <ADC_Enable+0xa0>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	0c9b      	lsrs	r3, r3, #18
 8001cfe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d00:	e002      	b.n	8001d08 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f9      	bne.n	8001d02 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d0e:	f7ff fd23 	bl	8001758 <HAL_GetTick>
 8001d12:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d14:	e018      	b.n	8001d48 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d16:	f7ff fd1f 	bl	8001758 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d911      	bls.n	8001d48 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f043 0210 	orr.w	r2, r3, #16
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e007      	b.n	8001d58 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d1df      	bne.n	8001d16 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000000 	.word	0x20000000
 8001d64:	431bde83 	.word	0x431bde83

08001d68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d127      	bne.n	8001dd2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0201 	bic.w	r2, r2, #1
 8001d90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d92:	f7ff fce1 	bl	8001758 <HAL_GetTick>
 8001d96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d98:	e014      	b.n	8001dc4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d9a:	f7ff fcdd 	bl	8001758 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d90d      	bls.n	8001dc4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	f043 0210 	orr.w	r2, r3, #16
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e007      	b.n	8001dd4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d0e3      	beq.n	8001d9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff90 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff49 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff5e 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff90 	bl	8001e94 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5f 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffb0 	bl	8001ef8 <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b08b      	sub	sp, #44	; 0x2c
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb6:	e121      	b.n	80021fc <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 8110 	bne.w	80021f6 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b12      	cmp	r3, #18
 8001fdc:	d034      	beq.n	8002048 <HAL_GPIO_Init+0xa4>
 8001fde:	2b12      	cmp	r3, #18
 8001fe0:	d80d      	bhi.n	8001ffe <HAL_GPIO_Init+0x5a>
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d02b      	beq.n	800203e <HAL_GPIO_Init+0x9a>
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d804      	bhi.n	8001ff4 <HAL_GPIO_Init+0x50>
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d031      	beq.n	8002052 <HAL_GPIO_Init+0xae>
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d01c      	beq.n	800202c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ff2:	e048      	b.n	8002086 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d043      	beq.n	8002080 <HAL_GPIO_Init+0xdc>
 8001ff8:	2b11      	cmp	r3, #17
 8001ffa:	d01b      	beq.n	8002034 <HAL_GPIO_Init+0x90>
          break;
 8001ffc:	e043      	b.n	8002086 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ffe:	4a86      	ldr	r2, [pc, #536]	; (8002218 <HAL_GPIO_Init+0x274>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d026      	beq.n	8002052 <HAL_GPIO_Init+0xae>
 8002004:	4a84      	ldr	r2, [pc, #528]	; (8002218 <HAL_GPIO_Init+0x274>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d806      	bhi.n	8002018 <HAL_GPIO_Init+0x74>
 800200a:	4a84      	ldr	r2, [pc, #528]	; (800221c <HAL_GPIO_Init+0x278>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d020      	beq.n	8002052 <HAL_GPIO_Init+0xae>
 8002010:	4a83      	ldr	r2, [pc, #524]	; (8002220 <HAL_GPIO_Init+0x27c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01d      	beq.n	8002052 <HAL_GPIO_Init+0xae>
          break;
 8002016:	e036      	b.n	8002086 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002018:	4a82      	ldr	r2, [pc, #520]	; (8002224 <HAL_GPIO_Init+0x280>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0xae>
 800201e:	4a82      	ldr	r2, [pc, #520]	; (8002228 <HAL_GPIO_Init+0x284>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d016      	beq.n	8002052 <HAL_GPIO_Init+0xae>
 8002024:	4a81      	ldr	r2, [pc, #516]	; (800222c <HAL_GPIO_Init+0x288>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_GPIO_Init+0xae>
          break;
 800202a:	e02c      	b.n	8002086 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e028      	b.n	8002086 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	3304      	adds	r3, #4
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e023      	b.n	8002086 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	3308      	adds	r3, #8
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e01e      	b.n	8002086 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	330c      	adds	r3, #12
 800204e:	623b      	str	r3, [r7, #32]
          break;
 8002050:	e019      	b.n	8002086 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800205a:	2304      	movs	r3, #4
 800205c:	623b      	str	r3, [r7, #32]
          break;
 800205e:	e012      	b.n	8002086 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002068:	2308      	movs	r3, #8
 800206a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	611a      	str	r2, [r3, #16]
          break;
 8002072:	e008      	b.n	8002086 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002074:	2308      	movs	r3, #8
 8002076:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	615a      	str	r2, [r3, #20]
          break;
 800207e:	e002      	b.n	8002086 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2bff      	cmp	r3, #255	; 0xff
 800208a:	d801      	bhi.n	8002090 <HAL_GPIO_Init+0xec>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	e001      	b.n	8002094 <HAL_GPIO_Init+0xf0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3304      	adds	r3, #4
 8002094:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2bff      	cmp	r3, #255	; 0xff
 800209a:	d802      	bhi.n	80020a2 <HAL_GPIO_Init+0xfe>
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x104>
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	3b08      	subs	r3, #8
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	210f      	movs	r1, #15
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	401a      	ands	r2, r3
 80020ba:	6a39      	ldr	r1, [r7, #32]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	431a      	orrs	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8090 	beq.w	80021f6 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d6:	4b56      	ldr	r3, [pc, #344]	; (8002230 <HAL_GPIO_Init+0x28c>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	4a55      	ldr	r2, [pc, #340]	; (8002230 <HAL_GPIO_Init+0x28c>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6193      	str	r3, [r2, #24]
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_GPIO_Init+0x28c>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020ee:	4a51      	ldr	r2, [pc, #324]	; (8002234 <HAL_GPIO_Init+0x290>)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3302      	adds	r3, #2
 80020f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4013      	ands	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a48      	ldr	r2, [pc, #288]	; (8002238 <HAL_GPIO_Init+0x294>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x192>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a47      	ldr	r2, [pc, #284]	; (800223c <HAL_GPIO_Init+0x298>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x18e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a46      	ldr	r2, [pc, #280]	; (8002240 <HAL_GPIO_Init+0x29c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x18a>
 800212a:	2302      	movs	r3, #2
 800212c:	e004      	b.n	8002138 <HAL_GPIO_Init+0x194>
 800212e:	2303      	movs	r3, #3
 8002130:	e002      	b.n	8002138 <HAL_GPIO_Init+0x194>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x194>
 8002136:	2300      	movs	r3, #0
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	4093      	lsls	r3, r2
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002148:	493a      	ldr	r1, [pc, #232]	; (8002234 <HAL_GPIO_Init+0x290>)
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002162:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4937      	ldr	r1, [pc, #220]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
 800216e:	e006      	b.n	800217e <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002170:	4b34      	ldr	r3, [pc, #208]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	43db      	mvns	r3, r3
 8002178:	4932      	ldr	r1, [pc, #200]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 800217a:	4013      	ands	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d006      	beq.n	8002198 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800218a:	4b2e      	ldr	r3, [pc, #184]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	492d      	ldr	r1, [pc, #180]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
 8002196:	e006      	b.n	80021a6 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002198:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	43db      	mvns	r3, r3
 80021a0:	4928      	ldr	r1, [pc, #160]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	4923      	ldr	r1, [pc, #140]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
 80021be:	e006      	b.n	80021ce <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	491e      	ldr	r1, [pc, #120]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	4919      	ldr	r1, [pc, #100]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60cb      	str	r3, [r1, #12]
 80021e6:	e006      	b.n	80021f6 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4914      	ldr	r1, [pc, #80]	; (8002244 <HAL_GPIO_Init+0x2a0>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	3301      	adds	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	f47f aed6 	bne.w	8001fb8 <HAL_GPIO_Init+0x14>
  }
}
 800220c:	bf00      	nop
 800220e:	372c      	adds	r7, #44	; 0x2c
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	10210000 	.word	0x10210000
 800221c:	10110000 	.word	0x10110000
 8002220:	10120000 	.word	0x10120000
 8002224:	10310000 	.word	0x10310000
 8002228:	10320000 	.word	0x10320000
 800222c:	10220000 	.word	0x10220000
 8002230:	40021000 	.word	0x40021000
 8002234:	40010000 	.word	0x40010000
 8002238:	40010800 	.word	0x40010800
 800223c:	40010c00 	.word	0x40010c00
 8002240:	40011000 	.word	0x40011000
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e001      	b.n	800226a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	807b      	strh	r3, [r7, #2]
 8002282:	4613      	mov	r3, r2
 8002284:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002286:	787b      	ldrb	r3, [r7, #1]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228c:	887a      	ldrh	r2, [r7, #2]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002292:	e003      	b.n	800229c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	041a      	lsls	r2, r3, #16
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e26c      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8087 	beq.w	80023d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c8:	4b92      	ldr	r3, [pc, #584]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d00c      	beq.n	80022ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022d4:	4b8f      	ldr	r3, [pc, #572]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d112      	bne.n	8002306 <HAL_RCC_OscConfig+0x5e>
 80022e0:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d10b      	bne.n	8002306 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ee:	4b89      	ldr	r3, [pc, #548]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d06c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x12c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d168      	bne.n	80023d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e246      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x76>
 8002310:	4b80      	ldr	r3, [pc, #512]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a7f      	ldr	r2, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	e02e      	b.n	800237c <HAL_RCC_OscConfig+0xd4>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0x98>
 8002326:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7a      	ldr	r2, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800232c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b78      	ldr	r3, [pc, #480]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a77      	ldr	r2, [pc, #476]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e01d      	b.n	800237c <HAL_RCC_OscConfig+0xd4>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0xbc>
 800234a:	4b72      	ldr	r3, [pc, #456]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a71      	ldr	r2, [pc, #452]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6e      	ldr	r2, [pc, #440]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0xd4>
 8002364:	4b6b      	ldr	r3, [pc, #428]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6a      	ldr	r2, [pc, #424]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b68      	ldr	r3, [pc, #416]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a67      	ldr	r2, [pc, #412]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff f9e8 	bl	8001758 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7ff f9e4 	bl	8001758 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1fa      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b5d      	ldr	r3, [pc, #372]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0xe4>
 80023aa:	e014      	b.n	80023d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff f9d4 	bl	8001758 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b4:	f7ff f9d0 	bl	8001758 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1e6      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x10c>
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d063      	beq.n	80024aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e2:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ee:	4b49      	ldr	r3, [pc, #292]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d11c      	bne.n	8002434 <HAL_RCC_OscConfig+0x18c>
 80023fa:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d116      	bne.n	8002434 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x176>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1ba      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4939      	ldr	r1, [pc, #228]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	e03a      	b.n	80024aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d020      	beq.n	800247e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800243c:	4b36      	ldr	r3, [pc, #216]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7ff f989 	bl	8001758 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244a:	f7ff f985 	bl	8001758 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e19b      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4927      	ldr	r1, [pc, #156]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
 800247c:	e015      	b.n	80024aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <HAL_RCC_OscConfig+0x270>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff f968 	bl	8001758 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248c:	f7ff f964 	bl	8001758 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e17a      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d03a      	beq.n	800252c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d019      	beq.n	80024f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7ff f948 	bl	8001758 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024cc:	f7ff f944 	bl	8001758 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e15a      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f000 fada 	bl	8002aa4 <RCC_Delay>
 80024f0:	e01c      	b.n	800252c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f8:	f7ff f92e 	bl	8001758 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fe:	e00f      	b.n	8002520 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002500:	f7ff f92a 	bl	8001758 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d908      	bls.n	8002520 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e140      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	42420000 	.word	0x42420000
 800251c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b9e      	ldr	r3, [pc, #632]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1e9      	bne.n	8002500 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a6 	beq.w	8002686 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b97      	ldr	r3, [pc, #604]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10d      	bne.n	8002566 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	4b94      	ldr	r3, [pc, #592]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4a93      	ldr	r2, [pc, #588]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	61d3      	str	r3, [r2, #28]
 8002556:	4b91      	ldr	r3, [pc, #580]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002562:	2301      	movs	r3, #1
 8002564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002566:	4b8e      	ldr	r3, [pc, #568]	; (80027a0 <HAL_RCC_OscConfig+0x4f8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d118      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002572:	4b8b      	ldr	r3, [pc, #556]	; (80027a0 <HAL_RCC_OscConfig+0x4f8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a8a      	ldr	r2, [pc, #552]	; (80027a0 <HAL_RCC_OscConfig+0x4f8>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257e:	f7ff f8eb 	bl	8001758 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002586:	f7ff f8e7 	bl	8001758 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0fd      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	4b81      	ldr	r3, [pc, #516]	; (80027a0 <HAL_RCC_OscConfig+0x4f8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x312>
 80025ac:	4b7b      	ldr	r3, [pc, #492]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a7a      	ldr	r2, [pc, #488]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	e02d      	b.n	8002616 <HAL_RCC_OscConfig+0x36e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x334>
 80025c2:	4b76      	ldr	r3, [pc, #472]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a75      	ldr	r2, [pc, #468]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	4b73      	ldr	r3, [pc, #460]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a72      	ldr	r2, [pc, #456]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6213      	str	r3, [r2, #32]
 80025da:	e01c      	b.n	8002616 <HAL_RCC_OscConfig+0x36e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d10c      	bne.n	80025fe <HAL_RCC_OscConfig+0x356>
 80025e4:	4b6d      	ldr	r3, [pc, #436]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4a6c      	ldr	r2, [pc, #432]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6213      	str	r3, [r2, #32]
 80025f0:	4b6a      	ldr	r3, [pc, #424]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4a69      	ldr	r2, [pc, #420]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6213      	str	r3, [r2, #32]
 80025fc:	e00b      	b.n	8002616 <HAL_RCC_OscConfig+0x36e>
 80025fe:	4b67      	ldr	r3, [pc, #412]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a66      	ldr	r2, [pc, #408]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	4b64      	ldr	r3, [pc, #400]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a63      	ldr	r2, [pc, #396]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d015      	beq.n	800264a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7ff f89b 	bl	8001758 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7ff f897 	bl	8001758 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0ab      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	4b57      	ldr	r3, [pc, #348]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ee      	beq.n	8002626 <HAL_RCC_OscConfig+0x37e>
 8002648:	e014      	b.n	8002674 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7ff f885 	bl	8001758 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7ff f881 	bl	8001758 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e095      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	4b4c      	ldr	r3, [pc, #304]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ee      	bne.n	8002652 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d105      	bne.n	8002686 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267a:	4b48      	ldr	r3, [pc, #288]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4a47      	ldr	r2, [pc, #284]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002684:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8081 	beq.w	8002792 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002690:	4b42      	ldr	r3, [pc, #264]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d061      	beq.n	8002760 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d146      	bne.n	8002732 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <HAL_RCC_OscConfig+0x4fc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7ff f855 	bl	8001758 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7ff f851 	bl	8001758 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e067      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c4:	4b35      	ldr	r3, [pc, #212]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d8:	d108      	bne.n	80026ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026da:	4b30      	ldr	r3, [pc, #192]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	492d      	ldr	r1, [pc, #180]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a19      	ldr	r1, [r3, #32]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	430b      	orrs	r3, r1
 80026fe:	4927      	ldr	r1, [pc, #156]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_RCC_OscConfig+0x4fc>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff f825 	bl	8001758 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff f821 	bl	8001758 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e037      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x46a>
 8002730:	e02f      	b.n	8002792 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_RCC_OscConfig+0x4fc>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff f80e 	bl	8001758 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7ff f80a 	bl	8001758 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e020      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x498>
 800275e:	e018      	b.n	8002792 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e013      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x4f4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	429a      	cmp	r2, r3
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
 80027a4:	42420060 	.word	0x42420060

080027a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0d0      	b.n	800295e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d910      	bls.n	80027ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b67      	ldr	r3, [pc, #412]	; (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	4965      	ldr	r1, [pc, #404]	; (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0b8      	b.n	800295e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800280e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800281c:	4b53      	ldr	r3, [pc, #332]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a52      	ldr	r2, [pc, #328]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002826:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002828:	4b50      	ldr	r3, [pc, #320]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	494d      	ldr	r1, [pc, #308]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d040      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d115      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07f      	b.n	800295e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e073      	b.n	800295e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002876:	4b3d      	ldr	r3, [pc, #244]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e06b      	b.n	800295e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002886:	4b39      	ldr	r3, [pc, #228]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f023 0203 	bic.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4936      	ldr	r1, [pc, #216]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002898:	f7fe ff5e 	bl	8001758 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7fe ff5a 	bl	8001758 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e053      	b.n	800295e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	4b2d      	ldr	r3, [pc, #180]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 020c 	and.w	r2, r3, #12
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1eb      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c8:	4b27      	ldr	r3, [pc, #156]	; (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d210      	bcs.n	80028f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b24      	ldr	r3, [pc, #144]	; (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 0207 	bic.w	r2, r3, #7
 80028de:	4922      	ldr	r1, [pc, #136]	; (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e032      	b.n	800295e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4916      	ldr	r1, [pc, #88]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	490e      	ldr	r1, [pc, #56]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002936:	f000 f821 	bl	800297c <HAL_RCC_GetSysClockFreq>
 800293a:	4601      	mov	r1, r0
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	fa21 f303 	lsr.w	r3, r1, r3
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x1cc>)
 8002950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1d0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe febc 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40022000 	.word	0x40022000
 800296c:	40021000 	.word	0x40021000
 8002970:	08003a44 	.word	0x08003a44
 8002974:	20000000 	.word	0x20000000
 8002978:	20000004 	.word	0x20000004

0800297c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800297c:	b490      	push	{r4, r7}
 800297e:	b08a      	sub	sp, #40	; 0x28
 8002980:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002982:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002984:	1d3c      	adds	r4, r7, #4
 8002986:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xb4>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029a6:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d002      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x40>
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0x46>
 80029ba:	e02d      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029bc:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029be:	623b      	str	r3, [r7, #32]
      break;
 80029c0:	e02d      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	0c9b      	lsrs	r3, r3, #18
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ce:	4413      	add	r3, r2
 80029d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	0c5b      	lsrs	r3, r3, #17
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ee:	4413      	add	r3, r2
 80029f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029fa:	fb02 f203 	mul.w	r2, r2, r3
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	e004      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	623b      	str	r3, [r7, #32]
      break;
 8002a16:	e002      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a1a:	623b      	str	r3, [r7, #32]
      break;
 8002a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3728      	adds	r7, #40	; 0x28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc90      	pop	{r4, r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	08003a2c 	.word	0x08003a2c
 8002a30:	08003a3c 	.word	0x08003a3c
 8002a34:	40021000 	.word	0x40021000
 8002a38:	007a1200 	.word	0x007a1200
 8002a3c:	003d0900 	.word	0x003d0900

08002a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a44:	4b02      	ldr	r3, [pc, #8]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	20000000 	.word	0x20000000

08002a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a58:	f7ff fff2 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a5c:	4601      	mov	r1, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4a03      	ldr	r2, [pc, #12]	; (8002a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08003a54 	.word	0x08003a54

08002a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a80:	f7ff ffde 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a84:	4601      	mov	r1, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	0adb      	lsrs	r3, r3, #11
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a92:	5cd3      	ldrb	r3, [r2, r3]
 8002a94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08003a54 	.word	0x08003a54

08002aa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <RCC_Delay+0x34>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <RCC_Delay+0x38>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0a5b      	lsrs	r3, r3, #9
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac0:	bf00      	nop
  }
  while (Delay --);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1e5a      	subs	r2, r3, #1
 8002ac6:	60fa      	str	r2, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f9      	bne.n	8002ac0 <RCC_Delay+0x1c>
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	10624dd3 	.word	0x10624dd3

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d07d      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b00:	4b4f      	ldr	r3, [pc, #316]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10d      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4a4b      	ldr	r2, [pc, #300]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b16:	61d3      	str	r3, [r2, #28]
 8002b18:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d118      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b34:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a42      	ldr	r2, [pc, #264]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b40:	f7fe fe0a 	bl	8001758 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	e008      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7fe fe06 	bl	8001758 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e06d      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d02e      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d027      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b8e:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b94:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b9a:	4a29      	ldr	r2, [pc, #164]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d014      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe fdd5 	bl	8001758 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe fdd1 	bl	8001758 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e036      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ee      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4917      	ldr	r1, [pc, #92]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d105      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	4a13      	ldr	r2, [pc, #76]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	490b      	ldr	r1, [pc, #44]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	4904      	ldr	r1, [pc, #16]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42420440 	.word	0x42420440

08002c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e03f      	b.n	8002cde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fbcc 	bl	8001410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	; 0x24
 8002c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f905 	bl	8002ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b08a      	sub	sp, #40	; 0x28
 8002cea:	af02      	add	r7, sp, #8
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d17c      	bne.n	8002e00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <HAL_UART_Transmit+0x2c>
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e075      	b.n	8002e02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_UART_Transmit+0x3e>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e06e      	b.n	8002e02 <HAL_UART_Transmit+0x11c>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2221      	movs	r2, #33	; 0x21
 8002d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d3a:	f7fe fd0d 	bl	8001758 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	88fa      	ldrh	r2, [r7, #6]
 8002d44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d54:	d108      	bne.n	8002d68 <HAL_UART_Transmit+0x82>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	e003      	b.n	8002d70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002d78:	e02a      	b.n	8002dd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	; 0x80
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f840 	bl	8002e0a <UART_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e036      	b.n	8002e02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10b      	bne.n	8002db2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	3302      	adds	r3, #2
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	e007      	b.n	8002dc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1cf      	bne.n	8002d7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2200      	movs	r2, #0
 8002de2:	2140      	movs	r1, #64	; 0x40
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f810 	bl	8002e0a <UART_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e006      	b.n	8002e02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e000      	b.n	8002e02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
  }
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1a:	e02c      	b.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d028      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e2a:	f7fe fc95 	bl	8001758 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d21d      	bcs.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e48:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e00f      	b.n	8002e96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d0c3      	beq.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002eda:	f023 030c 	bic.w	r3, r3, #12
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2c      	ldr	r2, [pc, #176]	; (8002fb4 <UART_SetConfig+0x114>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d103      	bne.n	8002f10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f08:	f7ff fdb8 	bl	8002a7c <HAL_RCC_GetPCLK2Freq>
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	e002      	b.n	8002f16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f10:	f7ff fda0 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 8002f14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009a      	lsls	r2, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <UART_SetConfig+0x118>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	0119      	lsls	r1, r3, #4
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009a      	lsls	r2, r3, #2
 8002f40:	441a      	add	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <UART_SetConfig+0x118>)
 8002f4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2064      	movs	r0, #100	; 0x64
 8002f56:	fb00 f303 	mul.w	r3, r0, r3
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	3332      	adds	r3, #50	; 0x32
 8002f60:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <UART_SetConfig+0x118>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f6c:	4419      	add	r1, r3
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009a      	lsls	r2, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <UART_SetConfig+0x118>)
 8002f86:	fba3 0302 	umull	r0, r3, r3, r2
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2064      	movs	r0, #100	; 0x64
 8002f8e:	fb00 f303 	mul.w	r3, r0, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	3332      	adds	r3, #50	; 0x32
 8002f98:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <UART_SetConfig+0x118>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	f003 020f 	and.w	r2, r3, #15
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	440a      	add	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	51eb851f 	.word	0x51eb851f

08002fbc <__errno>:
 8002fbc:	4b01      	ldr	r3, [pc, #4]	; (8002fc4 <__errno+0x8>)
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	2000000c 	.word	0x2000000c

08002fc8 <__libc_init_array>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	2500      	movs	r5, #0
 8002fcc:	4e0c      	ldr	r6, [pc, #48]	; (8003000 <__libc_init_array+0x38>)
 8002fce:	4c0d      	ldr	r4, [pc, #52]	; (8003004 <__libc_init_array+0x3c>)
 8002fd0:	1ba4      	subs	r4, r4, r6
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	42a5      	cmp	r5, r4
 8002fd6:	d109      	bne.n	8002fec <__libc_init_array+0x24>
 8002fd8:	f000 fce0 	bl	800399c <_init>
 8002fdc:	2500      	movs	r5, #0
 8002fde:	4e0a      	ldr	r6, [pc, #40]	; (8003008 <__libc_init_array+0x40>)
 8002fe0:	4c0a      	ldr	r4, [pc, #40]	; (800300c <__libc_init_array+0x44>)
 8002fe2:	1ba4      	subs	r4, r4, r6
 8002fe4:	10a4      	asrs	r4, r4, #2
 8002fe6:	42a5      	cmp	r5, r4
 8002fe8:	d105      	bne.n	8002ff6 <__libc_init_array+0x2e>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff0:	4798      	blx	r3
 8002ff2:	3501      	adds	r5, #1
 8002ff4:	e7ee      	b.n	8002fd4 <__libc_init_array+0xc>
 8002ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ffa:	4798      	blx	r3
 8002ffc:	3501      	adds	r5, #1
 8002ffe:	e7f2      	b.n	8002fe6 <__libc_init_array+0x1e>
 8003000:	08003ae8 	.word	0x08003ae8
 8003004:	08003ae8 	.word	0x08003ae8
 8003008:	08003ae8 	.word	0x08003ae8
 800300c:	08003aec 	.word	0x08003aec

08003010 <__itoa>:
 8003010:	1e93      	subs	r3, r2, #2
 8003012:	2b22      	cmp	r3, #34	; 0x22
 8003014:	b510      	push	{r4, lr}
 8003016:	460c      	mov	r4, r1
 8003018:	d904      	bls.n	8003024 <__itoa+0x14>
 800301a:	2300      	movs	r3, #0
 800301c:	461c      	mov	r4, r3
 800301e:	700b      	strb	r3, [r1, #0]
 8003020:	4620      	mov	r0, r4
 8003022:	bd10      	pop	{r4, pc}
 8003024:	2a0a      	cmp	r2, #10
 8003026:	d109      	bne.n	800303c <__itoa+0x2c>
 8003028:	2800      	cmp	r0, #0
 800302a:	da07      	bge.n	800303c <__itoa+0x2c>
 800302c:	232d      	movs	r3, #45	; 0x2d
 800302e:	700b      	strb	r3, [r1, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	4240      	negs	r0, r0
 8003034:	4421      	add	r1, r4
 8003036:	f000 f871 	bl	800311c <__utoa>
 800303a:	e7f1      	b.n	8003020 <__itoa+0x10>
 800303c:	2100      	movs	r1, #0
 800303e:	e7f9      	b.n	8003034 <__itoa+0x24>

08003040 <itoa>:
 8003040:	f7ff bfe6 	b.w	8003010 <__itoa>

08003044 <memset>:
 8003044:	4603      	mov	r3, r0
 8003046:	4402      	add	r2, r0
 8003048:	4293      	cmp	r3, r2
 800304a:	d100      	bne.n	800304e <memset+0xa>
 800304c:	4770      	bx	lr
 800304e:	f803 1b01 	strb.w	r1, [r3], #1
 8003052:	e7f9      	b.n	8003048 <memset+0x4>

08003054 <_puts_r>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	460e      	mov	r6, r1
 8003058:	4605      	mov	r5, r0
 800305a:	b118      	cbz	r0, 8003064 <_puts_r+0x10>
 800305c:	6983      	ldr	r3, [r0, #24]
 800305e:	b90b      	cbnz	r3, 8003064 <_puts_r+0x10>
 8003060:	f000 fa4a 	bl	80034f8 <__sinit>
 8003064:	69ab      	ldr	r3, [r5, #24]
 8003066:	68ac      	ldr	r4, [r5, #8]
 8003068:	b913      	cbnz	r3, 8003070 <_puts_r+0x1c>
 800306a:	4628      	mov	r0, r5
 800306c:	f000 fa44 	bl	80034f8 <__sinit>
 8003070:	4b23      	ldr	r3, [pc, #140]	; (8003100 <_puts_r+0xac>)
 8003072:	429c      	cmp	r4, r3
 8003074:	d117      	bne.n	80030a6 <_puts_r+0x52>
 8003076:	686c      	ldr	r4, [r5, #4]
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	071b      	lsls	r3, r3, #28
 800307c:	d51d      	bpl.n	80030ba <_puts_r+0x66>
 800307e:	6923      	ldr	r3, [r4, #16]
 8003080:	b1db      	cbz	r3, 80030ba <_puts_r+0x66>
 8003082:	3e01      	subs	r6, #1
 8003084:	68a3      	ldr	r3, [r4, #8]
 8003086:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800308a:	3b01      	subs	r3, #1
 800308c:	60a3      	str	r3, [r4, #8]
 800308e:	b9e9      	cbnz	r1, 80030cc <_puts_r+0x78>
 8003090:	2b00      	cmp	r3, #0
 8003092:	da2e      	bge.n	80030f2 <_puts_r+0x9e>
 8003094:	4622      	mov	r2, r4
 8003096:	210a      	movs	r1, #10
 8003098:	4628      	mov	r0, r5
 800309a:	f000 f87d 	bl	8003198 <__swbuf_r>
 800309e:	3001      	adds	r0, #1
 80030a0:	d011      	beq.n	80030c6 <_puts_r+0x72>
 80030a2:	200a      	movs	r0, #10
 80030a4:	e011      	b.n	80030ca <_puts_r+0x76>
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <_puts_r+0xb0>)
 80030a8:	429c      	cmp	r4, r3
 80030aa:	d101      	bne.n	80030b0 <_puts_r+0x5c>
 80030ac:	68ac      	ldr	r4, [r5, #8]
 80030ae:	e7e3      	b.n	8003078 <_puts_r+0x24>
 80030b0:	4b15      	ldr	r3, [pc, #84]	; (8003108 <_puts_r+0xb4>)
 80030b2:	429c      	cmp	r4, r3
 80030b4:	bf08      	it	eq
 80030b6:	68ec      	ldreq	r4, [r5, #12]
 80030b8:	e7de      	b.n	8003078 <_puts_r+0x24>
 80030ba:	4621      	mov	r1, r4
 80030bc:	4628      	mov	r0, r5
 80030be:	f000 f8bd 	bl	800323c <__swsetup_r>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d0dd      	beq.n	8003082 <_puts_r+0x2e>
 80030c6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da04      	bge.n	80030da <_puts_r+0x86>
 80030d0:	69a2      	ldr	r2, [r4, #24]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	dc06      	bgt.n	80030e4 <_puts_r+0x90>
 80030d6:	290a      	cmp	r1, #10
 80030d8:	d004      	beq.n	80030e4 <_puts_r+0x90>
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	6022      	str	r2, [r4, #0]
 80030e0:	7019      	strb	r1, [r3, #0]
 80030e2:	e7cf      	b.n	8003084 <_puts_r+0x30>
 80030e4:	4622      	mov	r2, r4
 80030e6:	4628      	mov	r0, r5
 80030e8:	f000 f856 	bl	8003198 <__swbuf_r>
 80030ec:	3001      	adds	r0, #1
 80030ee:	d1c9      	bne.n	8003084 <_puts_r+0x30>
 80030f0:	e7e9      	b.n	80030c6 <_puts_r+0x72>
 80030f2:	200a      	movs	r0, #10
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	6022      	str	r2, [r4, #0]
 80030fa:	7018      	strb	r0, [r3, #0]
 80030fc:	e7e5      	b.n	80030ca <_puts_r+0x76>
 80030fe:	bf00      	nop
 8003100:	08003aa8 	.word	0x08003aa8
 8003104:	08003ac8 	.word	0x08003ac8
 8003108:	08003a88 	.word	0x08003a88

0800310c <puts>:
 800310c:	4b02      	ldr	r3, [pc, #8]	; (8003118 <puts+0xc>)
 800310e:	4601      	mov	r1, r0
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	f7ff bf9f 	b.w	8003054 <_puts_r>
 8003116:	bf00      	nop
 8003118:	2000000c 	.word	0x2000000c

0800311c <__utoa>:
 800311c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311e:	b08b      	sub	sp, #44	; 0x2c
 8003120:	4605      	mov	r5, r0
 8003122:	460c      	mov	r4, r1
 8003124:	466e      	mov	r6, sp
 8003126:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <__utoa+0x78>)
 8003128:	f103 0c20 	add.w	ip, r3, #32
 800312c:	4637      	mov	r7, r6
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	3308      	adds	r3, #8
 8003134:	c703      	stmia	r7!, {r0, r1}
 8003136:	4563      	cmp	r3, ip
 8003138:	463e      	mov	r6, r7
 800313a:	d1f7      	bne.n	800312c <__utoa+0x10>
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	791b      	ldrb	r3, [r3, #4]
 8003140:	6038      	str	r0, [r7, #0]
 8003142:	713b      	strb	r3, [r7, #4]
 8003144:	1e93      	subs	r3, r2, #2
 8003146:	2b22      	cmp	r3, #34	; 0x22
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	d904      	bls.n	8003158 <__utoa+0x3c>
 800314e:	7023      	strb	r3, [r4, #0]
 8003150:	461c      	mov	r4, r3
 8003152:	4620      	mov	r0, r4
 8003154:	b00b      	add	sp, #44	; 0x2c
 8003156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003158:	1e66      	subs	r6, r4, #1
 800315a:	fbb5 f0f2 	udiv	r0, r5, r2
 800315e:	fb02 5510 	mls	r5, r2, r0, r5
 8003162:	af0a      	add	r7, sp, #40	; 0x28
 8003164:	443d      	add	r5, r7
 8003166:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800316a:	1c59      	adds	r1, r3, #1
 800316c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8003170:	4605      	mov	r5, r0
 8003172:	b968      	cbnz	r0, 8003190 <__utoa+0x74>
 8003174:	4622      	mov	r2, r4
 8003176:	5460      	strb	r0, [r4, r1]
 8003178:	4423      	add	r3, r4
 800317a:	1b19      	subs	r1, r3, r4
 800317c:	1b10      	subs	r0, r2, r4
 800317e:	4281      	cmp	r1, r0
 8003180:	dde7      	ble.n	8003152 <__utoa+0x36>
 8003182:	7811      	ldrb	r1, [r2, #0]
 8003184:	7818      	ldrb	r0, [r3, #0]
 8003186:	f802 0b01 	strb.w	r0, [r2], #1
 800318a:	f803 1901 	strb.w	r1, [r3], #-1
 800318e:	e7f4      	b.n	800317a <__utoa+0x5e>
 8003190:	460b      	mov	r3, r1
 8003192:	e7e2      	b.n	800315a <__utoa+0x3e>
 8003194:	08003a60 	.word	0x08003a60

08003198 <__swbuf_r>:
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319a:	460e      	mov	r6, r1
 800319c:	4614      	mov	r4, r2
 800319e:	4605      	mov	r5, r0
 80031a0:	b118      	cbz	r0, 80031aa <__swbuf_r+0x12>
 80031a2:	6983      	ldr	r3, [r0, #24]
 80031a4:	b90b      	cbnz	r3, 80031aa <__swbuf_r+0x12>
 80031a6:	f000 f9a7 	bl	80034f8 <__sinit>
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <__swbuf_r+0x98>)
 80031ac:	429c      	cmp	r4, r3
 80031ae:	d12a      	bne.n	8003206 <__swbuf_r+0x6e>
 80031b0:	686c      	ldr	r4, [r5, #4]
 80031b2:	69a3      	ldr	r3, [r4, #24]
 80031b4:	60a3      	str	r3, [r4, #8]
 80031b6:	89a3      	ldrh	r3, [r4, #12]
 80031b8:	071a      	lsls	r2, r3, #28
 80031ba:	d52e      	bpl.n	800321a <__swbuf_r+0x82>
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	b363      	cbz	r3, 800321a <__swbuf_r+0x82>
 80031c0:	6923      	ldr	r3, [r4, #16]
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	b2f6      	uxtb	r6, r6
 80031c6:	1ac0      	subs	r0, r0, r3
 80031c8:	6963      	ldr	r3, [r4, #20]
 80031ca:	4637      	mov	r7, r6
 80031cc:	4283      	cmp	r3, r0
 80031ce:	dc04      	bgt.n	80031da <__swbuf_r+0x42>
 80031d0:	4621      	mov	r1, r4
 80031d2:	4628      	mov	r0, r5
 80031d4:	f000 f926 	bl	8003424 <_fflush_r>
 80031d8:	bb28      	cbnz	r0, 8003226 <__swbuf_r+0x8e>
 80031da:	68a3      	ldr	r3, [r4, #8]
 80031dc:	3001      	adds	r0, #1
 80031de:	3b01      	subs	r3, #1
 80031e0:	60a3      	str	r3, [r4, #8]
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	6022      	str	r2, [r4, #0]
 80031e8:	701e      	strb	r6, [r3, #0]
 80031ea:	6963      	ldr	r3, [r4, #20]
 80031ec:	4283      	cmp	r3, r0
 80031ee:	d004      	beq.n	80031fa <__swbuf_r+0x62>
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	07db      	lsls	r3, r3, #31
 80031f4:	d519      	bpl.n	800322a <__swbuf_r+0x92>
 80031f6:	2e0a      	cmp	r6, #10
 80031f8:	d117      	bne.n	800322a <__swbuf_r+0x92>
 80031fa:	4621      	mov	r1, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	f000 f911 	bl	8003424 <_fflush_r>
 8003202:	b190      	cbz	r0, 800322a <__swbuf_r+0x92>
 8003204:	e00f      	b.n	8003226 <__swbuf_r+0x8e>
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <__swbuf_r+0x9c>)
 8003208:	429c      	cmp	r4, r3
 800320a:	d101      	bne.n	8003210 <__swbuf_r+0x78>
 800320c:	68ac      	ldr	r4, [r5, #8]
 800320e:	e7d0      	b.n	80031b2 <__swbuf_r+0x1a>
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <__swbuf_r+0xa0>)
 8003212:	429c      	cmp	r4, r3
 8003214:	bf08      	it	eq
 8003216:	68ec      	ldreq	r4, [r5, #12]
 8003218:	e7cb      	b.n	80031b2 <__swbuf_r+0x1a>
 800321a:	4621      	mov	r1, r4
 800321c:	4628      	mov	r0, r5
 800321e:	f000 f80d 	bl	800323c <__swsetup_r>
 8003222:	2800      	cmp	r0, #0
 8003224:	d0cc      	beq.n	80031c0 <__swbuf_r+0x28>
 8003226:	f04f 37ff 	mov.w	r7, #4294967295
 800322a:	4638      	mov	r0, r7
 800322c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800322e:	bf00      	nop
 8003230:	08003aa8 	.word	0x08003aa8
 8003234:	08003ac8 	.word	0x08003ac8
 8003238:	08003a88 	.word	0x08003a88

0800323c <__swsetup_r>:
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <__swsetup_r+0xcc>)
 800323e:	b570      	push	{r4, r5, r6, lr}
 8003240:	681d      	ldr	r5, [r3, #0]
 8003242:	4606      	mov	r6, r0
 8003244:	460c      	mov	r4, r1
 8003246:	b125      	cbz	r5, 8003252 <__swsetup_r+0x16>
 8003248:	69ab      	ldr	r3, [r5, #24]
 800324a:	b913      	cbnz	r3, 8003252 <__swsetup_r+0x16>
 800324c:	4628      	mov	r0, r5
 800324e:	f000 f953 	bl	80034f8 <__sinit>
 8003252:	4b2e      	ldr	r3, [pc, #184]	; (800330c <__swsetup_r+0xd0>)
 8003254:	429c      	cmp	r4, r3
 8003256:	d10f      	bne.n	8003278 <__swsetup_r+0x3c>
 8003258:	686c      	ldr	r4, [r5, #4]
 800325a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800325e:	b29a      	uxth	r2, r3
 8003260:	0715      	lsls	r5, r2, #28
 8003262:	d42c      	bmi.n	80032be <__swsetup_r+0x82>
 8003264:	06d0      	lsls	r0, r2, #27
 8003266:	d411      	bmi.n	800328c <__swsetup_r+0x50>
 8003268:	2209      	movs	r2, #9
 800326a:	6032      	str	r2, [r6, #0]
 800326c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003270:	81a3      	strh	r3, [r4, #12]
 8003272:	f04f 30ff 	mov.w	r0, #4294967295
 8003276:	e03e      	b.n	80032f6 <__swsetup_r+0xba>
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <__swsetup_r+0xd4>)
 800327a:	429c      	cmp	r4, r3
 800327c:	d101      	bne.n	8003282 <__swsetup_r+0x46>
 800327e:	68ac      	ldr	r4, [r5, #8]
 8003280:	e7eb      	b.n	800325a <__swsetup_r+0x1e>
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <__swsetup_r+0xd8>)
 8003284:	429c      	cmp	r4, r3
 8003286:	bf08      	it	eq
 8003288:	68ec      	ldreq	r4, [r5, #12]
 800328a:	e7e6      	b.n	800325a <__swsetup_r+0x1e>
 800328c:	0751      	lsls	r1, r2, #29
 800328e:	d512      	bpl.n	80032b6 <__swsetup_r+0x7a>
 8003290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003292:	b141      	cbz	r1, 80032a6 <__swsetup_r+0x6a>
 8003294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003298:	4299      	cmp	r1, r3
 800329a:	d002      	beq.n	80032a2 <__swsetup_r+0x66>
 800329c:	4630      	mov	r0, r6
 800329e:	f000 fa19 	bl	80036d4 <_free_r>
 80032a2:	2300      	movs	r3, #0
 80032a4:	6363      	str	r3, [r4, #52]	; 0x34
 80032a6:	89a3      	ldrh	r3, [r4, #12]
 80032a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	2300      	movs	r3, #0
 80032b0:	6063      	str	r3, [r4, #4]
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	6923      	ldr	r3, [r4, #16]
 80032c0:	b94b      	cbnz	r3, 80032d6 <__swsetup_r+0x9a>
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032cc:	d003      	beq.n	80032d6 <__swsetup_r+0x9a>
 80032ce:	4621      	mov	r1, r4
 80032d0:	4630      	mov	r0, r6
 80032d2:	f000 f9bf 	bl	8003654 <__smakebuf_r>
 80032d6:	89a2      	ldrh	r2, [r4, #12]
 80032d8:	f012 0301 	ands.w	r3, r2, #1
 80032dc:	d00c      	beq.n	80032f8 <__swsetup_r+0xbc>
 80032de:	2300      	movs	r3, #0
 80032e0:	60a3      	str	r3, [r4, #8]
 80032e2:	6963      	ldr	r3, [r4, #20]
 80032e4:	425b      	negs	r3, r3
 80032e6:	61a3      	str	r3, [r4, #24]
 80032e8:	6923      	ldr	r3, [r4, #16]
 80032ea:	b953      	cbnz	r3, 8003302 <__swsetup_r+0xc6>
 80032ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80032f4:	d1ba      	bne.n	800326c <__swsetup_r+0x30>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	0792      	lsls	r2, r2, #30
 80032fa:	bf58      	it	pl
 80032fc:	6963      	ldrpl	r3, [r4, #20]
 80032fe:	60a3      	str	r3, [r4, #8]
 8003300:	e7f2      	b.n	80032e8 <__swsetup_r+0xac>
 8003302:	2000      	movs	r0, #0
 8003304:	e7f7      	b.n	80032f6 <__swsetup_r+0xba>
 8003306:	bf00      	nop
 8003308:	2000000c 	.word	0x2000000c
 800330c:	08003aa8 	.word	0x08003aa8
 8003310:	08003ac8 	.word	0x08003ac8
 8003314:	08003a88 	.word	0x08003a88

08003318 <__sflush_r>:
 8003318:	898a      	ldrh	r2, [r1, #12]
 800331a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800331e:	4605      	mov	r5, r0
 8003320:	0710      	lsls	r0, r2, #28
 8003322:	460c      	mov	r4, r1
 8003324:	d458      	bmi.n	80033d8 <__sflush_r+0xc0>
 8003326:	684b      	ldr	r3, [r1, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	dc05      	bgt.n	8003338 <__sflush_r+0x20>
 800332c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	dc02      	bgt.n	8003338 <__sflush_r+0x20>
 8003332:	2000      	movs	r0, #0
 8003334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800333a:	2e00      	cmp	r6, #0
 800333c:	d0f9      	beq.n	8003332 <__sflush_r+0x1a>
 800333e:	2300      	movs	r3, #0
 8003340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003344:	682f      	ldr	r7, [r5, #0]
 8003346:	6a21      	ldr	r1, [r4, #32]
 8003348:	602b      	str	r3, [r5, #0]
 800334a:	d032      	beq.n	80033b2 <__sflush_r+0x9a>
 800334c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800334e:	89a3      	ldrh	r3, [r4, #12]
 8003350:	075a      	lsls	r2, r3, #29
 8003352:	d505      	bpl.n	8003360 <__sflush_r+0x48>
 8003354:	6863      	ldr	r3, [r4, #4]
 8003356:	1ac0      	subs	r0, r0, r3
 8003358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800335a:	b10b      	cbz	r3, 8003360 <__sflush_r+0x48>
 800335c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800335e:	1ac0      	subs	r0, r0, r3
 8003360:	2300      	movs	r3, #0
 8003362:	4602      	mov	r2, r0
 8003364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003366:	6a21      	ldr	r1, [r4, #32]
 8003368:	4628      	mov	r0, r5
 800336a:	47b0      	blx	r6
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	89a3      	ldrh	r3, [r4, #12]
 8003370:	d106      	bne.n	8003380 <__sflush_r+0x68>
 8003372:	6829      	ldr	r1, [r5, #0]
 8003374:	291d      	cmp	r1, #29
 8003376:	d848      	bhi.n	800340a <__sflush_r+0xf2>
 8003378:	4a29      	ldr	r2, [pc, #164]	; (8003420 <__sflush_r+0x108>)
 800337a:	40ca      	lsrs	r2, r1
 800337c:	07d6      	lsls	r6, r2, #31
 800337e:	d544      	bpl.n	800340a <__sflush_r+0xf2>
 8003380:	2200      	movs	r2, #0
 8003382:	6062      	str	r2, [r4, #4]
 8003384:	6922      	ldr	r2, [r4, #16]
 8003386:	04d9      	lsls	r1, r3, #19
 8003388:	6022      	str	r2, [r4, #0]
 800338a:	d504      	bpl.n	8003396 <__sflush_r+0x7e>
 800338c:	1c42      	adds	r2, r0, #1
 800338e:	d101      	bne.n	8003394 <__sflush_r+0x7c>
 8003390:	682b      	ldr	r3, [r5, #0]
 8003392:	b903      	cbnz	r3, 8003396 <__sflush_r+0x7e>
 8003394:	6560      	str	r0, [r4, #84]	; 0x54
 8003396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003398:	602f      	str	r7, [r5, #0]
 800339a:	2900      	cmp	r1, #0
 800339c:	d0c9      	beq.n	8003332 <__sflush_r+0x1a>
 800339e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033a2:	4299      	cmp	r1, r3
 80033a4:	d002      	beq.n	80033ac <__sflush_r+0x94>
 80033a6:	4628      	mov	r0, r5
 80033a8:	f000 f994 	bl	80036d4 <_free_r>
 80033ac:	2000      	movs	r0, #0
 80033ae:	6360      	str	r0, [r4, #52]	; 0x34
 80033b0:	e7c0      	b.n	8003334 <__sflush_r+0x1c>
 80033b2:	2301      	movs	r3, #1
 80033b4:	4628      	mov	r0, r5
 80033b6:	47b0      	blx	r6
 80033b8:	1c41      	adds	r1, r0, #1
 80033ba:	d1c8      	bne.n	800334e <__sflush_r+0x36>
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0c5      	beq.n	800334e <__sflush_r+0x36>
 80033c2:	2b1d      	cmp	r3, #29
 80033c4:	d001      	beq.n	80033ca <__sflush_r+0xb2>
 80033c6:	2b16      	cmp	r3, #22
 80033c8:	d101      	bne.n	80033ce <__sflush_r+0xb6>
 80033ca:	602f      	str	r7, [r5, #0]
 80033cc:	e7b1      	b.n	8003332 <__sflush_r+0x1a>
 80033ce:	89a3      	ldrh	r3, [r4, #12]
 80033d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d4:	81a3      	strh	r3, [r4, #12]
 80033d6:	e7ad      	b.n	8003334 <__sflush_r+0x1c>
 80033d8:	690f      	ldr	r7, [r1, #16]
 80033da:	2f00      	cmp	r7, #0
 80033dc:	d0a9      	beq.n	8003332 <__sflush_r+0x1a>
 80033de:	0793      	lsls	r3, r2, #30
 80033e0:	bf18      	it	ne
 80033e2:	2300      	movne	r3, #0
 80033e4:	680e      	ldr	r6, [r1, #0]
 80033e6:	bf08      	it	eq
 80033e8:	694b      	ldreq	r3, [r1, #20]
 80033ea:	eba6 0807 	sub.w	r8, r6, r7
 80033ee:	600f      	str	r7, [r1, #0]
 80033f0:	608b      	str	r3, [r1, #8]
 80033f2:	f1b8 0f00 	cmp.w	r8, #0
 80033f6:	dd9c      	ble.n	8003332 <__sflush_r+0x1a>
 80033f8:	4643      	mov	r3, r8
 80033fa:	463a      	mov	r2, r7
 80033fc:	6a21      	ldr	r1, [r4, #32]
 80033fe:	4628      	mov	r0, r5
 8003400:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003402:	47b0      	blx	r6
 8003404:	2800      	cmp	r0, #0
 8003406:	dc06      	bgt.n	8003416 <__sflush_r+0xfe>
 8003408:	89a3      	ldrh	r3, [r4, #12]
 800340a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800340e:	81a3      	strh	r3, [r4, #12]
 8003410:	f04f 30ff 	mov.w	r0, #4294967295
 8003414:	e78e      	b.n	8003334 <__sflush_r+0x1c>
 8003416:	4407      	add	r7, r0
 8003418:	eba8 0800 	sub.w	r8, r8, r0
 800341c:	e7e9      	b.n	80033f2 <__sflush_r+0xda>
 800341e:	bf00      	nop
 8003420:	20400001 	.word	0x20400001

08003424 <_fflush_r>:
 8003424:	b538      	push	{r3, r4, r5, lr}
 8003426:	690b      	ldr	r3, [r1, #16]
 8003428:	4605      	mov	r5, r0
 800342a:	460c      	mov	r4, r1
 800342c:	b1db      	cbz	r3, 8003466 <_fflush_r+0x42>
 800342e:	b118      	cbz	r0, 8003438 <_fflush_r+0x14>
 8003430:	6983      	ldr	r3, [r0, #24]
 8003432:	b90b      	cbnz	r3, 8003438 <_fflush_r+0x14>
 8003434:	f000 f860 	bl	80034f8 <__sinit>
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <_fflush_r+0x48>)
 800343a:	429c      	cmp	r4, r3
 800343c:	d109      	bne.n	8003452 <_fflush_r+0x2e>
 800343e:	686c      	ldr	r4, [r5, #4]
 8003440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003444:	b17b      	cbz	r3, 8003466 <_fflush_r+0x42>
 8003446:	4621      	mov	r1, r4
 8003448:	4628      	mov	r0, r5
 800344a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800344e:	f7ff bf63 	b.w	8003318 <__sflush_r>
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <_fflush_r+0x4c>)
 8003454:	429c      	cmp	r4, r3
 8003456:	d101      	bne.n	800345c <_fflush_r+0x38>
 8003458:	68ac      	ldr	r4, [r5, #8]
 800345a:	e7f1      	b.n	8003440 <_fflush_r+0x1c>
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <_fflush_r+0x50>)
 800345e:	429c      	cmp	r4, r3
 8003460:	bf08      	it	eq
 8003462:	68ec      	ldreq	r4, [r5, #12]
 8003464:	e7ec      	b.n	8003440 <_fflush_r+0x1c>
 8003466:	2000      	movs	r0, #0
 8003468:	bd38      	pop	{r3, r4, r5, pc}
 800346a:	bf00      	nop
 800346c:	08003aa8 	.word	0x08003aa8
 8003470:	08003ac8 	.word	0x08003ac8
 8003474:	08003a88 	.word	0x08003a88

08003478 <std>:
 8003478:	2300      	movs	r3, #0
 800347a:	b510      	push	{r4, lr}
 800347c:	4604      	mov	r4, r0
 800347e:	e9c0 3300 	strd	r3, r3, [r0]
 8003482:	6083      	str	r3, [r0, #8]
 8003484:	8181      	strh	r1, [r0, #12]
 8003486:	6643      	str	r3, [r0, #100]	; 0x64
 8003488:	81c2      	strh	r2, [r0, #14]
 800348a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800348e:	6183      	str	r3, [r0, #24]
 8003490:	4619      	mov	r1, r3
 8003492:	2208      	movs	r2, #8
 8003494:	305c      	adds	r0, #92	; 0x5c
 8003496:	f7ff fdd5 	bl	8003044 <memset>
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <std+0x38>)
 800349c:	6224      	str	r4, [r4, #32]
 800349e:	6263      	str	r3, [r4, #36]	; 0x24
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <std+0x3c>)
 80034a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <std+0x40>)
 80034a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <std+0x44>)
 80034aa:	6323      	str	r3, [r4, #48]	; 0x30
 80034ac:	bd10      	pop	{r4, pc}
 80034ae:	bf00      	nop
 80034b0:	08003841 	.word	0x08003841
 80034b4:	08003863 	.word	0x08003863
 80034b8:	0800389b 	.word	0x0800389b
 80034bc:	080038bf 	.word	0x080038bf

080034c0 <_cleanup_r>:
 80034c0:	4901      	ldr	r1, [pc, #4]	; (80034c8 <_cleanup_r+0x8>)
 80034c2:	f000 b885 	b.w	80035d0 <_fwalk_reent>
 80034c6:	bf00      	nop
 80034c8:	08003425 	.word	0x08003425

080034cc <__sfmoreglue>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2568      	movs	r5, #104	; 0x68
 80034d0:	1e4a      	subs	r2, r1, #1
 80034d2:	4355      	muls	r5, r2
 80034d4:	460e      	mov	r6, r1
 80034d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034da:	f000 f947 	bl	800376c <_malloc_r>
 80034de:	4604      	mov	r4, r0
 80034e0:	b140      	cbz	r0, 80034f4 <__sfmoreglue+0x28>
 80034e2:	2100      	movs	r1, #0
 80034e4:	e9c0 1600 	strd	r1, r6, [r0]
 80034e8:	300c      	adds	r0, #12
 80034ea:	60a0      	str	r0, [r4, #8]
 80034ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034f0:	f7ff fda8 	bl	8003044 <memset>
 80034f4:	4620      	mov	r0, r4
 80034f6:	bd70      	pop	{r4, r5, r6, pc}

080034f8 <__sinit>:
 80034f8:	6983      	ldr	r3, [r0, #24]
 80034fa:	b510      	push	{r4, lr}
 80034fc:	4604      	mov	r4, r0
 80034fe:	bb33      	cbnz	r3, 800354e <__sinit+0x56>
 8003500:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003504:	6503      	str	r3, [r0, #80]	; 0x50
 8003506:	4b12      	ldr	r3, [pc, #72]	; (8003550 <__sinit+0x58>)
 8003508:	4a12      	ldr	r2, [pc, #72]	; (8003554 <__sinit+0x5c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6282      	str	r2, [r0, #40]	; 0x28
 800350e:	4298      	cmp	r0, r3
 8003510:	bf04      	itt	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	6183      	streq	r3, [r0, #24]
 8003516:	f000 f81f 	bl	8003558 <__sfp>
 800351a:	6060      	str	r0, [r4, #4]
 800351c:	4620      	mov	r0, r4
 800351e:	f000 f81b 	bl	8003558 <__sfp>
 8003522:	60a0      	str	r0, [r4, #8]
 8003524:	4620      	mov	r0, r4
 8003526:	f000 f817 	bl	8003558 <__sfp>
 800352a:	2200      	movs	r2, #0
 800352c:	60e0      	str	r0, [r4, #12]
 800352e:	2104      	movs	r1, #4
 8003530:	6860      	ldr	r0, [r4, #4]
 8003532:	f7ff ffa1 	bl	8003478 <std>
 8003536:	2201      	movs	r2, #1
 8003538:	2109      	movs	r1, #9
 800353a:	68a0      	ldr	r0, [r4, #8]
 800353c:	f7ff ff9c 	bl	8003478 <std>
 8003540:	2202      	movs	r2, #2
 8003542:	2112      	movs	r1, #18
 8003544:	68e0      	ldr	r0, [r4, #12]
 8003546:	f7ff ff97 	bl	8003478 <std>
 800354a:	2301      	movs	r3, #1
 800354c:	61a3      	str	r3, [r4, #24]
 800354e:	bd10      	pop	{r4, pc}
 8003550:	08003a5c 	.word	0x08003a5c
 8003554:	080034c1 	.word	0x080034c1

08003558 <__sfp>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <__sfp+0x70>)
 800355c:	4607      	mov	r7, r0
 800355e:	681e      	ldr	r6, [r3, #0]
 8003560:	69b3      	ldr	r3, [r6, #24]
 8003562:	b913      	cbnz	r3, 800356a <__sfp+0x12>
 8003564:	4630      	mov	r0, r6
 8003566:	f7ff ffc7 	bl	80034f8 <__sinit>
 800356a:	3648      	adds	r6, #72	; 0x48
 800356c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003570:	3b01      	subs	r3, #1
 8003572:	d503      	bpl.n	800357c <__sfp+0x24>
 8003574:	6833      	ldr	r3, [r6, #0]
 8003576:	b133      	cbz	r3, 8003586 <__sfp+0x2e>
 8003578:	6836      	ldr	r6, [r6, #0]
 800357a:	e7f7      	b.n	800356c <__sfp+0x14>
 800357c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003580:	b16d      	cbz	r5, 800359e <__sfp+0x46>
 8003582:	3468      	adds	r4, #104	; 0x68
 8003584:	e7f4      	b.n	8003570 <__sfp+0x18>
 8003586:	2104      	movs	r1, #4
 8003588:	4638      	mov	r0, r7
 800358a:	f7ff ff9f 	bl	80034cc <__sfmoreglue>
 800358e:	6030      	str	r0, [r6, #0]
 8003590:	2800      	cmp	r0, #0
 8003592:	d1f1      	bne.n	8003578 <__sfp+0x20>
 8003594:	230c      	movs	r3, #12
 8003596:	4604      	mov	r4, r0
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4620      	mov	r0, r4
 800359c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <__sfp+0x74>)
 80035a0:	6665      	str	r5, [r4, #100]	; 0x64
 80035a2:	e9c4 5500 	strd	r5, r5, [r4]
 80035a6:	60a5      	str	r5, [r4, #8]
 80035a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80035ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80035b0:	2208      	movs	r2, #8
 80035b2:	4629      	mov	r1, r5
 80035b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035b8:	f7ff fd44 	bl	8003044 <memset>
 80035bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035c4:	e7e9      	b.n	800359a <__sfp+0x42>
 80035c6:	bf00      	nop
 80035c8:	08003a5c 	.word	0x08003a5c
 80035cc:	ffff0001 	.word	0xffff0001

080035d0 <_fwalk_reent>:
 80035d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d4:	4680      	mov	r8, r0
 80035d6:	4689      	mov	r9, r1
 80035d8:	2600      	movs	r6, #0
 80035da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035de:	b914      	cbnz	r4, 80035e6 <_fwalk_reent+0x16>
 80035e0:	4630      	mov	r0, r6
 80035e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80035ea:	3f01      	subs	r7, #1
 80035ec:	d501      	bpl.n	80035f2 <_fwalk_reent+0x22>
 80035ee:	6824      	ldr	r4, [r4, #0]
 80035f0:	e7f5      	b.n	80035de <_fwalk_reent+0xe>
 80035f2:	89ab      	ldrh	r3, [r5, #12]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d907      	bls.n	8003608 <_fwalk_reent+0x38>
 80035f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035fc:	3301      	adds	r3, #1
 80035fe:	d003      	beq.n	8003608 <_fwalk_reent+0x38>
 8003600:	4629      	mov	r1, r5
 8003602:	4640      	mov	r0, r8
 8003604:	47c8      	blx	r9
 8003606:	4306      	orrs	r6, r0
 8003608:	3568      	adds	r5, #104	; 0x68
 800360a:	e7ee      	b.n	80035ea <_fwalk_reent+0x1a>

0800360c <__swhatbuf_r>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	460e      	mov	r6, r1
 8003610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003614:	b096      	sub	sp, #88	; 0x58
 8003616:	2900      	cmp	r1, #0
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	da07      	bge.n	800362e <__swhatbuf_r+0x22>
 800361e:	2300      	movs	r3, #0
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	89b3      	ldrh	r3, [r6, #12]
 8003624:	061a      	lsls	r2, r3, #24
 8003626:	d410      	bmi.n	800364a <__swhatbuf_r+0x3e>
 8003628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800362c:	e00e      	b.n	800364c <__swhatbuf_r+0x40>
 800362e:	466a      	mov	r2, sp
 8003630:	f000 f96c 	bl	800390c <_fstat_r>
 8003634:	2800      	cmp	r0, #0
 8003636:	dbf2      	blt.n	800361e <__swhatbuf_r+0x12>
 8003638:	9a01      	ldr	r2, [sp, #4]
 800363a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800363e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003642:	425a      	negs	r2, r3
 8003644:	415a      	adcs	r2, r3
 8003646:	602a      	str	r2, [r5, #0]
 8003648:	e7ee      	b.n	8003628 <__swhatbuf_r+0x1c>
 800364a:	2340      	movs	r3, #64	; 0x40
 800364c:	2000      	movs	r0, #0
 800364e:	6023      	str	r3, [r4, #0]
 8003650:	b016      	add	sp, #88	; 0x58
 8003652:	bd70      	pop	{r4, r5, r6, pc}

08003654 <__smakebuf_r>:
 8003654:	898b      	ldrh	r3, [r1, #12]
 8003656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003658:	079d      	lsls	r5, r3, #30
 800365a:	4606      	mov	r6, r0
 800365c:	460c      	mov	r4, r1
 800365e:	d507      	bpl.n	8003670 <__smakebuf_r+0x1c>
 8003660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	6123      	str	r3, [r4, #16]
 8003668:	2301      	movs	r3, #1
 800366a:	6163      	str	r3, [r4, #20]
 800366c:	b002      	add	sp, #8
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	ab01      	add	r3, sp, #4
 8003672:	466a      	mov	r2, sp
 8003674:	f7ff ffca 	bl	800360c <__swhatbuf_r>
 8003678:	9900      	ldr	r1, [sp, #0]
 800367a:	4605      	mov	r5, r0
 800367c:	4630      	mov	r0, r6
 800367e:	f000 f875 	bl	800376c <_malloc_r>
 8003682:	b948      	cbnz	r0, 8003698 <__smakebuf_r+0x44>
 8003684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003688:	059a      	lsls	r2, r3, #22
 800368a:	d4ef      	bmi.n	800366c <__smakebuf_r+0x18>
 800368c:	f023 0303 	bic.w	r3, r3, #3
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	81a3      	strh	r3, [r4, #12]
 8003696:	e7e3      	b.n	8003660 <__smakebuf_r+0xc>
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <__smakebuf_r+0x7c>)
 800369a:	62b3      	str	r3, [r6, #40]	; 0x28
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	6020      	str	r0, [r4, #0]
 80036a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	9b00      	ldr	r3, [sp, #0]
 80036a8:	6120      	str	r0, [r4, #16]
 80036aa:	6163      	str	r3, [r4, #20]
 80036ac:	9b01      	ldr	r3, [sp, #4]
 80036ae:	b15b      	cbz	r3, 80036c8 <__smakebuf_r+0x74>
 80036b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 f93b 	bl	8003930 <_isatty_r>
 80036ba:	b128      	cbz	r0, 80036c8 <__smakebuf_r+0x74>
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	81a3      	strh	r3, [r4, #12]
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	431d      	orrs	r5, r3
 80036cc:	81a5      	strh	r5, [r4, #12]
 80036ce:	e7cd      	b.n	800366c <__smakebuf_r+0x18>
 80036d0:	080034c1 	.word	0x080034c1

080036d4 <_free_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4605      	mov	r5, r0
 80036d8:	2900      	cmp	r1, #0
 80036da:	d043      	beq.n	8003764 <_free_r+0x90>
 80036dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036e0:	1f0c      	subs	r4, r1, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	bfb8      	it	lt
 80036e6:	18e4      	addlt	r4, r4, r3
 80036e8:	f000 f944 	bl	8003974 <__malloc_lock>
 80036ec:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <_free_r+0x94>)
 80036ee:	6813      	ldr	r3, [r2, #0]
 80036f0:	4610      	mov	r0, r2
 80036f2:	b933      	cbnz	r3, 8003702 <_free_r+0x2e>
 80036f4:	6063      	str	r3, [r4, #4]
 80036f6:	6014      	str	r4, [r2, #0]
 80036f8:	4628      	mov	r0, r5
 80036fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036fe:	f000 b93a 	b.w	8003976 <__malloc_unlock>
 8003702:	42a3      	cmp	r3, r4
 8003704:	d90b      	bls.n	800371e <_free_r+0x4a>
 8003706:	6821      	ldr	r1, [r4, #0]
 8003708:	1862      	adds	r2, r4, r1
 800370a:	4293      	cmp	r3, r2
 800370c:	bf01      	itttt	eq
 800370e:	681a      	ldreq	r2, [r3, #0]
 8003710:	685b      	ldreq	r3, [r3, #4]
 8003712:	1852      	addeq	r2, r2, r1
 8003714:	6022      	streq	r2, [r4, #0]
 8003716:	6063      	str	r3, [r4, #4]
 8003718:	6004      	str	r4, [r0, #0]
 800371a:	e7ed      	b.n	80036f8 <_free_r+0x24>
 800371c:	4613      	mov	r3, r2
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	b10a      	cbz	r2, 8003726 <_free_r+0x52>
 8003722:	42a2      	cmp	r2, r4
 8003724:	d9fa      	bls.n	800371c <_free_r+0x48>
 8003726:	6819      	ldr	r1, [r3, #0]
 8003728:	1858      	adds	r0, r3, r1
 800372a:	42a0      	cmp	r0, r4
 800372c:	d10b      	bne.n	8003746 <_free_r+0x72>
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	4401      	add	r1, r0
 8003732:	1858      	adds	r0, r3, r1
 8003734:	4282      	cmp	r2, r0
 8003736:	6019      	str	r1, [r3, #0]
 8003738:	d1de      	bne.n	80036f8 <_free_r+0x24>
 800373a:	6810      	ldr	r0, [r2, #0]
 800373c:	6852      	ldr	r2, [r2, #4]
 800373e:	4401      	add	r1, r0
 8003740:	6019      	str	r1, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	e7d8      	b.n	80036f8 <_free_r+0x24>
 8003746:	d902      	bls.n	800374e <_free_r+0x7a>
 8003748:	230c      	movs	r3, #12
 800374a:	602b      	str	r3, [r5, #0]
 800374c:	e7d4      	b.n	80036f8 <_free_r+0x24>
 800374e:	6820      	ldr	r0, [r4, #0]
 8003750:	1821      	adds	r1, r4, r0
 8003752:	428a      	cmp	r2, r1
 8003754:	bf01      	itttt	eq
 8003756:	6811      	ldreq	r1, [r2, #0]
 8003758:	6852      	ldreq	r2, [r2, #4]
 800375a:	1809      	addeq	r1, r1, r0
 800375c:	6021      	streq	r1, [r4, #0]
 800375e:	6062      	str	r2, [r4, #4]
 8003760:	605c      	str	r4, [r3, #4]
 8003762:	e7c9      	b.n	80036f8 <_free_r+0x24>
 8003764:	bd38      	pop	{r3, r4, r5, pc}
 8003766:	bf00      	nop
 8003768:	20000090 	.word	0x20000090

0800376c <_malloc_r>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	1ccd      	adds	r5, r1, #3
 8003770:	f025 0503 	bic.w	r5, r5, #3
 8003774:	3508      	adds	r5, #8
 8003776:	2d0c      	cmp	r5, #12
 8003778:	bf38      	it	cc
 800377a:	250c      	movcc	r5, #12
 800377c:	2d00      	cmp	r5, #0
 800377e:	4606      	mov	r6, r0
 8003780:	db01      	blt.n	8003786 <_malloc_r+0x1a>
 8003782:	42a9      	cmp	r1, r5
 8003784:	d903      	bls.n	800378e <_malloc_r+0x22>
 8003786:	230c      	movs	r3, #12
 8003788:	6033      	str	r3, [r6, #0]
 800378a:	2000      	movs	r0, #0
 800378c:	bd70      	pop	{r4, r5, r6, pc}
 800378e:	f000 f8f1 	bl	8003974 <__malloc_lock>
 8003792:	4a21      	ldr	r2, [pc, #132]	; (8003818 <_malloc_r+0xac>)
 8003794:	6814      	ldr	r4, [r2, #0]
 8003796:	4621      	mov	r1, r4
 8003798:	b991      	cbnz	r1, 80037c0 <_malloc_r+0x54>
 800379a:	4c20      	ldr	r4, [pc, #128]	; (800381c <_malloc_r+0xb0>)
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	b91b      	cbnz	r3, 80037a8 <_malloc_r+0x3c>
 80037a0:	4630      	mov	r0, r6
 80037a2:	f000 f83d 	bl	8003820 <_sbrk_r>
 80037a6:	6020      	str	r0, [r4, #0]
 80037a8:	4629      	mov	r1, r5
 80037aa:	4630      	mov	r0, r6
 80037ac:	f000 f838 	bl	8003820 <_sbrk_r>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d124      	bne.n	80037fe <_malloc_r+0x92>
 80037b4:	230c      	movs	r3, #12
 80037b6:	4630      	mov	r0, r6
 80037b8:	6033      	str	r3, [r6, #0]
 80037ba:	f000 f8dc 	bl	8003976 <__malloc_unlock>
 80037be:	e7e4      	b.n	800378a <_malloc_r+0x1e>
 80037c0:	680b      	ldr	r3, [r1, #0]
 80037c2:	1b5b      	subs	r3, r3, r5
 80037c4:	d418      	bmi.n	80037f8 <_malloc_r+0x8c>
 80037c6:	2b0b      	cmp	r3, #11
 80037c8:	d90f      	bls.n	80037ea <_malloc_r+0x7e>
 80037ca:	600b      	str	r3, [r1, #0]
 80037cc:	18cc      	adds	r4, r1, r3
 80037ce:	50cd      	str	r5, [r1, r3]
 80037d0:	4630      	mov	r0, r6
 80037d2:	f000 f8d0 	bl	8003976 <__malloc_unlock>
 80037d6:	f104 000b 	add.w	r0, r4, #11
 80037da:	1d23      	adds	r3, r4, #4
 80037dc:	f020 0007 	bic.w	r0, r0, #7
 80037e0:	1ac3      	subs	r3, r0, r3
 80037e2:	d0d3      	beq.n	800378c <_malloc_r+0x20>
 80037e4:	425a      	negs	r2, r3
 80037e6:	50e2      	str	r2, [r4, r3]
 80037e8:	e7d0      	b.n	800378c <_malloc_r+0x20>
 80037ea:	684b      	ldr	r3, [r1, #4]
 80037ec:	428c      	cmp	r4, r1
 80037ee:	bf16      	itet	ne
 80037f0:	6063      	strne	r3, [r4, #4]
 80037f2:	6013      	streq	r3, [r2, #0]
 80037f4:	460c      	movne	r4, r1
 80037f6:	e7eb      	b.n	80037d0 <_malloc_r+0x64>
 80037f8:	460c      	mov	r4, r1
 80037fa:	6849      	ldr	r1, [r1, #4]
 80037fc:	e7cc      	b.n	8003798 <_malloc_r+0x2c>
 80037fe:	1cc4      	adds	r4, r0, #3
 8003800:	f024 0403 	bic.w	r4, r4, #3
 8003804:	42a0      	cmp	r0, r4
 8003806:	d005      	beq.n	8003814 <_malloc_r+0xa8>
 8003808:	1a21      	subs	r1, r4, r0
 800380a:	4630      	mov	r0, r6
 800380c:	f000 f808 	bl	8003820 <_sbrk_r>
 8003810:	3001      	adds	r0, #1
 8003812:	d0cf      	beq.n	80037b4 <_malloc_r+0x48>
 8003814:	6025      	str	r5, [r4, #0]
 8003816:	e7db      	b.n	80037d0 <_malloc_r+0x64>
 8003818:	20000090 	.word	0x20000090
 800381c:	20000094 	.word	0x20000094

08003820 <_sbrk_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	2300      	movs	r3, #0
 8003824:	4c05      	ldr	r4, [pc, #20]	; (800383c <_sbrk_r+0x1c>)
 8003826:	4605      	mov	r5, r0
 8003828:	4608      	mov	r0, r1
 800382a:	6023      	str	r3, [r4, #0]
 800382c:	f7fd feda 	bl	80015e4 <_sbrk>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d102      	bne.n	800383a <_sbrk_r+0x1a>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	b103      	cbz	r3, 800383a <_sbrk_r+0x1a>
 8003838:	602b      	str	r3, [r5, #0]
 800383a:	bd38      	pop	{r3, r4, r5, pc}
 800383c:	20000128 	.word	0x20000128

08003840 <__sread>:
 8003840:	b510      	push	{r4, lr}
 8003842:	460c      	mov	r4, r1
 8003844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003848:	f000 f896 	bl	8003978 <_read_r>
 800384c:	2800      	cmp	r0, #0
 800384e:	bfab      	itete	ge
 8003850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003852:	89a3      	ldrhlt	r3, [r4, #12]
 8003854:	181b      	addge	r3, r3, r0
 8003856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800385a:	bfac      	ite	ge
 800385c:	6563      	strge	r3, [r4, #84]	; 0x54
 800385e:	81a3      	strhlt	r3, [r4, #12]
 8003860:	bd10      	pop	{r4, pc}

08003862 <__swrite>:
 8003862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003866:	461f      	mov	r7, r3
 8003868:	898b      	ldrh	r3, [r1, #12]
 800386a:	4605      	mov	r5, r0
 800386c:	05db      	lsls	r3, r3, #23
 800386e:	460c      	mov	r4, r1
 8003870:	4616      	mov	r6, r2
 8003872:	d505      	bpl.n	8003880 <__swrite+0x1e>
 8003874:	2302      	movs	r3, #2
 8003876:	2200      	movs	r2, #0
 8003878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800387c:	f000 f868 	bl	8003950 <_lseek_r>
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	4632      	mov	r2, r6
 8003884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800388e:	463b      	mov	r3, r7
 8003890:	4628      	mov	r0, r5
 8003892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003896:	f000 b817 	b.w	80038c8 <_write_r>

0800389a <__sseek>:
 800389a:	b510      	push	{r4, lr}
 800389c:	460c      	mov	r4, r1
 800389e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a2:	f000 f855 	bl	8003950 <_lseek_r>
 80038a6:	1c43      	adds	r3, r0, #1
 80038a8:	89a3      	ldrh	r3, [r4, #12]
 80038aa:	bf15      	itete	ne
 80038ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80038ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038b6:	81a3      	strheq	r3, [r4, #12]
 80038b8:	bf18      	it	ne
 80038ba:	81a3      	strhne	r3, [r4, #12]
 80038bc:	bd10      	pop	{r4, pc}

080038be <__sclose>:
 80038be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c2:	f000 b813 	b.w	80038ec <_close_r>
	...

080038c8 <_write_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4605      	mov	r5, r0
 80038cc:	4608      	mov	r0, r1
 80038ce:	4611      	mov	r1, r2
 80038d0:	2200      	movs	r2, #0
 80038d2:	4c05      	ldr	r4, [pc, #20]	; (80038e8 <_write_r+0x20>)
 80038d4:	6022      	str	r2, [r4, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f7fd fe38 	bl	800154c <_write>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_write_r+0x1e>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_write_r+0x1e>
 80038e4:	602b      	str	r3, [r5, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	20000128 	.word	0x20000128

080038ec <_close_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	2300      	movs	r3, #0
 80038f0:	4c05      	ldr	r4, [pc, #20]	; (8003908 <_close_r+0x1c>)
 80038f2:	4605      	mov	r5, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	f7fd fe44 	bl	8001584 <_close>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_close_r+0x1a>
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	b103      	cbz	r3, 8003906 <_close_r+0x1a>
 8003904:	602b      	str	r3, [r5, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	20000128 	.word	0x20000128

0800390c <_fstat_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	2300      	movs	r3, #0
 8003910:	4c06      	ldr	r4, [pc, #24]	; (800392c <_fstat_r+0x20>)
 8003912:	4605      	mov	r5, r0
 8003914:	4608      	mov	r0, r1
 8003916:	4611      	mov	r1, r2
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	f7fd fe3e 	bl	800159a <_fstat>
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	d102      	bne.n	8003928 <_fstat_r+0x1c>
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	b103      	cbz	r3, 8003928 <_fstat_r+0x1c>
 8003926:	602b      	str	r3, [r5, #0]
 8003928:	bd38      	pop	{r3, r4, r5, pc}
 800392a:	bf00      	nop
 800392c:	20000128 	.word	0x20000128

08003930 <_isatty_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	2300      	movs	r3, #0
 8003934:	4c05      	ldr	r4, [pc, #20]	; (800394c <_isatty_r+0x1c>)
 8003936:	4605      	mov	r5, r0
 8003938:	4608      	mov	r0, r1
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	f7fd fe3c 	bl	80015b8 <_isatty>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	d102      	bne.n	800394a <_isatty_r+0x1a>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	b103      	cbz	r3, 800394a <_isatty_r+0x1a>
 8003948:	602b      	str	r3, [r5, #0]
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	20000128 	.word	0x20000128

08003950 <_lseek_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4605      	mov	r5, r0
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	2200      	movs	r2, #0
 800395a:	4c05      	ldr	r4, [pc, #20]	; (8003970 <_lseek_r+0x20>)
 800395c:	6022      	str	r2, [r4, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	f7fd fe34 	bl	80015cc <_lseek>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d102      	bne.n	800396e <_lseek_r+0x1e>
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	b103      	cbz	r3, 800396e <_lseek_r+0x1e>
 800396c:	602b      	str	r3, [r5, #0]
 800396e:	bd38      	pop	{r3, r4, r5, pc}
 8003970:	20000128 	.word	0x20000128

08003974 <__malloc_lock>:
 8003974:	4770      	bx	lr

08003976 <__malloc_unlock>:
 8003976:	4770      	bx	lr

08003978 <_read_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4605      	mov	r5, r0
 800397c:	4608      	mov	r0, r1
 800397e:	4611      	mov	r1, r2
 8003980:	2200      	movs	r2, #0
 8003982:	4c05      	ldr	r4, [pc, #20]	; (8003998 <_read_r+0x20>)
 8003984:	6022      	str	r2, [r4, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	f7fd fdc3 	bl	8001512 <_read>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_read_r+0x1e>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	b103      	cbz	r3, 8003996 <_read_r+0x1e>
 8003994:	602b      	str	r3, [r5, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	20000128 	.word	0x20000128

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr
