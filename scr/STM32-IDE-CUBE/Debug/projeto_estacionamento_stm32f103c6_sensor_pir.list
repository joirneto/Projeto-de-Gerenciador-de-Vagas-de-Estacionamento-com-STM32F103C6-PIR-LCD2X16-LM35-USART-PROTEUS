
projeto_estacionamento_stm32f103c6_sensor_pir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002014  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800223c  0800223c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800223c  0800223c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800223c  0800223c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800223c  0800223c  0001223c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002240  08002240  00012240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000070  080022b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080022b4  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c73  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001465  00000000  00000000  00025d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004f8  00000000  00000000  00027178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000440  00000000  00000000  00027670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017474  00000000  00000000  00027ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000052a2  00000000  00000000  0003ef24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e825  00000000  00000000  000441c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c29eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001794  00000000  00000000  000c2a68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002108 	.word	0x08002108

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002108 	.word	0x08002108

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800016e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000176:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800017c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800017e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	4618      	mov	r0, r3
 8000192:	f000 f80e 	bl	80001b2 <Lcd_init>

	return lcd;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	461d      	mov	r5, r3
 800019a:	f107 0410 	add.w	r4, r7, #16
 800019e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001aa:	68f8      	ldr	r0, [r7, #12]
 80001ac:	3728      	adds	r7, #40	; 0x28
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bdb0      	pop	{r4, r5, r7, pc}

080001b2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	7d9b      	ldrb	r3, [r3, #22]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d10c      	bne.n	80001dc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c2:	2133      	movs	r1, #51	; 0x33
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f000 f861 	bl	800028c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ca:	2132      	movs	r1, #50	; 0x32
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f000 f85d 	bl	800028c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d2:	2128      	movs	r1, #40	; 0x28
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f000 f859 	bl	800028c <lcd_write_command>
 80001da:	e003      	b.n	80001e4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001dc:	2138      	movs	r1, #56	; 0x38
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 f854 	bl	800028c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e4:	2101      	movs	r1, #1
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f000 f850 	bl	800028c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001ec:	210c      	movs	r1, #12
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f000 f84c 	bl	800028c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f4:	2106      	movs	r1, #6
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f848 	bl	800028c <lcd_write_command>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800020e:	2300      	movs	r3, #0
 8000210:	73fb      	strb	r3, [r7, #15]
 8000212:	e00a      	b.n	800022a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	4413      	add	r3, r2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	4619      	mov	r1, r3
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f000 f862 	bl	80002e8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	3301      	adds	r3, #1
 8000228:	73fb      	strb	r3, [r7, #15]
 800022a:	7bfc      	ldrb	r4, [r7, #15]
 800022c:	6838      	ldr	r0, [r7, #0]
 800022e:	f7ff ff8d 	bl	800014c <strlen>
 8000232:	4603      	mov	r3, r0
 8000234:	429c      	cmp	r4, r3
 8000236:	d3ed      	bcc.n	8000214 <Lcd_string+0x10>
	}
}
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}

08000240 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
 800024c:	4613      	mov	r3, r2
 800024e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000250:	78fb      	ldrb	r3, [r7, #3]
 8000252:	4a07      	ldr	r2, [pc, #28]	; (8000270 <Lcd_cursor+0x30>)
 8000254:	5cd2      	ldrb	r2, [r2, r3]
 8000256:	78bb      	ldrb	r3, [r7, #2]
 8000258:	4413      	add	r3, r2
 800025a:	b2db      	uxtb	r3, r3
 800025c:	3b80      	subs	r3, #128	; 0x80
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4619      	mov	r1, r3
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f000 f812 	bl	800028c <lcd_write_command>
	#endif
}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	0800219c 	.word	0x0800219c

08000274 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800027c:	2101      	movs	r1, #1
 800027e:	6878      	ldr	r0, [r7, #4]
 8000280:	f000 f804 	bl	800028c <lcd_write_command>
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6898      	ldr	r0, [r3, #8]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	899b      	ldrh	r3, [r3, #12]
 80002a0:	2200      	movs	r2, #0
 80002a2:	4619      	mov	r1, r3
 80002a4:	f000 fe3d 	bl	8000f22 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7d9b      	ldrb	r3, [r3, #22]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d111      	bne.n	80002d4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002b0:	78fb      	ldrb	r3, [r7, #3]
 80002b2:	091b      	lsrs	r3, r3, #4
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2204      	movs	r2, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	6878      	ldr	r0, [r7, #4]
 80002bc:	f000 f842 	bl	8000344 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	f003 030f 	and.w	r3, r3, #15
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2204      	movs	r2, #4
 80002ca:	4619      	mov	r1, r3
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f000 f839 	bl	8000344 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80002d2:	e005      	b.n	80002e0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2208      	movs	r2, #8
 80002d8:	4619      	mov	r1, r3
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 f832 	bl	8000344 <lcd_write>
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6898      	ldr	r0, [r3, #8]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	899b      	ldrh	r3, [r3, #12]
 80002fc:	2201      	movs	r2, #1
 80002fe:	4619      	mov	r1, r3
 8000300:	f000 fe0f 	bl	8000f22 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7d9b      	ldrb	r3, [r3, #22]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d111      	bne.n	8000330 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	091b      	lsrs	r3, r3, #4
 8000310:	b2db      	uxtb	r3, r3
 8000312:	2204      	movs	r2, #4
 8000314:	4619      	mov	r1, r3
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f814 	bl	8000344 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2204      	movs	r2, #4
 8000326:	4619      	mov	r1, r3
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f000 f80b 	bl	8000344 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800032e:	e005      	b.n	800033c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2208      	movs	r2, #8
 8000334:	4619      	mov	r1, r3
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 f804 	bl	8000344 <lcd_write>
}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
 8000350:	4613      	mov	r3, r2
 8000352:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000354:	2300      	movs	r3, #0
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e019      	b.n	800038e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4413      	add	r3, r2
 8000364:	6818      	ldr	r0, [r3, #0]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	685a      	ldr	r2, [r3, #4]
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	4413      	add	r3, r2
 8000370:	8819      	ldrh	r1, [r3, #0]
 8000372:	78fa      	ldrb	r2, [r7, #3]
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	fa42 f303 	asr.w	r3, r2, r3
 800037a:	b2db      	uxtb	r3, r3
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	461a      	mov	r2, r3
 8000384:	f000 fdcd 	bl	8000f22 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	3301      	adds	r3, #1
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	7bfa      	ldrb	r2, [r7, #15]
 8000390:	78bb      	ldrb	r3, [r7, #2]
 8000392:	429a      	cmp	r2, r3
 8000394:	d3e1      	bcc.n	800035a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6918      	ldr	r0, [r3, #16]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	8a9b      	ldrh	r3, [r3, #20]
 800039e:	2201      	movs	r2, #1
 80003a0:	4619      	mov	r1, r3
 80003a2:	f000 fdbe 	bl	8000f22 <HAL_GPIO_WritePin>
	DELAY(1);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 fb4c 	bl	8000a44 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6918      	ldr	r0, [r3, #16]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	8a9b      	ldrh	r3, [r3, #20]
 80003b4:	2200      	movs	r2, #0
 80003b6:	4619      	mov	r1, r3
 80003b8:	f000 fdb3 	bl	8000f22 <HAL_GPIO_WritePin>
}
 80003bc:	bf00      	nop
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b095      	sub	sp, #84	; 0x54
 80003c8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int vagas = 5;
 80003ca:	2305      	movs	r3, #5
 80003cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ce:	f000 fad7 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d2:	f000 f923 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d6:	f000 f95d 	bl	8000694 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports [] = {
 80003da:	4b84      	ldr	r3, [pc, #528]	; (80005ec <main+0x228>)
 80003dc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80003e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		D5_GPIO_Port,
		D6_GPIO_Port,
		D7_GPIO_Port
  };

  Lcd_PinType pins [] = {
 80003e6:	4a82      	ldr	r2, [pc, #520]	; (80005f0 <main+0x22c>)
 80003e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003f0:	e883 0003 	stmia.w	r3, {r0, r1}
		D5_Pin,
		D6_Pin,
		D7_Pin
  };

  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 80003f4:	f107 000c 	add.w	r0, r7, #12
 80003f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80003fc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000400:	2300      	movs	r3, #0
 8000402:	9303      	str	r3, [sp, #12]
 8000404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000408:	9302      	str	r3, [sp, #8]
 800040a:	4b7a      	ldr	r3, [pc, #488]	; (80005f4 <main+0x230>)
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	4b77      	ldr	r3, [pc, #476]	; (80005f4 <main+0x230>)
 8000416:	f7ff fea1 	bl	800015c <Lcd_create>
  Lcd_cursor(&lcd, 0, 0);
 800041a:	f107 030c 	add.w	r3, r7, #12
 800041e:	2200      	movs	r2, #0
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff0c 	bl	8000240 <Lcd_cursor>
  Lcd_string(&lcd,"ESTACIONAMENTO");
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	4972      	ldr	r1, [pc, #456]	; (80005f8 <main+0x234>)
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fee8 	bl	8000204 <Lcd_string>
  Lcd_cursor(&lcd, 1, 0);
 8000434:	f107 030c 	add.w	r3, r7, #12
 8000438:	2200      	movs	r2, #0
 800043a:	2101      	movs	r1, #1
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff feff 	bl	8000240 <Lcd_cursor>
  Lcd_string(&lcd,"DEDEL");
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	496d      	ldr	r1, [pc, #436]	; (80005fc <main+0x238>)
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fedb 	bl	8000204 <Lcd_string>
  HAL_Delay(50);
 800044e:	2032      	movs	r0, #50	; 0x32
 8000450:	f000 faf8 	bl	8000a44 <HAL_Delay>
  Lcd_clear(&lcd);
 8000454:	f107 030c 	add.w	r3, r7, #12
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff0b 	bl	8000274 <Lcd_clear>
  HAL_Delay(50);
 800045e:	2032      	movs	r0, #50	; 0x32
 8000460:	f000 faf0 	bl	8000a44 <HAL_Delay>

  Lcd_cursor(&lcd, 0, 0);
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	2200      	movs	r2, #0
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff fee7 	bl	8000240 <Lcd_cursor>
  Lcd_string(&lcd,"SEJA");
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	4962      	ldr	r1, [pc, #392]	; (8000600 <main+0x23c>)
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff fec3 	bl	8000204 <Lcd_string>
  Lcd_cursor(&lcd, 1, 0);
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	2200      	movs	r2, #0
 8000484:	2101      	movs	r1, #1
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff feda 	bl	8000240 <Lcd_cursor>
  Lcd_string(&lcd,"BEM-VINDO");
 800048c:	f107 030c 	add.w	r3, r7, #12
 8000490:	495c      	ldr	r1, [pc, #368]	; (8000604 <main+0x240>)
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff feb6 	bl	8000204 <Lcd_string>
  HAL_Delay(50);
 8000498:	2032      	movs	r0, #50	; 0x32
 800049a:	f000 fad3 	bl	8000a44 <HAL_Delay>
  Lcd_clear(&lcd);
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fee6 	bl	8000274 <Lcd_clear>
  HAL_Delay(50);
 80004a8:	2032      	movs	r0, #50	; 0x32
 80004aa:	f000 facb 	bl	8000a44 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Lcd_cursor(&lcd, 0, 0);
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	2200      	movs	r2, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fec2 	bl	8000240 <Lcd_cursor>
	  Lcd_string(&lcd,"VAGAS");
 80004bc:	f107 030c 	add.w	r3, r7, #12
 80004c0:	4951      	ldr	r1, [pc, #324]	; (8000608 <main+0x244>)
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fe9e 	bl	8000204 <Lcd_string>
	  Lcd_cursor(&lcd, 1, 0);
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	2200      	movs	r2, #0
 80004ce:	2101      	movs	r1, #1
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff feb5 	bl	8000240 <Lcd_cursor>

	  char snum[5];

	  // convert 123 to string [buf]
	  itoa(vagas, snum, 10);
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	220a      	movs	r2, #10
 80004da:	4619      	mov	r1, r3
 80004dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80004de:	f001 f965 	bl	80017ac <itoa>

	  // print our string
	  printf("%s\n", snum);
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 f9c7 	bl	8001878 <puts>
	  Lcd_string(&lcd, snum);
 80004ea:	1d3a      	adds	r2, r7, #4
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe86 	bl	8000204 <Lcd_string>
	  HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f000 faa3 	bl	8000a44 <HAL_Delay>
	  Lcd_clear(&lcd);
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff feb6 	bl	8000274 <Lcd_clear>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8000508:	2101      	movs	r1, #1
 800050a:	4840      	ldr	r0, [pc, #256]	; (800060c <main+0x248>)
 800050c:	f000 fcf2 	bl	8000ef4 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d030      	beq.n	8000578 <main+0x1b4>
		 if(vagas!=0){
 8000516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000518:	2b00      	cmp	r3, #0
 800051a:	d018      	beq.n	800054e <main+0x18a>
			 vagas--;
 800051c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800051e:	3b01      	subs	r3, #1
 8000520:	63fb      	str	r3, [r7, #60]	; 0x3c
			 while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8000522:	e00c      	b.n	800053e <main+0x17a>
				 Lcd_cursor(&lcd, 0, 0);
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff fe87 	bl	8000240 <Lcd_cursor>
				 Lcd_string(&lcd,"AGUARDE");
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4936      	ldr	r1, [pc, #216]	; (8000610 <main+0x24c>)
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff fe63 	bl	8000204 <Lcd_string>
			 while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 800053e:	2101      	movs	r1, #1
 8000540:	4832      	ldr	r0, [pc, #200]	; (800060c <main+0x248>)
 8000542:	f000 fcd7 	bl	8000ef4 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1eb      	bne.n	8000524 <main+0x160>
 800054c:	e00f      	b.n	800056e <main+0x1aa>
			 }
		 }
		 else{
			 Lcd_cursor(&lcd, 0, 0);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe72 	bl	8000240 <Lcd_cursor>
			 Lcd_string(&lcd,"LOTADO");
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	492c      	ldr	r1, [pc, #176]	; (8000614 <main+0x250>)
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff fe4e 	bl	8000204 <Lcd_string>
			 HAL_Delay(100);
 8000568:	2064      	movs	r0, #100	; 0x64
 800056a:	f000 fa6b 	bl	8000a44 <HAL_Delay>
		 }

		 Lcd_clear(&lcd);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fe7e 	bl	8000274 <Lcd_clear>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 8000578:	2102      	movs	r1, #2
 800057a:	4824      	ldr	r0, [pc, #144]	; (800060c <main+0x248>)
 800057c:	f000 fcba 	bl	8000ef4 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d093      	beq.n	80004ae <main+0xea>
		  if(vagas<5){
 8000586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000588:	2b04      	cmp	r3, #4
 800058a:	dc18      	bgt.n	80005be <main+0x1fa>
			vagas++;
 800058c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800058e:	3301      	adds	r3, #1
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 8000592:	e00c      	b.n	80005ae <main+0x1ea>
				 Lcd_cursor(&lcd, 0, 0);
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fe4f 	bl	8000240 <Lcd_cursor>
				 Lcd_string(&lcd,"AGUARDE");
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	491a      	ldr	r1, [pc, #104]	; (8000610 <main+0x24c>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fe2b 	bl	8000204 <Lcd_string>
			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 80005ae:	2102      	movs	r1, #2
 80005b0:	4816      	ldr	r0, [pc, #88]	; (800060c <main+0x248>)
 80005b2:	f000 fc9f 	bl	8000ef4 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1eb      	bne.n	8000594 <main+0x1d0>
 80005bc:	e00f      	b.n	80005de <main+0x21a>
			 }
		  }
		  else{
			  Lcd_cursor(&lcd, 0, 0);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe3a 	bl	8000240 <Lcd_cursor>
			  Lcd_string(&lcd,"DISPONIVEL");
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4911      	ldr	r1, [pc, #68]	; (8000618 <main+0x254>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fe16 	bl	8000204 <Lcd_string>
			  HAL_Delay(100);
 80005d8:	2064      	movs	r0, #100	; 0x64
 80005da:	f000 fa33 	bl	8000a44 <HAL_Delay>
		  }
		  Lcd_clear(&lcd);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fe46 	bl	8000274 <Lcd_clear>
  {
 80005e8:	e761      	b.n	80004ae <main+0xea>
 80005ea:	bf00      	nop
 80005ec:	08002170 	.word	0x08002170
 80005f0:	08002180 	.word	0x08002180
 80005f4:	40010800 	.word	0x40010800
 80005f8:	08002120 	.word	0x08002120
 80005fc:	08002130 	.word	0x08002130
 8000600:	08002138 	.word	0x08002138
 8000604:	08002140 	.word	0x08002140
 8000608:	0800214c 	.word	0x0800214c
 800060c:	40010c00 	.word	0x40010c00
 8000610:	08002154 	.word	0x08002154
 8000614:	0800215c 	.word	0x0800215c
 8000618:	08002164 	.word	0x08002164

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b090      	sub	sp, #64	; 0x40
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2228      	movs	r2, #40	; 0x28
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f8c0 	bl	80017b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2310      	movs	r3, #16
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064a:	2300      	movs	r3, #0
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fc7e 	bl	8000f54 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800065e:	f000 f867 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f000 feea 	bl	8001454 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000686:	f000 f853 	bl	8000730 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3740      	adds	r7, #64	; 0x40
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_GPIO_Init+0x90>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <MX_GPIO_Init+0x90>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_GPIO_Init+0x90>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_GPIO_Init+0x90>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_GPIO_Init+0x90>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_GPIO_Init+0x90>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 715e 	mov.w	r1, #888	; 0x378
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <MX_GPIO_Init+0x94>)
 80006e0:	f000 fc1f 	bl	8000f22 <HAL_GPIO_WritePin>
                          |RS_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80006e4:	f44f 735e 	mov.w	r3, #888	; 0x378
 80006e8:	60bb      	str	r3, [r7, #8]
                          |RS_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4619      	mov	r1, r3
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <MX_GPIO_Init+0x94>)
 80006fe:	f000 faa7 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000702:	2303      	movs	r3, #3
 8000704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_GPIO_Init+0x98>)
 8000716:	f000 fa9b 	bl	8000c50 <HAL_GPIO_Init>

}
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800
 800072c:	40010c00 	.word	0x40010c00

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000736:	e7fe      	b.n	8000736 <Error_Handler+0x6>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <HAL_MspInit+0x5c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_MspInit+0x5c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_MspInit+0x60>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_MspInit+0x60>)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000
 8000798:	40010000 	.word	0x40010000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e2:	f000 f913 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	e00a      	b.n	8000812 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007fc:	f3af 8000 	nop.w
 8000800:	4601      	mov	r1, r0
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	60ba      	str	r2, [r7, #8]
 8000808:	b2ca      	uxtb	r2, r1
 800080a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	429a      	cmp	r2, r3
 8000818:	dbf0      	blt.n	80007fc <_read+0x12>
	}

return len;
 800081a:	687b      	ldr	r3, [r7, #4]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e009      	b.n	800084a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	60ba      	str	r2, [r7, #8]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	3301      	adds	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	dbf1      	blt.n	8000836 <_write+0x12>
	}
	return len;
 8000852:	687b      	ldr	r3, [r7, #4]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_close>:

int _close(int file)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	return -1;
 8000864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000882:	605a      	str	r2, [r3, #4]
	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <_isatty>:

int _isatty(int file)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	return 1;
 8000898:	2301      	movs	r3, #1
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f000 ff1c 	bl	8001728 <__errno>
 80008f0:	4602      	mov	r2, r0
 80008f2:	230c      	movs	r3, #12
 80008f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20002800 	.word	0x20002800
 800091c:	00000400 	.word	0x00000400
 8000920:	2000008c 	.word	0x2000008c
 8000924:	200000a0 	.word	0x200000a0

08000928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000934:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000936:	e003      	b.n	8000940 <LoopCopyDataInit>

08000938 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800093a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800093c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800093e:	3104      	adds	r1, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000940:	480a      	ldr	r0, [pc, #40]	; (800096c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000944:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000946:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000948:	d3f6      	bcc.n	8000938 <CopyDataInit>
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800094c:	e002      	b.n	8000954 <LoopFillZerobss>

0800094e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000950:	f842 3b04 	str.w	r3, [r2], #4

08000954 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000956:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000958:	d3f9      	bcc.n	800094e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800095a:	f7ff ffe5 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095e:	f000 fee9 	bl	8001734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000962:	f7ff fd2f 	bl	80003c4 <main>
  bx lr
 8000966:	4770      	bx	lr
  ldr r3, =_sidata
 8000968:	08002244 	.word	0x08002244
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000970:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000974:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000978:	200000a0 	.word	0x200000a0

0800097c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_2_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_Init+0x28>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_Init+0x28>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f929 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000996:	2000      	movs	r0, #0
 8000998:	f000 f808 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800099c:	f7ff fecc 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40022000 	.word	0x40022000

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x54>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x58>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f933 	bl	8000c36 <HAL_SYSTICK_Config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00e      	b.n	80009f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d80a      	bhi.n	80009f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 f909 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_InitTick+0x5c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x1c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <HAL_IncTick+0x20>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000098 	.word	0x20000098

08000a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_GetTick+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000098 	.word	0x20000098

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff fff0 	bl	8000a30 <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_Delay+0x40>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffe0 	bl	8000a30 <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000008 	.word	0x20000008

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff90 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff49 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff5e 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff90 	bl	8000b40 <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5f 	bl	8000aec <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffb0 	bl	8000ba4 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b08b      	sub	sp, #44	; 0x2c
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	e121      	b.n	8000ea8 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c64:	2201      	movs	r2, #1
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f040 8110 	bne.w	8000ea2 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b12      	cmp	r3, #18
 8000c88:	d034      	beq.n	8000cf4 <HAL_GPIO_Init+0xa4>
 8000c8a:	2b12      	cmp	r3, #18
 8000c8c:	d80d      	bhi.n	8000caa <HAL_GPIO_Init+0x5a>
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d02b      	beq.n	8000cea <HAL_GPIO_Init+0x9a>
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d804      	bhi.n	8000ca0 <HAL_GPIO_Init+0x50>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d031      	beq.n	8000cfe <HAL_GPIO_Init+0xae>
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d01c      	beq.n	8000cd8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c9e:	e048      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d043      	beq.n	8000d2c <HAL_GPIO_Init+0xdc>
 8000ca4:	2b11      	cmp	r3, #17
 8000ca6:	d01b      	beq.n	8000ce0 <HAL_GPIO_Init+0x90>
          break;
 8000ca8:	e043      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000caa:	4a86      	ldr	r2, [pc, #536]	; (8000ec4 <HAL_GPIO_Init+0x274>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d026      	beq.n	8000cfe <HAL_GPIO_Init+0xae>
 8000cb0:	4a84      	ldr	r2, [pc, #528]	; (8000ec4 <HAL_GPIO_Init+0x274>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d806      	bhi.n	8000cc4 <HAL_GPIO_Init+0x74>
 8000cb6:	4a84      	ldr	r2, [pc, #528]	; (8000ec8 <HAL_GPIO_Init+0x278>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d020      	beq.n	8000cfe <HAL_GPIO_Init+0xae>
 8000cbc:	4a83      	ldr	r2, [pc, #524]	; (8000ecc <HAL_GPIO_Init+0x27c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d01d      	beq.n	8000cfe <HAL_GPIO_Init+0xae>
          break;
 8000cc2:	e036      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cc4:	4a82      	ldr	r2, [pc, #520]	; (8000ed0 <HAL_GPIO_Init+0x280>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d019      	beq.n	8000cfe <HAL_GPIO_Init+0xae>
 8000cca:	4a82      	ldr	r2, [pc, #520]	; (8000ed4 <HAL_GPIO_Init+0x284>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d016      	beq.n	8000cfe <HAL_GPIO_Init+0xae>
 8000cd0:	4a81      	ldr	r2, [pc, #516]	; (8000ed8 <HAL_GPIO_Init+0x288>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d013      	beq.n	8000cfe <HAL_GPIO_Init+0xae>
          break;
 8000cd6:	e02c      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e028      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e023      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	3308      	adds	r3, #8
 8000cf0:	623b      	str	r3, [r7, #32]
          break;
 8000cf2:	e01e      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	e019      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d06:	2304      	movs	r3, #4
 8000d08:	623b      	str	r3, [r7, #32]
          break;
 8000d0a:	e012      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d105      	bne.n	8000d20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d14:	2308      	movs	r3, #8
 8000d16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	611a      	str	r2, [r3, #16]
          break;
 8000d1e:	e008      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d20:	2308      	movs	r3, #8
 8000d22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	615a      	str	r2, [r3, #20]
          break;
 8000d2a:	e002      	b.n	8000d32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	2bff      	cmp	r3, #255	; 0xff
 8000d36:	d801      	bhi.n	8000d3c <HAL_GPIO_Init+0xec>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	e001      	b.n	8000d40 <HAL_GPIO_Init+0xf0>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3304      	adds	r3, #4
 8000d40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	2bff      	cmp	r3, #255	; 0xff
 8000d46:	d802      	bhi.n	8000d4e <HAL_GPIO_Init+0xfe>
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	e002      	b.n	8000d54 <HAL_GPIO_Init+0x104>
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	3b08      	subs	r3, #8
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	401a      	ands	r2, r3
 8000d66:	6a39      	ldr	r1, [r7, #32]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 8090 	beq.w	8000ea2 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d82:	4b56      	ldr	r3, [pc, #344]	; (8000edc <HAL_GPIO_Init+0x28c>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	4a55      	ldr	r2, [pc, #340]	; (8000edc <HAL_GPIO_Init+0x28c>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6193      	str	r3, [r2, #24]
 8000d8e:	4b53      	ldr	r3, [pc, #332]	; (8000edc <HAL_GPIO_Init+0x28c>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d9a:	4a51      	ldr	r2, [pc, #324]	; (8000ee0 <HAL_GPIO_Init+0x290>)
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a48      	ldr	r2, [pc, #288]	; (8000ee4 <HAL_GPIO_Init+0x294>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <HAL_GPIO_Init+0x192>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a47      	ldr	r2, [pc, #284]	; (8000ee8 <HAL_GPIO_Init+0x298>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d007      	beq.n	8000dde <HAL_GPIO_Init+0x18e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a46      	ldr	r2, [pc, #280]	; (8000eec <HAL_GPIO_Init+0x29c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d101      	bne.n	8000dda <HAL_GPIO_Init+0x18a>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e004      	b.n	8000de4 <HAL_GPIO_Init+0x194>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e002      	b.n	8000de4 <HAL_GPIO_Init+0x194>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <HAL_GPIO_Init+0x194>
 8000de2:	2300      	movs	r3, #0
 8000de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de6:	f002 0203 	and.w	r2, r2, #3
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	4093      	lsls	r3, r2
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000df4:	493a      	ldr	r1, [pc, #232]	; (8000ee0 <HAL_GPIO_Init+0x290>)
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d006      	beq.n	8000e1c <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e0e:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4937      	ldr	r1, [pc, #220]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
 8000e1a:	e006      	b.n	8000e2a <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e1c:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4932      	ldr	r1, [pc, #200]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	492d      	ldr	r1, [pc, #180]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	604b      	str	r3, [r1, #4]
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e44:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	4928      	ldr	r1, [pc, #160]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	4923      	ldr	r1, [pc, #140]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	608b      	str	r3, [r1, #8]
 8000e6a:	e006      	b.n	8000e7a <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	491e      	ldr	r1, [pc, #120]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	4919      	ldr	r1, [pc, #100]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	60cb      	str	r3, [r1, #12]
 8000e92:	e006      	b.n	8000ea2 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <HAL_GPIO_Init+0x2a0>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f47f aed6 	bne.w	8000c64 <HAL_GPIO_Init+0x14>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	372c      	adds	r7, #44	; 0x2c
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	10210000 	.word	0x10210000
 8000ec8:	10110000 	.word	0x10110000
 8000ecc:	10120000 	.word	0x10120000
 8000ed0:	10310000 	.word	0x10310000
 8000ed4:	10320000 	.word	0x10320000
 8000ed8:	10220000 	.word	0x10220000
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	40011000 	.word	0x40011000
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e001      	b.n	8000f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f32:	787b      	ldrb	r3, [r7, #1]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f3e:	e003      	b.n	8000f48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	041a      	lsls	r2, r3, #16
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	611a      	str	r2, [r3, #16]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e26c      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8087 	beq.w	8001082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f74:	4b92      	ldr	r3, [pc, #584]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d00c      	beq.n	8000f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f80:	4b8f      	ldr	r3, [pc, #572]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d112      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x5e>
 8000f8c:	4b8c      	ldr	r3, [pc, #560]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f98:	d10b      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9a:	4b89      	ldr	r3, [pc, #548]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d06c      	beq.n	8001080 <HAL_RCC_OscConfig+0x12c>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d168      	bne.n	8001080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e246      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fba:	d106      	bne.n	8000fca <HAL_RCC_OscConfig+0x76>
 8000fbc:	4b80      	ldr	r3, [pc, #512]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a7f      	ldr	r2, [pc, #508]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	e02e      	b.n	8001028 <HAL_RCC_OscConfig+0xd4>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x98>
 8000fd2:	4b7b      	ldr	r3, [pc, #492]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a7a      	ldr	r2, [pc, #488]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b78      	ldr	r3, [pc, #480]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a77      	ldr	r2, [pc, #476]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e01d      	b.n	8001028 <HAL_RCC_OscConfig+0xd4>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0xbc>
 8000ff6:	4b72      	ldr	r3, [pc, #456]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a71      	ldr	r2, [pc, #452]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b6f      	ldr	r3, [pc, #444]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a6e      	ldr	r2, [pc, #440]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e00b      	b.n	8001028 <HAL_RCC_OscConfig+0xd4>
 8001010:	4b6b      	ldr	r3, [pc, #428]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a6a      	ldr	r2, [pc, #424]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b68      	ldr	r3, [pc, #416]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a67      	ldr	r2, [pc, #412]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fcfe 	bl	8000a30 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fcfa 	bl	8000a30 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	; 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e1fa      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104a:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0xe4>
 8001056:	e014      	b.n	8001082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fcea 	bl	8000a30 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fce6 	bl	8000a30 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e1e6      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001072:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x10c>
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d063      	beq.n	8001156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800108e:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00b      	beq.n	80010b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800109a:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d11c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x18c>
 80010a6:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d116      	bne.n	80010e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b2:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <HAL_RCC_OscConfig+0x176>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d001      	beq.n	80010ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e1ba      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4939      	ldr	r1, [pc, #228]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010de:	e03a      	b.n	8001156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d020      	beq.n	800112a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_RCC_OscConfig+0x270>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fc9f 	bl	8000a30 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f6:	f7ff fc9b 	bl	8000a30 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e19b      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0f0      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4927      	ldr	r1, [pc, #156]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001124:	4313      	orrs	r3, r2
 8001126:	600b      	str	r3, [r1, #0]
 8001128:	e015      	b.n	8001156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_RCC_OscConfig+0x270>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fc7e 	bl	8000a30 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001138:	f7ff fc7a 	bl	8000a30 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e17a      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114a:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d03a      	beq.n	80011d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d019      	beq.n	800119e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_RCC_OscConfig+0x274>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001170:	f7ff fc5e 	bl	8000a30 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001178:	f7ff fc5a 	bl	8000a30 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e15a      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001196:	2001      	movs	r0, #1
 8001198:	f000 faa8 	bl	80016ec <RCC_Delay>
 800119c:	e01c      	b.n	80011d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_RCC_OscConfig+0x274>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a4:	f7ff fc44 	bl	8000a30 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011aa:	e00f      	b.n	80011cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc40 	bl	8000a30 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d908      	bls.n	80011cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e140      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	42420000 	.word	0x42420000
 80011c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011cc:	4b9e      	ldr	r3, [pc, #632]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1e9      	bne.n	80011ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80a6 	beq.w	8001332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ea:	4b97      	ldr	r3, [pc, #604]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b94      	ldr	r3, [pc, #592]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a93      	ldr	r2, [pc, #588]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b91      	ldr	r3, [pc, #580]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800120e:	2301      	movs	r3, #1
 8001210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001212:	4b8e      	ldr	r3, [pc, #568]	; (800144c <HAL_RCC_OscConfig+0x4f8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d118      	bne.n	8001250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121e:	4b8b      	ldr	r3, [pc, #556]	; (800144c <HAL_RCC_OscConfig+0x4f8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a8a      	ldr	r2, [pc, #552]	; (800144c <HAL_RCC_OscConfig+0x4f8>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122a:	f7ff fc01 	bl	8000a30 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001232:	f7ff fbfd 	bl	8000a30 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e0fd      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	4b81      	ldr	r3, [pc, #516]	; (800144c <HAL_RCC_OscConfig+0x4f8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x312>
 8001258:	4b7b      	ldr	r3, [pc, #492]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4a7a      	ldr	r2, [pc, #488]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6213      	str	r3, [r2, #32]
 8001264:	e02d      	b.n	80012c2 <HAL_RCC_OscConfig+0x36e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x334>
 800126e:	4b76      	ldr	r3, [pc, #472]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4a75      	ldr	r2, [pc, #468]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	6213      	str	r3, [r2, #32]
 800127a:	4b73      	ldr	r3, [pc, #460]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a72      	ldr	r2, [pc, #456]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001280:	f023 0304 	bic.w	r3, r3, #4
 8001284:	6213      	str	r3, [r2, #32]
 8001286:	e01c      	b.n	80012c2 <HAL_RCC_OscConfig+0x36e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b05      	cmp	r3, #5
 800128e:	d10c      	bne.n	80012aa <HAL_RCC_OscConfig+0x356>
 8001290:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a6c      	ldr	r2, [pc, #432]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6213      	str	r3, [r2, #32]
 800129c:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4a69      	ldr	r2, [pc, #420]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6213      	str	r3, [r2, #32]
 80012a8:	e00b      	b.n	80012c2 <HAL_RCC_OscConfig+0x36e>
 80012aa:	4b67      	ldr	r3, [pc, #412]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a66      	ldr	r2, [pc, #408]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	6213      	str	r3, [r2, #32]
 80012b6:	4b64      	ldr	r3, [pc, #400]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4a63      	ldr	r2, [pc, #396]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f023 0304 	bic.w	r3, r3, #4
 80012c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d015      	beq.n	80012f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fbb1 	bl	8000a30 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7ff fbad 	bl	8000a30 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e0ab      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e8:	4b57      	ldr	r3, [pc, #348]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0ee      	beq.n	80012d2 <HAL_RCC_OscConfig+0x37e>
 80012f4:	e014      	b.n	8001320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fb9b 	bl	8000a30 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fc:	e00a      	b.n	8001314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fe:	f7ff fb97 	bl	8000a30 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	f241 3288 	movw	r2, #5000	; 0x1388
 800130c:	4293      	cmp	r3, r2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e095      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001314:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1ee      	bne.n	80012fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001320:	7dfb      	ldrb	r3, [r7, #23]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d105      	bne.n	8001332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001326:	4b48      	ldr	r3, [pc, #288]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a47      	ldr	r2, [pc, #284]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 8081 	beq.w	800143e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b08      	cmp	r3, #8
 8001346:	d061      	beq.n	800140c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d146      	bne.n	80013de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001350:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x4fc>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fb6b 	bl	8000a30 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135e:	f7ff fb67 	bl	8000a30 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e067      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001370:	4b35      	ldr	r3, [pc, #212]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f0      	bne.n	800135e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001384:	d108      	bne.n	8001398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001386:	4b30      	ldr	r3, [pc, #192]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	492d      	ldr	r1, [pc, #180]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a19      	ldr	r1, [r3, #32]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	430b      	orrs	r3, r1
 80013aa:	4927      	ldr	r1, [pc, #156]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x4fc>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fb3b 	bl	8000a30 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013be:	f7ff fb37 	bl	8000a30 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e037      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x46a>
 80013dc:	e02f      	b.n	800143e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_RCC_OscConfig+0x4fc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb24 	bl	8000a30 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff fb20 	bl	8000a30 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e020      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x498>
 800140a:	e018      	b.n	800143e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e013      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_OscConfig+0x4f4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	429a      	cmp	r2, r3
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	40007000 	.word	0x40007000
 8001450:	42420060 	.word	0x42420060

08001454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0d0      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d910      	bls.n	8001498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b67      	ldr	r3, [pc, #412]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 0207 	bic.w	r2, r3, #7
 800147e:	4965      	ldr	r1, [pc, #404]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0b8      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b0:	4b59      	ldr	r3, [pc, #356]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c8:	4b53      	ldr	r3, [pc, #332]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a52      	ldr	r2, [pc, #328]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d4:	4b50      	ldr	r3, [pc, #320]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	494d      	ldr	r1, [pc, #308]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d040      	beq.n	8001574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b47      	ldr	r3, [pc, #284]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d115      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e07f      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e073      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e06b      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4936      	ldr	r1, [pc, #216]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001544:	f7ff fa74 	bl	8000a30 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff fa70 	bl	8000a30 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e053      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d210      	bcs.n	80015a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 0207 	bic.w	r2, r3, #7
 800158a:	4922      	ldr	r1, [pc, #136]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e032      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4916      	ldr	r1, [pc, #88]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	490e      	ldr	r1, [pc, #56]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015e2:	f000 f821 	bl	8001628 <HAL_RCC_GetSysClockFreq>
 80015e6:	4601      	mov	r1, r0
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_RCC_ClockConfig+0x1c8>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	fa21 f303 	lsr.w	r3, r1, r3
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1cc>)
 80015fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_ClockConfig+0x1d0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f9d2 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000
 8001618:	40021000 	.word	0x40021000
 800161c:	080021a0 	.word	0x080021a0
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001628:	b490      	push	{r4, r7}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001630:	1d3c      	adds	r4, r7, #4
 8001632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b04      	cmp	r3, #4
 8001660:	d002      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x40>
 8001662:	2b08      	cmp	r3, #8
 8001664:	d003      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0x46>
 8001666:	e02d      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800166a:	623b      	str	r3, [r7, #32]
      break;
 800166c:	e02d      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	0c9b      	lsrs	r3, r3, #18
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800167a:	4413      	add	r3, r2
 800167c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001680:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	0c5b      	lsrs	r3, r3, #17
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800169a:	4413      	add	r3, r2
 800169c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016a6:	fb02 f203 	mul.w	r2, r2, r3
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
 80016b2:	e004      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	623b      	str	r3, [r7, #32]
      break;
 80016c2:	e002      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016c6:	623b      	str	r3, [r7, #32]
      break;
 80016c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ca:	6a3b      	ldr	r3, [r7, #32]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc90      	pop	{r4, r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	08002188 	.word	0x08002188
 80016dc:	08002198 	.word	0x08002198
 80016e0:	40021000 	.word	0x40021000
 80016e4:	007a1200 	.word	0x007a1200
 80016e8:	003d0900 	.word	0x003d0900

080016ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <RCC_Delay+0x34>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <RCC_Delay+0x38>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0a5b      	lsrs	r3, r3, #9
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001708:	bf00      	nop
  }
  while (Delay --);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	60fa      	str	r2, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f9      	bne.n	8001708 <RCC_Delay+0x1c>
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000000 	.word	0x20000000
 8001724:	10624dd3 	.word	0x10624dd3

08001728 <__errno>:
 8001728:	4b01      	ldr	r3, [pc, #4]	; (8001730 <__errno+0x8>)
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	2000000c 	.word	0x2000000c

08001734 <__libc_init_array>:
 8001734:	b570      	push	{r4, r5, r6, lr}
 8001736:	2500      	movs	r5, #0
 8001738:	4e0c      	ldr	r6, [pc, #48]	; (800176c <__libc_init_array+0x38>)
 800173a:	4c0d      	ldr	r4, [pc, #52]	; (8001770 <__libc_init_array+0x3c>)
 800173c:	1ba4      	subs	r4, r4, r6
 800173e:	10a4      	asrs	r4, r4, #2
 8001740:	42a5      	cmp	r5, r4
 8001742:	d109      	bne.n	8001758 <__libc_init_array+0x24>
 8001744:	f000 fce0 	bl	8002108 <_init>
 8001748:	2500      	movs	r5, #0
 800174a:	4e0a      	ldr	r6, [pc, #40]	; (8001774 <__libc_init_array+0x40>)
 800174c:	4c0a      	ldr	r4, [pc, #40]	; (8001778 <__libc_init_array+0x44>)
 800174e:	1ba4      	subs	r4, r4, r6
 8001750:	10a4      	asrs	r4, r4, #2
 8001752:	42a5      	cmp	r5, r4
 8001754:	d105      	bne.n	8001762 <__libc_init_array+0x2e>
 8001756:	bd70      	pop	{r4, r5, r6, pc}
 8001758:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800175c:	4798      	blx	r3
 800175e:	3501      	adds	r5, #1
 8001760:	e7ee      	b.n	8001740 <__libc_init_array+0xc>
 8001762:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001766:	4798      	blx	r3
 8001768:	3501      	adds	r5, #1
 800176a:	e7f2      	b.n	8001752 <__libc_init_array+0x1e>
 800176c:	0800223c 	.word	0x0800223c
 8001770:	0800223c 	.word	0x0800223c
 8001774:	0800223c 	.word	0x0800223c
 8001778:	08002240 	.word	0x08002240

0800177c <__itoa>:
 800177c:	1e93      	subs	r3, r2, #2
 800177e:	2b22      	cmp	r3, #34	; 0x22
 8001780:	b510      	push	{r4, lr}
 8001782:	460c      	mov	r4, r1
 8001784:	d904      	bls.n	8001790 <__itoa+0x14>
 8001786:	2300      	movs	r3, #0
 8001788:	461c      	mov	r4, r3
 800178a:	700b      	strb	r3, [r1, #0]
 800178c:	4620      	mov	r0, r4
 800178e:	bd10      	pop	{r4, pc}
 8001790:	2a0a      	cmp	r2, #10
 8001792:	d109      	bne.n	80017a8 <__itoa+0x2c>
 8001794:	2800      	cmp	r0, #0
 8001796:	da07      	bge.n	80017a8 <__itoa+0x2c>
 8001798:	232d      	movs	r3, #45	; 0x2d
 800179a:	700b      	strb	r3, [r1, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	4240      	negs	r0, r0
 80017a0:	4421      	add	r1, r4
 80017a2:	f000 f871 	bl	8001888 <__utoa>
 80017a6:	e7f1      	b.n	800178c <__itoa+0x10>
 80017a8:	2100      	movs	r1, #0
 80017aa:	e7f9      	b.n	80017a0 <__itoa+0x24>

080017ac <itoa>:
 80017ac:	f7ff bfe6 	b.w	800177c <__itoa>

080017b0 <memset>:
 80017b0:	4603      	mov	r3, r0
 80017b2:	4402      	add	r2, r0
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d100      	bne.n	80017ba <memset+0xa>
 80017b8:	4770      	bx	lr
 80017ba:	f803 1b01 	strb.w	r1, [r3], #1
 80017be:	e7f9      	b.n	80017b4 <memset+0x4>

080017c0 <_puts_r>:
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	460e      	mov	r6, r1
 80017c4:	4605      	mov	r5, r0
 80017c6:	b118      	cbz	r0, 80017d0 <_puts_r+0x10>
 80017c8:	6983      	ldr	r3, [r0, #24]
 80017ca:	b90b      	cbnz	r3, 80017d0 <_puts_r+0x10>
 80017cc:	f000 fa4a 	bl	8001c64 <__sinit>
 80017d0:	69ab      	ldr	r3, [r5, #24]
 80017d2:	68ac      	ldr	r4, [r5, #8]
 80017d4:	b913      	cbnz	r3, 80017dc <_puts_r+0x1c>
 80017d6:	4628      	mov	r0, r5
 80017d8:	f000 fa44 	bl	8001c64 <__sinit>
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <_puts_r+0xac>)
 80017de:	429c      	cmp	r4, r3
 80017e0:	d117      	bne.n	8001812 <_puts_r+0x52>
 80017e2:	686c      	ldr	r4, [r5, #4]
 80017e4:	89a3      	ldrh	r3, [r4, #12]
 80017e6:	071b      	lsls	r3, r3, #28
 80017e8:	d51d      	bpl.n	8001826 <_puts_r+0x66>
 80017ea:	6923      	ldr	r3, [r4, #16]
 80017ec:	b1db      	cbz	r3, 8001826 <_puts_r+0x66>
 80017ee:	3e01      	subs	r6, #1
 80017f0:	68a3      	ldr	r3, [r4, #8]
 80017f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017f6:	3b01      	subs	r3, #1
 80017f8:	60a3      	str	r3, [r4, #8]
 80017fa:	b9e9      	cbnz	r1, 8001838 <_puts_r+0x78>
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da2e      	bge.n	800185e <_puts_r+0x9e>
 8001800:	4622      	mov	r2, r4
 8001802:	210a      	movs	r1, #10
 8001804:	4628      	mov	r0, r5
 8001806:	f000 f87d 	bl	8001904 <__swbuf_r>
 800180a:	3001      	adds	r0, #1
 800180c:	d011      	beq.n	8001832 <_puts_r+0x72>
 800180e:	200a      	movs	r0, #10
 8001810:	e011      	b.n	8001836 <_puts_r+0x76>
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <_puts_r+0xb0>)
 8001814:	429c      	cmp	r4, r3
 8001816:	d101      	bne.n	800181c <_puts_r+0x5c>
 8001818:	68ac      	ldr	r4, [r5, #8]
 800181a:	e7e3      	b.n	80017e4 <_puts_r+0x24>
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <_puts_r+0xb4>)
 800181e:	429c      	cmp	r4, r3
 8001820:	bf08      	it	eq
 8001822:	68ec      	ldreq	r4, [r5, #12]
 8001824:	e7de      	b.n	80017e4 <_puts_r+0x24>
 8001826:	4621      	mov	r1, r4
 8001828:	4628      	mov	r0, r5
 800182a:	f000 f8bd 	bl	80019a8 <__swsetup_r>
 800182e:	2800      	cmp	r0, #0
 8001830:	d0dd      	beq.n	80017ee <_puts_r+0x2e>
 8001832:	f04f 30ff 	mov.w	r0, #4294967295
 8001836:	bd70      	pop	{r4, r5, r6, pc}
 8001838:	2b00      	cmp	r3, #0
 800183a:	da04      	bge.n	8001846 <_puts_r+0x86>
 800183c:	69a2      	ldr	r2, [r4, #24]
 800183e:	429a      	cmp	r2, r3
 8001840:	dc06      	bgt.n	8001850 <_puts_r+0x90>
 8001842:	290a      	cmp	r1, #10
 8001844:	d004      	beq.n	8001850 <_puts_r+0x90>
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	6022      	str	r2, [r4, #0]
 800184c:	7019      	strb	r1, [r3, #0]
 800184e:	e7cf      	b.n	80017f0 <_puts_r+0x30>
 8001850:	4622      	mov	r2, r4
 8001852:	4628      	mov	r0, r5
 8001854:	f000 f856 	bl	8001904 <__swbuf_r>
 8001858:	3001      	adds	r0, #1
 800185a:	d1c9      	bne.n	80017f0 <_puts_r+0x30>
 800185c:	e7e9      	b.n	8001832 <_puts_r+0x72>
 800185e:	200a      	movs	r0, #10
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	6022      	str	r2, [r4, #0]
 8001866:	7018      	strb	r0, [r3, #0]
 8001868:	e7e5      	b.n	8001836 <_puts_r+0x76>
 800186a:	bf00      	nop
 800186c:	080021fc 	.word	0x080021fc
 8001870:	0800221c 	.word	0x0800221c
 8001874:	080021dc 	.word	0x080021dc

08001878 <puts>:
 8001878:	4b02      	ldr	r3, [pc, #8]	; (8001884 <puts+0xc>)
 800187a:	4601      	mov	r1, r0
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	f7ff bf9f 	b.w	80017c0 <_puts_r>
 8001882:	bf00      	nop
 8001884:	2000000c 	.word	0x2000000c

08001888 <__utoa>:
 8001888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188a:	b08b      	sub	sp, #44	; 0x2c
 800188c:	4605      	mov	r5, r0
 800188e:	460c      	mov	r4, r1
 8001890:	466e      	mov	r6, sp
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <__utoa+0x78>)
 8001894:	f103 0c20 	add.w	ip, r3, #32
 8001898:	4637      	mov	r7, r6
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	6859      	ldr	r1, [r3, #4]
 800189e:	3308      	adds	r3, #8
 80018a0:	c703      	stmia	r7!, {r0, r1}
 80018a2:	4563      	cmp	r3, ip
 80018a4:	463e      	mov	r6, r7
 80018a6:	d1f7      	bne.n	8001898 <__utoa+0x10>
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	791b      	ldrb	r3, [r3, #4]
 80018ac:	6038      	str	r0, [r7, #0]
 80018ae:	713b      	strb	r3, [r7, #4]
 80018b0:	1e93      	subs	r3, r2, #2
 80018b2:	2b22      	cmp	r3, #34	; 0x22
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	d904      	bls.n	80018c4 <__utoa+0x3c>
 80018ba:	7023      	strb	r3, [r4, #0]
 80018bc:	461c      	mov	r4, r3
 80018be:	4620      	mov	r0, r4
 80018c0:	b00b      	add	sp, #44	; 0x2c
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c4:	1e66      	subs	r6, r4, #1
 80018c6:	fbb5 f0f2 	udiv	r0, r5, r2
 80018ca:	fb02 5510 	mls	r5, r2, r0, r5
 80018ce:	af0a      	add	r7, sp, #40	; 0x28
 80018d0:	443d      	add	r5, r7
 80018d2:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80018d6:	1c59      	adds	r1, r3, #1
 80018d8:	f806 5f01 	strb.w	r5, [r6, #1]!
 80018dc:	4605      	mov	r5, r0
 80018de:	b968      	cbnz	r0, 80018fc <__utoa+0x74>
 80018e0:	4622      	mov	r2, r4
 80018e2:	5460      	strb	r0, [r4, r1]
 80018e4:	4423      	add	r3, r4
 80018e6:	1b19      	subs	r1, r3, r4
 80018e8:	1b10      	subs	r0, r2, r4
 80018ea:	4281      	cmp	r1, r0
 80018ec:	dde7      	ble.n	80018be <__utoa+0x36>
 80018ee:	7811      	ldrb	r1, [r2, #0]
 80018f0:	7818      	ldrb	r0, [r3, #0]
 80018f2:	f802 0b01 	strb.w	r0, [r2], #1
 80018f6:	f803 1901 	strb.w	r1, [r3], #-1
 80018fa:	e7f4      	b.n	80018e6 <__utoa+0x5e>
 80018fc:	460b      	mov	r3, r1
 80018fe:	e7e2      	b.n	80018c6 <__utoa+0x3e>
 8001900:	080021b4 	.word	0x080021b4

08001904 <__swbuf_r>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	460e      	mov	r6, r1
 8001908:	4614      	mov	r4, r2
 800190a:	4605      	mov	r5, r0
 800190c:	b118      	cbz	r0, 8001916 <__swbuf_r+0x12>
 800190e:	6983      	ldr	r3, [r0, #24]
 8001910:	b90b      	cbnz	r3, 8001916 <__swbuf_r+0x12>
 8001912:	f000 f9a7 	bl	8001c64 <__sinit>
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <__swbuf_r+0x98>)
 8001918:	429c      	cmp	r4, r3
 800191a:	d12a      	bne.n	8001972 <__swbuf_r+0x6e>
 800191c:	686c      	ldr	r4, [r5, #4]
 800191e:	69a3      	ldr	r3, [r4, #24]
 8001920:	60a3      	str	r3, [r4, #8]
 8001922:	89a3      	ldrh	r3, [r4, #12]
 8001924:	071a      	lsls	r2, r3, #28
 8001926:	d52e      	bpl.n	8001986 <__swbuf_r+0x82>
 8001928:	6923      	ldr	r3, [r4, #16]
 800192a:	b363      	cbz	r3, 8001986 <__swbuf_r+0x82>
 800192c:	6923      	ldr	r3, [r4, #16]
 800192e:	6820      	ldr	r0, [r4, #0]
 8001930:	b2f6      	uxtb	r6, r6
 8001932:	1ac0      	subs	r0, r0, r3
 8001934:	6963      	ldr	r3, [r4, #20]
 8001936:	4637      	mov	r7, r6
 8001938:	4283      	cmp	r3, r0
 800193a:	dc04      	bgt.n	8001946 <__swbuf_r+0x42>
 800193c:	4621      	mov	r1, r4
 800193e:	4628      	mov	r0, r5
 8001940:	f000 f926 	bl	8001b90 <_fflush_r>
 8001944:	bb28      	cbnz	r0, 8001992 <__swbuf_r+0x8e>
 8001946:	68a3      	ldr	r3, [r4, #8]
 8001948:	3001      	adds	r0, #1
 800194a:	3b01      	subs	r3, #1
 800194c:	60a3      	str	r3, [r4, #8]
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	6022      	str	r2, [r4, #0]
 8001954:	701e      	strb	r6, [r3, #0]
 8001956:	6963      	ldr	r3, [r4, #20]
 8001958:	4283      	cmp	r3, r0
 800195a:	d004      	beq.n	8001966 <__swbuf_r+0x62>
 800195c:	89a3      	ldrh	r3, [r4, #12]
 800195e:	07db      	lsls	r3, r3, #31
 8001960:	d519      	bpl.n	8001996 <__swbuf_r+0x92>
 8001962:	2e0a      	cmp	r6, #10
 8001964:	d117      	bne.n	8001996 <__swbuf_r+0x92>
 8001966:	4621      	mov	r1, r4
 8001968:	4628      	mov	r0, r5
 800196a:	f000 f911 	bl	8001b90 <_fflush_r>
 800196e:	b190      	cbz	r0, 8001996 <__swbuf_r+0x92>
 8001970:	e00f      	b.n	8001992 <__swbuf_r+0x8e>
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <__swbuf_r+0x9c>)
 8001974:	429c      	cmp	r4, r3
 8001976:	d101      	bne.n	800197c <__swbuf_r+0x78>
 8001978:	68ac      	ldr	r4, [r5, #8]
 800197a:	e7d0      	b.n	800191e <__swbuf_r+0x1a>
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <__swbuf_r+0xa0>)
 800197e:	429c      	cmp	r4, r3
 8001980:	bf08      	it	eq
 8001982:	68ec      	ldreq	r4, [r5, #12]
 8001984:	e7cb      	b.n	800191e <__swbuf_r+0x1a>
 8001986:	4621      	mov	r1, r4
 8001988:	4628      	mov	r0, r5
 800198a:	f000 f80d 	bl	80019a8 <__swsetup_r>
 800198e:	2800      	cmp	r0, #0
 8001990:	d0cc      	beq.n	800192c <__swbuf_r+0x28>
 8001992:	f04f 37ff 	mov.w	r7, #4294967295
 8001996:	4638      	mov	r0, r7
 8001998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800199a:	bf00      	nop
 800199c:	080021fc 	.word	0x080021fc
 80019a0:	0800221c 	.word	0x0800221c
 80019a4:	080021dc 	.word	0x080021dc

080019a8 <__swsetup_r>:
 80019a8:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <__swsetup_r+0xcc>)
 80019aa:	b570      	push	{r4, r5, r6, lr}
 80019ac:	681d      	ldr	r5, [r3, #0]
 80019ae:	4606      	mov	r6, r0
 80019b0:	460c      	mov	r4, r1
 80019b2:	b125      	cbz	r5, 80019be <__swsetup_r+0x16>
 80019b4:	69ab      	ldr	r3, [r5, #24]
 80019b6:	b913      	cbnz	r3, 80019be <__swsetup_r+0x16>
 80019b8:	4628      	mov	r0, r5
 80019ba:	f000 f953 	bl	8001c64 <__sinit>
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <__swsetup_r+0xd0>)
 80019c0:	429c      	cmp	r4, r3
 80019c2:	d10f      	bne.n	80019e4 <__swsetup_r+0x3c>
 80019c4:	686c      	ldr	r4, [r5, #4]
 80019c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	0715      	lsls	r5, r2, #28
 80019ce:	d42c      	bmi.n	8001a2a <__swsetup_r+0x82>
 80019d0:	06d0      	lsls	r0, r2, #27
 80019d2:	d411      	bmi.n	80019f8 <__swsetup_r+0x50>
 80019d4:	2209      	movs	r2, #9
 80019d6:	6032      	str	r2, [r6, #0]
 80019d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019dc:	81a3      	strh	r3, [r4, #12]
 80019de:	f04f 30ff 	mov.w	r0, #4294967295
 80019e2:	e03e      	b.n	8001a62 <__swsetup_r+0xba>
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <__swsetup_r+0xd4>)
 80019e6:	429c      	cmp	r4, r3
 80019e8:	d101      	bne.n	80019ee <__swsetup_r+0x46>
 80019ea:	68ac      	ldr	r4, [r5, #8]
 80019ec:	e7eb      	b.n	80019c6 <__swsetup_r+0x1e>
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <__swsetup_r+0xd8>)
 80019f0:	429c      	cmp	r4, r3
 80019f2:	bf08      	it	eq
 80019f4:	68ec      	ldreq	r4, [r5, #12]
 80019f6:	e7e6      	b.n	80019c6 <__swsetup_r+0x1e>
 80019f8:	0751      	lsls	r1, r2, #29
 80019fa:	d512      	bpl.n	8001a22 <__swsetup_r+0x7a>
 80019fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019fe:	b141      	cbz	r1, 8001a12 <__swsetup_r+0x6a>
 8001a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a04:	4299      	cmp	r1, r3
 8001a06:	d002      	beq.n	8001a0e <__swsetup_r+0x66>
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f000 fa19 	bl	8001e40 <_free_r>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	6363      	str	r3, [r4, #52]	; 0x34
 8001a12:	89a3      	ldrh	r3, [r4, #12]
 8001a14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001a18:	81a3      	strh	r3, [r4, #12]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	6063      	str	r3, [r4, #4]
 8001a1e:	6923      	ldr	r3, [r4, #16]
 8001a20:	6023      	str	r3, [r4, #0]
 8001a22:	89a3      	ldrh	r3, [r4, #12]
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	81a3      	strh	r3, [r4, #12]
 8001a2a:	6923      	ldr	r3, [r4, #16]
 8001a2c:	b94b      	cbnz	r3, 8001a42 <__swsetup_r+0x9a>
 8001a2e:	89a3      	ldrh	r3, [r4, #12]
 8001a30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a38:	d003      	beq.n	8001a42 <__swsetup_r+0x9a>
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	f000 f9bf 	bl	8001dc0 <__smakebuf_r>
 8001a42:	89a2      	ldrh	r2, [r4, #12]
 8001a44:	f012 0301 	ands.w	r3, r2, #1
 8001a48:	d00c      	beq.n	8001a64 <__swsetup_r+0xbc>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60a3      	str	r3, [r4, #8]
 8001a4e:	6963      	ldr	r3, [r4, #20]
 8001a50:	425b      	negs	r3, r3
 8001a52:	61a3      	str	r3, [r4, #24]
 8001a54:	6923      	ldr	r3, [r4, #16]
 8001a56:	b953      	cbnz	r3, 8001a6e <__swsetup_r+0xc6>
 8001a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001a60:	d1ba      	bne.n	80019d8 <__swsetup_r+0x30>
 8001a62:	bd70      	pop	{r4, r5, r6, pc}
 8001a64:	0792      	lsls	r2, r2, #30
 8001a66:	bf58      	it	pl
 8001a68:	6963      	ldrpl	r3, [r4, #20]
 8001a6a:	60a3      	str	r3, [r4, #8]
 8001a6c:	e7f2      	b.n	8001a54 <__swsetup_r+0xac>
 8001a6e:	2000      	movs	r0, #0
 8001a70:	e7f7      	b.n	8001a62 <__swsetup_r+0xba>
 8001a72:	bf00      	nop
 8001a74:	2000000c 	.word	0x2000000c
 8001a78:	080021fc 	.word	0x080021fc
 8001a7c:	0800221c 	.word	0x0800221c
 8001a80:	080021dc 	.word	0x080021dc

08001a84 <__sflush_r>:
 8001a84:	898a      	ldrh	r2, [r1, #12]
 8001a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a8a:	4605      	mov	r5, r0
 8001a8c:	0710      	lsls	r0, r2, #28
 8001a8e:	460c      	mov	r4, r1
 8001a90:	d458      	bmi.n	8001b44 <__sflush_r+0xc0>
 8001a92:	684b      	ldr	r3, [r1, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	dc05      	bgt.n	8001aa4 <__sflush_r+0x20>
 8001a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	dc02      	bgt.n	8001aa4 <__sflush_r+0x20>
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001aa6:	2e00      	cmp	r6, #0
 8001aa8:	d0f9      	beq.n	8001a9e <__sflush_r+0x1a>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ab0:	682f      	ldr	r7, [r5, #0]
 8001ab2:	6a21      	ldr	r1, [r4, #32]
 8001ab4:	602b      	str	r3, [r5, #0]
 8001ab6:	d032      	beq.n	8001b1e <__sflush_r+0x9a>
 8001ab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001aba:	89a3      	ldrh	r3, [r4, #12]
 8001abc:	075a      	lsls	r2, r3, #29
 8001abe:	d505      	bpl.n	8001acc <__sflush_r+0x48>
 8001ac0:	6863      	ldr	r3, [r4, #4]
 8001ac2:	1ac0      	subs	r0, r0, r3
 8001ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ac6:	b10b      	cbz	r3, 8001acc <__sflush_r+0x48>
 8001ac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aca:	1ac0      	subs	r0, r0, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	4602      	mov	r2, r0
 8001ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ad2:	6a21      	ldr	r1, [r4, #32]
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	47b0      	blx	r6
 8001ad8:	1c43      	adds	r3, r0, #1
 8001ada:	89a3      	ldrh	r3, [r4, #12]
 8001adc:	d106      	bne.n	8001aec <__sflush_r+0x68>
 8001ade:	6829      	ldr	r1, [r5, #0]
 8001ae0:	291d      	cmp	r1, #29
 8001ae2:	d848      	bhi.n	8001b76 <__sflush_r+0xf2>
 8001ae4:	4a29      	ldr	r2, [pc, #164]	; (8001b8c <__sflush_r+0x108>)
 8001ae6:	40ca      	lsrs	r2, r1
 8001ae8:	07d6      	lsls	r6, r2, #31
 8001aea:	d544      	bpl.n	8001b76 <__sflush_r+0xf2>
 8001aec:	2200      	movs	r2, #0
 8001aee:	6062      	str	r2, [r4, #4]
 8001af0:	6922      	ldr	r2, [r4, #16]
 8001af2:	04d9      	lsls	r1, r3, #19
 8001af4:	6022      	str	r2, [r4, #0]
 8001af6:	d504      	bpl.n	8001b02 <__sflush_r+0x7e>
 8001af8:	1c42      	adds	r2, r0, #1
 8001afa:	d101      	bne.n	8001b00 <__sflush_r+0x7c>
 8001afc:	682b      	ldr	r3, [r5, #0]
 8001afe:	b903      	cbnz	r3, 8001b02 <__sflush_r+0x7e>
 8001b00:	6560      	str	r0, [r4, #84]	; 0x54
 8001b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b04:	602f      	str	r7, [r5, #0]
 8001b06:	2900      	cmp	r1, #0
 8001b08:	d0c9      	beq.n	8001a9e <__sflush_r+0x1a>
 8001b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b0e:	4299      	cmp	r1, r3
 8001b10:	d002      	beq.n	8001b18 <__sflush_r+0x94>
 8001b12:	4628      	mov	r0, r5
 8001b14:	f000 f994 	bl	8001e40 <_free_r>
 8001b18:	2000      	movs	r0, #0
 8001b1a:	6360      	str	r0, [r4, #52]	; 0x34
 8001b1c:	e7c0      	b.n	8001aa0 <__sflush_r+0x1c>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4628      	mov	r0, r5
 8001b22:	47b0      	blx	r6
 8001b24:	1c41      	adds	r1, r0, #1
 8001b26:	d1c8      	bne.n	8001aba <__sflush_r+0x36>
 8001b28:	682b      	ldr	r3, [r5, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0c5      	beq.n	8001aba <__sflush_r+0x36>
 8001b2e:	2b1d      	cmp	r3, #29
 8001b30:	d001      	beq.n	8001b36 <__sflush_r+0xb2>
 8001b32:	2b16      	cmp	r3, #22
 8001b34:	d101      	bne.n	8001b3a <__sflush_r+0xb6>
 8001b36:	602f      	str	r7, [r5, #0]
 8001b38:	e7b1      	b.n	8001a9e <__sflush_r+0x1a>
 8001b3a:	89a3      	ldrh	r3, [r4, #12]
 8001b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b40:	81a3      	strh	r3, [r4, #12]
 8001b42:	e7ad      	b.n	8001aa0 <__sflush_r+0x1c>
 8001b44:	690f      	ldr	r7, [r1, #16]
 8001b46:	2f00      	cmp	r7, #0
 8001b48:	d0a9      	beq.n	8001a9e <__sflush_r+0x1a>
 8001b4a:	0793      	lsls	r3, r2, #30
 8001b4c:	bf18      	it	ne
 8001b4e:	2300      	movne	r3, #0
 8001b50:	680e      	ldr	r6, [r1, #0]
 8001b52:	bf08      	it	eq
 8001b54:	694b      	ldreq	r3, [r1, #20]
 8001b56:	eba6 0807 	sub.w	r8, r6, r7
 8001b5a:	600f      	str	r7, [r1, #0]
 8001b5c:	608b      	str	r3, [r1, #8]
 8001b5e:	f1b8 0f00 	cmp.w	r8, #0
 8001b62:	dd9c      	ble.n	8001a9e <__sflush_r+0x1a>
 8001b64:	4643      	mov	r3, r8
 8001b66:	463a      	mov	r2, r7
 8001b68:	6a21      	ldr	r1, [r4, #32]
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b6e:	47b0      	blx	r6
 8001b70:	2800      	cmp	r0, #0
 8001b72:	dc06      	bgt.n	8001b82 <__sflush_r+0xfe>
 8001b74:	89a3      	ldrh	r3, [r4, #12]
 8001b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b7a:	81a3      	strh	r3, [r4, #12]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	e78e      	b.n	8001aa0 <__sflush_r+0x1c>
 8001b82:	4407      	add	r7, r0
 8001b84:	eba8 0800 	sub.w	r8, r8, r0
 8001b88:	e7e9      	b.n	8001b5e <__sflush_r+0xda>
 8001b8a:	bf00      	nop
 8001b8c:	20400001 	.word	0x20400001

08001b90 <_fflush_r>:
 8001b90:	b538      	push	{r3, r4, r5, lr}
 8001b92:	690b      	ldr	r3, [r1, #16]
 8001b94:	4605      	mov	r5, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	b1db      	cbz	r3, 8001bd2 <_fflush_r+0x42>
 8001b9a:	b118      	cbz	r0, 8001ba4 <_fflush_r+0x14>
 8001b9c:	6983      	ldr	r3, [r0, #24]
 8001b9e:	b90b      	cbnz	r3, 8001ba4 <_fflush_r+0x14>
 8001ba0:	f000 f860 	bl	8001c64 <__sinit>
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <_fflush_r+0x48>)
 8001ba6:	429c      	cmp	r4, r3
 8001ba8:	d109      	bne.n	8001bbe <_fflush_r+0x2e>
 8001baa:	686c      	ldr	r4, [r5, #4]
 8001bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bb0:	b17b      	cbz	r3, 8001bd2 <_fflush_r+0x42>
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bba:	f7ff bf63 	b.w	8001a84 <__sflush_r>
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_fflush_r+0x4c>)
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	d101      	bne.n	8001bc8 <_fflush_r+0x38>
 8001bc4:	68ac      	ldr	r4, [r5, #8]
 8001bc6:	e7f1      	b.n	8001bac <_fflush_r+0x1c>
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <_fflush_r+0x50>)
 8001bca:	429c      	cmp	r4, r3
 8001bcc:	bf08      	it	eq
 8001bce:	68ec      	ldreq	r4, [r5, #12]
 8001bd0:	e7ec      	b.n	8001bac <_fflush_r+0x1c>
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	bd38      	pop	{r3, r4, r5, pc}
 8001bd6:	bf00      	nop
 8001bd8:	080021fc 	.word	0x080021fc
 8001bdc:	0800221c 	.word	0x0800221c
 8001be0:	080021dc 	.word	0x080021dc

08001be4 <std>:
 8001be4:	2300      	movs	r3, #0
 8001be6:	b510      	push	{r4, lr}
 8001be8:	4604      	mov	r4, r0
 8001bea:	e9c0 3300 	strd	r3, r3, [r0]
 8001bee:	6083      	str	r3, [r0, #8]
 8001bf0:	8181      	strh	r1, [r0, #12]
 8001bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8001bf4:	81c2      	strh	r2, [r0, #14]
 8001bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bfa:	6183      	str	r3, [r0, #24]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	2208      	movs	r2, #8
 8001c00:	305c      	adds	r0, #92	; 0x5c
 8001c02:	f7ff fdd5 	bl	80017b0 <memset>
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <std+0x38>)
 8001c08:	6224      	str	r4, [r4, #32]
 8001c0a:	6263      	str	r3, [r4, #36]	; 0x24
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <std+0x3c>)
 8001c0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <std+0x40>)
 8001c12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <std+0x44>)
 8001c16:	6323      	str	r3, [r4, #48]	; 0x30
 8001c18:	bd10      	pop	{r4, pc}
 8001c1a:	bf00      	nop
 8001c1c:	08001fad 	.word	0x08001fad
 8001c20:	08001fcf 	.word	0x08001fcf
 8001c24:	08002007 	.word	0x08002007
 8001c28:	0800202b 	.word	0x0800202b

08001c2c <_cleanup_r>:
 8001c2c:	4901      	ldr	r1, [pc, #4]	; (8001c34 <_cleanup_r+0x8>)
 8001c2e:	f000 b885 	b.w	8001d3c <_fwalk_reent>
 8001c32:	bf00      	nop
 8001c34:	08001b91 	.word	0x08001b91

08001c38 <__sfmoreglue>:
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	2568      	movs	r5, #104	; 0x68
 8001c3c:	1e4a      	subs	r2, r1, #1
 8001c3e:	4355      	muls	r5, r2
 8001c40:	460e      	mov	r6, r1
 8001c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c46:	f000 f947 	bl	8001ed8 <_malloc_r>
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	b140      	cbz	r0, 8001c60 <__sfmoreglue+0x28>
 8001c4e:	2100      	movs	r1, #0
 8001c50:	e9c0 1600 	strd	r1, r6, [r0]
 8001c54:	300c      	adds	r0, #12
 8001c56:	60a0      	str	r0, [r4, #8]
 8001c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c5c:	f7ff fda8 	bl	80017b0 <memset>
 8001c60:	4620      	mov	r0, r4
 8001c62:	bd70      	pop	{r4, r5, r6, pc}

08001c64 <__sinit>:
 8001c64:	6983      	ldr	r3, [r0, #24]
 8001c66:	b510      	push	{r4, lr}
 8001c68:	4604      	mov	r4, r0
 8001c6a:	bb33      	cbnz	r3, 8001cba <__sinit+0x56>
 8001c6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001c70:	6503      	str	r3, [r0, #80]	; 0x50
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <__sinit+0x58>)
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <__sinit+0x5c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6282      	str	r2, [r0, #40]	; 0x28
 8001c7a:	4298      	cmp	r0, r3
 8001c7c:	bf04      	itt	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	6183      	streq	r3, [r0, #24]
 8001c82:	f000 f81f 	bl	8001cc4 <__sfp>
 8001c86:	6060      	str	r0, [r4, #4]
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f000 f81b 	bl	8001cc4 <__sfp>
 8001c8e:	60a0      	str	r0, [r4, #8]
 8001c90:	4620      	mov	r0, r4
 8001c92:	f000 f817 	bl	8001cc4 <__sfp>
 8001c96:	2200      	movs	r2, #0
 8001c98:	60e0      	str	r0, [r4, #12]
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	6860      	ldr	r0, [r4, #4]
 8001c9e:	f7ff ffa1 	bl	8001be4 <std>
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2109      	movs	r1, #9
 8001ca6:	68a0      	ldr	r0, [r4, #8]
 8001ca8:	f7ff ff9c 	bl	8001be4 <std>
 8001cac:	2202      	movs	r2, #2
 8001cae:	2112      	movs	r1, #18
 8001cb0:	68e0      	ldr	r0, [r4, #12]
 8001cb2:	f7ff ff97 	bl	8001be4 <std>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61a3      	str	r3, [r4, #24]
 8001cba:	bd10      	pop	{r4, pc}
 8001cbc:	080021b0 	.word	0x080021b0
 8001cc0:	08001c2d 	.word	0x08001c2d

08001cc4 <__sfp>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <__sfp+0x70>)
 8001cc8:	4607      	mov	r7, r0
 8001cca:	681e      	ldr	r6, [r3, #0]
 8001ccc:	69b3      	ldr	r3, [r6, #24]
 8001cce:	b913      	cbnz	r3, 8001cd6 <__sfp+0x12>
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	f7ff ffc7 	bl	8001c64 <__sinit>
 8001cd6:	3648      	adds	r6, #72	; 0x48
 8001cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	d503      	bpl.n	8001ce8 <__sfp+0x24>
 8001ce0:	6833      	ldr	r3, [r6, #0]
 8001ce2:	b133      	cbz	r3, 8001cf2 <__sfp+0x2e>
 8001ce4:	6836      	ldr	r6, [r6, #0]
 8001ce6:	e7f7      	b.n	8001cd8 <__sfp+0x14>
 8001ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001cec:	b16d      	cbz	r5, 8001d0a <__sfp+0x46>
 8001cee:	3468      	adds	r4, #104	; 0x68
 8001cf0:	e7f4      	b.n	8001cdc <__sfp+0x18>
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	4638      	mov	r0, r7
 8001cf6:	f7ff ff9f 	bl	8001c38 <__sfmoreglue>
 8001cfa:	6030      	str	r0, [r6, #0]
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	d1f1      	bne.n	8001ce4 <__sfp+0x20>
 8001d00:	230c      	movs	r3, #12
 8001d02:	4604      	mov	r4, r0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4620      	mov	r0, r4
 8001d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <__sfp+0x74>)
 8001d0c:	6665      	str	r5, [r4, #100]	; 0x64
 8001d0e:	e9c4 5500 	strd	r5, r5, [r4]
 8001d12:	60a5      	str	r5, [r4, #8]
 8001d14:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001d18:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	4629      	mov	r1, r5
 8001d20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d24:	f7ff fd44 	bl	80017b0 <memset>
 8001d28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d30:	e7e9      	b.n	8001d06 <__sfp+0x42>
 8001d32:	bf00      	nop
 8001d34:	080021b0 	.word	0x080021b0
 8001d38:	ffff0001 	.word	0xffff0001

08001d3c <_fwalk_reent>:
 8001d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d40:	4680      	mov	r8, r0
 8001d42:	4689      	mov	r9, r1
 8001d44:	2600      	movs	r6, #0
 8001d46:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d4a:	b914      	cbnz	r4, 8001d52 <_fwalk_reent+0x16>
 8001d4c:	4630      	mov	r0, r6
 8001d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d52:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001d56:	3f01      	subs	r7, #1
 8001d58:	d501      	bpl.n	8001d5e <_fwalk_reent+0x22>
 8001d5a:	6824      	ldr	r4, [r4, #0]
 8001d5c:	e7f5      	b.n	8001d4a <_fwalk_reent+0xe>
 8001d5e:	89ab      	ldrh	r3, [r5, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d907      	bls.n	8001d74 <_fwalk_reent+0x38>
 8001d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	d003      	beq.n	8001d74 <_fwalk_reent+0x38>
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4640      	mov	r0, r8
 8001d70:	47c8      	blx	r9
 8001d72:	4306      	orrs	r6, r0
 8001d74:	3568      	adds	r5, #104	; 0x68
 8001d76:	e7ee      	b.n	8001d56 <_fwalk_reent+0x1a>

08001d78 <__swhatbuf_r>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	460e      	mov	r6, r1
 8001d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d80:	b096      	sub	sp, #88	; 0x58
 8001d82:	2900      	cmp	r1, #0
 8001d84:	4614      	mov	r4, r2
 8001d86:	461d      	mov	r5, r3
 8001d88:	da07      	bge.n	8001d9a <__swhatbuf_r+0x22>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	602b      	str	r3, [r5, #0]
 8001d8e:	89b3      	ldrh	r3, [r6, #12]
 8001d90:	061a      	lsls	r2, r3, #24
 8001d92:	d410      	bmi.n	8001db6 <__swhatbuf_r+0x3e>
 8001d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d98:	e00e      	b.n	8001db8 <__swhatbuf_r+0x40>
 8001d9a:	466a      	mov	r2, sp
 8001d9c:	f000 f96c 	bl	8002078 <_fstat_r>
 8001da0:	2800      	cmp	r0, #0
 8001da2:	dbf2      	blt.n	8001d8a <__swhatbuf_r+0x12>
 8001da4:	9a01      	ldr	r2, [sp, #4]
 8001da6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001daa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001dae:	425a      	negs	r2, r3
 8001db0:	415a      	adcs	r2, r3
 8001db2:	602a      	str	r2, [r5, #0]
 8001db4:	e7ee      	b.n	8001d94 <__swhatbuf_r+0x1c>
 8001db6:	2340      	movs	r3, #64	; 0x40
 8001db8:	2000      	movs	r0, #0
 8001dba:	6023      	str	r3, [r4, #0]
 8001dbc:	b016      	add	sp, #88	; 0x58
 8001dbe:	bd70      	pop	{r4, r5, r6, pc}

08001dc0 <__smakebuf_r>:
 8001dc0:	898b      	ldrh	r3, [r1, #12]
 8001dc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dc4:	079d      	lsls	r5, r3, #30
 8001dc6:	4606      	mov	r6, r0
 8001dc8:	460c      	mov	r4, r1
 8001dca:	d507      	bpl.n	8001ddc <__smakebuf_r+0x1c>
 8001dcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	6123      	str	r3, [r4, #16]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	6163      	str	r3, [r4, #20]
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
 8001ddc:	ab01      	add	r3, sp, #4
 8001dde:	466a      	mov	r2, sp
 8001de0:	f7ff ffca 	bl	8001d78 <__swhatbuf_r>
 8001de4:	9900      	ldr	r1, [sp, #0]
 8001de6:	4605      	mov	r5, r0
 8001de8:	4630      	mov	r0, r6
 8001dea:	f000 f875 	bl	8001ed8 <_malloc_r>
 8001dee:	b948      	cbnz	r0, 8001e04 <__smakebuf_r+0x44>
 8001df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001df4:	059a      	lsls	r2, r3, #22
 8001df6:	d4ef      	bmi.n	8001dd8 <__smakebuf_r+0x18>
 8001df8:	f023 0303 	bic.w	r3, r3, #3
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	81a3      	strh	r3, [r4, #12]
 8001e02:	e7e3      	b.n	8001dcc <__smakebuf_r+0xc>
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <__smakebuf_r+0x7c>)
 8001e06:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e08:	89a3      	ldrh	r3, [r4, #12]
 8001e0a:	6020      	str	r0, [r4, #0]
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e10:	81a3      	strh	r3, [r4, #12]
 8001e12:	9b00      	ldr	r3, [sp, #0]
 8001e14:	6120      	str	r0, [r4, #16]
 8001e16:	6163      	str	r3, [r4, #20]
 8001e18:	9b01      	ldr	r3, [sp, #4]
 8001e1a:	b15b      	cbz	r3, 8001e34 <__smakebuf_r+0x74>
 8001e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e20:	4630      	mov	r0, r6
 8001e22:	f000 f93b 	bl	800209c <_isatty_r>
 8001e26:	b128      	cbz	r0, 8001e34 <__smakebuf_r+0x74>
 8001e28:	89a3      	ldrh	r3, [r4, #12]
 8001e2a:	f023 0303 	bic.w	r3, r3, #3
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	81a3      	strh	r3, [r4, #12]
 8001e34:	89a3      	ldrh	r3, [r4, #12]
 8001e36:	431d      	orrs	r5, r3
 8001e38:	81a5      	strh	r5, [r4, #12]
 8001e3a:	e7cd      	b.n	8001dd8 <__smakebuf_r+0x18>
 8001e3c:	08001c2d 	.word	0x08001c2d

08001e40 <_free_r>:
 8001e40:	b538      	push	{r3, r4, r5, lr}
 8001e42:	4605      	mov	r5, r0
 8001e44:	2900      	cmp	r1, #0
 8001e46:	d043      	beq.n	8001ed0 <_free_r+0x90>
 8001e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e4c:	1f0c      	subs	r4, r1, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bfb8      	it	lt
 8001e52:	18e4      	addlt	r4, r4, r3
 8001e54:	f000 f944 	bl	80020e0 <__malloc_lock>
 8001e58:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <_free_r+0x94>)
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	b933      	cbnz	r3, 8001e6e <_free_r+0x2e>
 8001e60:	6063      	str	r3, [r4, #4]
 8001e62:	6014      	str	r4, [r2, #0]
 8001e64:	4628      	mov	r0, r5
 8001e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e6a:	f000 b93a 	b.w	80020e2 <__malloc_unlock>
 8001e6e:	42a3      	cmp	r3, r4
 8001e70:	d90b      	bls.n	8001e8a <_free_r+0x4a>
 8001e72:	6821      	ldr	r1, [r4, #0]
 8001e74:	1862      	adds	r2, r4, r1
 8001e76:	4293      	cmp	r3, r2
 8001e78:	bf01      	itttt	eq
 8001e7a:	681a      	ldreq	r2, [r3, #0]
 8001e7c:	685b      	ldreq	r3, [r3, #4]
 8001e7e:	1852      	addeq	r2, r2, r1
 8001e80:	6022      	streq	r2, [r4, #0]
 8001e82:	6063      	str	r3, [r4, #4]
 8001e84:	6004      	str	r4, [r0, #0]
 8001e86:	e7ed      	b.n	8001e64 <_free_r+0x24>
 8001e88:	4613      	mov	r3, r2
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	b10a      	cbz	r2, 8001e92 <_free_r+0x52>
 8001e8e:	42a2      	cmp	r2, r4
 8001e90:	d9fa      	bls.n	8001e88 <_free_r+0x48>
 8001e92:	6819      	ldr	r1, [r3, #0]
 8001e94:	1858      	adds	r0, r3, r1
 8001e96:	42a0      	cmp	r0, r4
 8001e98:	d10b      	bne.n	8001eb2 <_free_r+0x72>
 8001e9a:	6820      	ldr	r0, [r4, #0]
 8001e9c:	4401      	add	r1, r0
 8001e9e:	1858      	adds	r0, r3, r1
 8001ea0:	4282      	cmp	r2, r0
 8001ea2:	6019      	str	r1, [r3, #0]
 8001ea4:	d1de      	bne.n	8001e64 <_free_r+0x24>
 8001ea6:	6810      	ldr	r0, [r2, #0]
 8001ea8:	6852      	ldr	r2, [r2, #4]
 8001eaa:	4401      	add	r1, r0
 8001eac:	6019      	str	r1, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	e7d8      	b.n	8001e64 <_free_r+0x24>
 8001eb2:	d902      	bls.n	8001eba <_free_r+0x7a>
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	602b      	str	r3, [r5, #0]
 8001eb8:	e7d4      	b.n	8001e64 <_free_r+0x24>
 8001eba:	6820      	ldr	r0, [r4, #0]
 8001ebc:	1821      	adds	r1, r4, r0
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	bf01      	itttt	eq
 8001ec2:	6811      	ldreq	r1, [r2, #0]
 8001ec4:	6852      	ldreq	r2, [r2, #4]
 8001ec6:	1809      	addeq	r1, r1, r0
 8001ec8:	6021      	streq	r1, [r4, #0]
 8001eca:	6062      	str	r2, [r4, #4]
 8001ecc:	605c      	str	r4, [r3, #4]
 8001ece:	e7c9      	b.n	8001e64 <_free_r+0x24>
 8001ed0:	bd38      	pop	{r3, r4, r5, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000090 	.word	0x20000090

08001ed8 <_malloc_r>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	1ccd      	adds	r5, r1, #3
 8001edc:	f025 0503 	bic.w	r5, r5, #3
 8001ee0:	3508      	adds	r5, #8
 8001ee2:	2d0c      	cmp	r5, #12
 8001ee4:	bf38      	it	cc
 8001ee6:	250c      	movcc	r5, #12
 8001ee8:	2d00      	cmp	r5, #0
 8001eea:	4606      	mov	r6, r0
 8001eec:	db01      	blt.n	8001ef2 <_malloc_r+0x1a>
 8001eee:	42a9      	cmp	r1, r5
 8001ef0:	d903      	bls.n	8001efa <_malloc_r+0x22>
 8001ef2:	230c      	movs	r3, #12
 8001ef4:	6033      	str	r3, [r6, #0]
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	bd70      	pop	{r4, r5, r6, pc}
 8001efa:	f000 f8f1 	bl	80020e0 <__malloc_lock>
 8001efe:	4a21      	ldr	r2, [pc, #132]	; (8001f84 <_malloc_r+0xac>)
 8001f00:	6814      	ldr	r4, [r2, #0]
 8001f02:	4621      	mov	r1, r4
 8001f04:	b991      	cbnz	r1, 8001f2c <_malloc_r+0x54>
 8001f06:	4c20      	ldr	r4, [pc, #128]	; (8001f88 <_malloc_r+0xb0>)
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	b91b      	cbnz	r3, 8001f14 <_malloc_r+0x3c>
 8001f0c:	4630      	mov	r0, r6
 8001f0e:	f000 f83d 	bl	8001f8c <_sbrk_r>
 8001f12:	6020      	str	r0, [r4, #0]
 8001f14:	4629      	mov	r1, r5
 8001f16:	4630      	mov	r0, r6
 8001f18:	f000 f838 	bl	8001f8c <_sbrk_r>
 8001f1c:	1c43      	adds	r3, r0, #1
 8001f1e:	d124      	bne.n	8001f6a <_malloc_r+0x92>
 8001f20:	230c      	movs	r3, #12
 8001f22:	4630      	mov	r0, r6
 8001f24:	6033      	str	r3, [r6, #0]
 8001f26:	f000 f8dc 	bl	80020e2 <__malloc_unlock>
 8001f2a:	e7e4      	b.n	8001ef6 <_malloc_r+0x1e>
 8001f2c:	680b      	ldr	r3, [r1, #0]
 8001f2e:	1b5b      	subs	r3, r3, r5
 8001f30:	d418      	bmi.n	8001f64 <_malloc_r+0x8c>
 8001f32:	2b0b      	cmp	r3, #11
 8001f34:	d90f      	bls.n	8001f56 <_malloc_r+0x7e>
 8001f36:	600b      	str	r3, [r1, #0]
 8001f38:	18cc      	adds	r4, r1, r3
 8001f3a:	50cd      	str	r5, [r1, r3]
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	f000 f8d0 	bl	80020e2 <__malloc_unlock>
 8001f42:	f104 000b 	add.w	r0, r4, #11
 8001f46:	1d23      	adds	r3, r4, #4
 8001f48:	f020 0007 	bic.w	r0, r0, #7
 8001f4c:	1ac3      	subs	r3, r0, r3
 8001f4e:	d0d3      	beq.n	8001ef8 <_malloc_r+0x20>
 8001f50:	425a      	negs	r2, r3
 8001f52:	50e2      	str	r2, [r4, r3]
 8001f54:	e7d0      	b.n	8001ef8 <_malloc_r+0x20>
 8001f56:	684b      	ldr	r3, [r1, #4]
 8001f58:	428c      	cmp	r4, r1
 8001f5a:	bf16      	itet	ne
 8001f5c:	6063      	strne	r3, [r4, #4]
 8001f5e:	6013      	streq	r3, [r2, #0]
 8001f60:	460c      	movne	r4, r1
 8001f62:	e7eb      	b.n	8001f3c <_malloc_r+0x64>
 8001f64:	460c      	mov	r4, r1
 8001f66:	6849      	ldr	r1, [r1, #4]
 8001f68:	e7cc      	b.n	8001f04 <_malloc_r+0x2c>
 8001f6a:	1cc4      	adds	r4, r0, #3
 8001f6c:	f024 0403 	bic.w	r4, r4, #3
 8001f70:	42a0      	cmp	r0, r4
 8001f72:	d005      	beq.n	8001f80 <_malloc_r+0xa8>
 8001f74:	1a21      	subs	r1, r4, r0
 8001f76:	4630      	mov	r0, r6
 8001f78:	f000 f808 	bl	8001f8c <_sbrk_r>
 8001f7c:	3001      	adds	r0, #1
 8001f7e:	d0cf      	beq.n	8001f20 <_malloc_r+0x48>
 8001f80:	6025      	str	r5, [r4, #0]
 8001f82:	e7db      	b.n	8001f3c <_malloc_r+0x64>
 8001f84:	20000090 	.word	0x20000090
 8001f88:	20000094 	.word	0x20000094

08001f8c <_sbrk_r>:
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	2300      	movs	r3, #0
 8001f90:	4c05      	ldr	r4, [pc, #20]	; (8001fa8 <_sbrk_r+0x1c>)
 8001f92:	4605      	mov	r5, r0
 8001f94:	4608      	mov	r0, r1
 8001f96:	6023      	str	r3, [r4, #0]
 8001f98:	f7fe fc90 	bl	80008bc <_sbrk>
 8001f9c:	1c43      	adds	r3, r0, #1
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk_r+0x1a>
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	b103      	cbz	r3, 8001fa6 <_sbrk_r+0x1a>
 8001fa4:	602b      	str	r3, [r5, #0]
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	2000009c 	.word	0x2000009c

08001fac <__sread>:
 8001fac:	b510      	push	{r4, lr}
 8001fae:	460c      	mov	r4, r1
 8001fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fb4:	f000 f896 	bl	80020e4 <_read_r>
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	bfab      	itete	ge
 8001fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8001fc0:	181b      	addge	r3, r3, r0
 8001fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001fc6:	bfac      	ite	ge
 8001fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001fca:	81a3      	strhlt	r3, [r4, #12]
 8001fcc:	bd10      	pop	{r4, pc}

08001fce <__swrite>:
 8001fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd2:	461f      	mov	r7, r3
 8001fd4:	898b      	ldrh	r3, [r1, #12]
 8001fd6:	4605      	mov	r5, r0
 8001fd8:	05db      	lsls	r3, r3, #23
 8001fda:	460c      	mov	r4, r1
 8001fdc:	4616      	mov	r6, r2
 8001fde:	d505      	bpl.n	8001fec <__swrite+0x1e>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe8:	f000 f868 	bl	80020bc <_lseek_r>
 8001fec:	89a3      	ldrh	r3, [r4, #12]
 8001fee:	4632      	mov	r2, r6
 8001ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ff4:	81a3      	strh	r3, [r4, #12]
 8001ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002002:	f000 b817 	b.w	8002034 <_write_r>

08002006 <__sseek>:
 8002006:	b510      	push	{r4, lr}
 8002008:	460c      	mov	r4, r1
 800200a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800200e:	f000 f855 	bl	80020bc <_lseek_r>
 8002012:	1c43      	adds	r3, r0, #1
 8002014:	89a3      	ldrh	r3, [r4, #12]
 8002016:	bf15      	itete	ne
 8002018:	6560      	strne	r0, [r4, #84]	; 0x54
 800201a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800201e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002022:	81a3      	strheq	r3, [r4, #12]
 8002024:	bf18      	it	ne
 8002026:	81a3      	strhne	r3, [r4, #12]
 8002028:	bd10      	pop	{r4, pc}

0800202a <__sclose>:
 800202a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800202e:	f000 b813 	b.w	8002058 <_close_r>
	...

08002034 <_write_r>:
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	4605      	mov	r5, r0
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	2200      	movs	r2, #0
 800203e:	4c05      	ldr	r4, [pc, #20]	; (8002054 <_write_r+0x20>)
 8002040:	6022      	str	r2, [r4, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	f7fe fbee 	bl	8000824 <_write>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d102      	bne.n	8002052 <_write_r+0x1e>
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	b103      	cbz	r3, 8002052 <_write_r+0x1e>
 8002050:	602b      	str	r3, [r5, #0]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	2000009c 	.word	0x2000009c

08002058 <_close_r>:
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	2300      	movs	r3, #0
 800205c:	4c05      	ldr	r4, [pc, #20]	; (8002074 <_close_r+0x1c>)
 800205e:	4605      	mov	r5, r0
 8002060:	4608      	mov	r0, r1
 8002062:	6023      	str	r3, [r4, #0]
 8002064:	f7fe fbfa 	bl	800085c <_close>
 8002068:	1c43      	adds	r3, r0, #1
 800206a:	d102      	bne.n	8002072 <_close_r+0x1a>
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	b103      	cbz	r3, 8002072 <_close_r+0x1a>
 8002070:	602b      	str	r3, [r5, #0]
 8002072:	bd38      	pop	{r3, r4, r5, pc}
 8002074:	2000009c 	.word	0x2000009c

08002078 <_fstat_r>:
 8002078:	b538      	push	{r3, r4, r5, lr}
 800207a:	2300      	movs	r3, #0
 800207c:	4c06      	ldr	r4, [pc, #24]	; (8002098 <_fstat_r+0x20>)
 800207e:	4605      	mov	r5, r0
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	6023      	str	r3, [r4, #0]
 8002086:	f7fe fbf4 	bl	8000872 <_fstat>
 800208a:	1c43      	adds	r3, r0, #1
 800208c:	d102      	bne.n	8002094 <_fstat_r+0x1c>
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	b103      	cbz	r3, 8002094 <_fstat_r+0x1c>
 8002092:	602b      	str	r3, [r5, #0]
 8002094:	bd38      	pop	{r3, r4, r5, pc}
 8002096:	bf00      	nop
 8002098:	2000009c 	.word	0x2000009c

0800209c <_isatty_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	2300      	movs	r3, #0
 80020a0:	4c05      	ldr	r4, [pc, #20]	; (80020b8 <_isatty_r+0x1c>)
 80020a2:	4605      	mov	r5, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	6023      	str	r3, [r4, #0]
 80020a8:	f7fe fbf2 	bl	8000890 <_isatty>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	d102      	bne.n	80020b6 <_isatty_r+0x1a>
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	b103      	cbz	r3, 80020b6 <_isatty_r+0x1a>
 80020b4:	602b      	str	r3, [r5, #0]
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
 80020b8:	2000009c 	.word	0x2000009c

080020bc <_lseek_r>:
 80020bc:	b538      	push	{r3, r4, r5, lr}
 80020be:	4605      	mov	r5, r0
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	2200      	movs	r2, #0
 80020c6:	4c05      	ldr	r4, [pc, #20]	; (80020dc <_lseek_r+0x20>)
 80020c8:	6022      	str	r2, [r4, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f7fe fbea 	bl	80008a4 <_lseek>
 80020d0:	1c43      	adds	r3, r0, #1
 80020d2:	d102      	bne.n	80020da <_lseek_r+0x1e>
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	b103      	cbz	r3, 80020da <_lseek_r+0x1e>
 80020d8:	602b      	str	r3, [r5, #0]
 80020da:	bd38      	pop	{r3, r4, r5, pc}
 80020dc:	2000009c 	.word	0x2000009c

080020e0 <__malloc_lock>:
 80020e0:	4770      	bx	lr

080020e2 <__malloc_unlock>:
 80020e2:	4770      	bx	lr

080020e4 <_read_r>:
 80020e4:	b538      	push	{r3, r4, r5, lr}
 80020e6:	4605      	mov	r5, r0
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	2200      	movs	r2, #0
 80020ee:	4c05      	ldr	r4, [pc, #20]	; (8002104 <_read_r+0x20>)
 80020f0:	6022      	str	r2, [r4, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	f7fe fb79 	bl	80007ea <_read>
 80020f8:	1c43      	adds	r3, r0, #1
 80020fa:	d102      	bne.n	8002102 <_read_r+0x1e>
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	b103      	cbz	r3, 8002102 <_read_r+0x1e>
 8002100:	602b      	str	r3, [r5, #0]
 8002102:	bd38      	pop	{r3, r4, r5, pc}
 8002104:	2000009c 	.word	0x2000009c

08002108 <_init>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr

08002114 <_fini>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	bf00      	nop
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr
