
projeto_estacionamento_stm32f103c6_sensor_pir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080020b0  080020b0  000120b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021b8  080021b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080021b8  080021b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021b8  080021b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021b8  080021b8  000121b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021bc  080021bc  000121bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080021c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000070  08002230  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002230  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c71  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001465  00000000  00000000  00025d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004f8  00000000  00000000  00027170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000440  00000000  00000000  00027668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017474  00000000  00000000  00027aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005298  00000000  00000000  0003ef1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e825  00000000  00000000  000441b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c29d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001794  00000000  00000000  000c2a54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002098 	.word	0x08002098

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002098 	.word	0x08002098

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800016e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000176:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800017c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800017e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	4618      	mov	r0, r3
 8000192:	f000 f80e 	bl	80001b2 <Lcd_init>

	return lcd;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	461d      	mov	r5, r3
 800019a:	f107 0410 	add.w	r4, r7, #16
 800019e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001aa:	68f8      	ldr	r0, [r7, #12]
 80001ac:	3728      	adds	r7, #40	; 0x28
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bdb0      	pop	{r4, r5, r7, pc}

080001b2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	7d9b      	ldrb	r3, [r3, #22]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d10c      	bne.n	80001dc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c2:	2133      	movs	r1, #51	; 0x33
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f000 f861 	bl	800028c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ca:	2132      	movs	r1, #50	; 0x32
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f000 f85d 	bl	800028c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d2:	2128      	movs	r1, #40	; 0x28
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f000 f859 	bl	800028c <lcd_write_command>
 80001da:	e003      	b.n	80001e4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001dc:	2138      	movs	r1, #56	; 0x38
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 f854 	bl	800028c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e4:	2101      	movs	r1, #1
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f000 f850 	bl	800028c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001ec:	210c      	movs	r1, #12
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f000 f84c 	bl	800028c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f4:	2106      	movs	r1, #6
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f848 	bl	800028c <lcd_write_command>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800020e:	2300      	movs	r3, #0
 8000210:	73fb      	strb	r3, [r7, #15]
 8000212:	e00a      	b.n	800022a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	4413      	add	r3, r2
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	4619      	mov	r1, r3
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f000 f862 	bl	80002e8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	3301      	adds	r3, #1
 8000228:	73fb      	strb	r3, [r7, #15]
 800022a:	7bfc      	ldrb	r4, [r7, #15]
 800022c:	6838      	ldr	r0, [r7, #0]
 800022e:	f7ff ff8d 	bl	800014c <strlen>
 8000232:	4603      	mov	r3, r0
 8000234:	429c      	cmp	r4, r3
 8000236:	d3ed      	bcc.n	8000214 <Lcd_string+0x10>
	}
}
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}

08000240 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
 800024c:	4613      	mov	r3, r2
 800024e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000250:	78fb      	ldrb	r3, [r7, #3]
 8000252:	4a07      	ldr	r2, [pc, #28]	; (8000270 <Lcd_cursor+0x30>)
 8000254:	5cd2      	ldrb	r2, [r2, r3]
 8000256:	78bb      	ldrb	r3, [r7, #2]
 8000258:	4413      	add	r3, r2
 800025a:	b2db      	uxtb	r3, r3
 800025c:	3b80      	subs	r3, #128	; 0x80
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4619      	mov	r1, r3
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f000 f812 	bl	800028c <lcd_write_command>
	#endif
}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	08002118 	.word	0x08002118

08000274 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800027c:	2101      	movs	r1, #1
 800027e:	6878      	ldr	r0, [r7, #4]
 8000280:	f000 f804 	bl	800028c <lcd_write_command>
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	6898      	ldr	r0, [r3, #8]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	899b      	ldrh	r3, [r3, #12]
 80002a0:	2200      	movs	r2, #0
 80002a2:	4619      	mov	r1, r3
 80002a4:	f000 fe05 	bl	8000eb2 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7d9b      	ldrb	r3, [r3, #22]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d111      	bne.n	80002d4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002b0:	78fb      	ldrb	r3, [r7, #3]
 80002b2:	091b      	lsrs	r3, r3, #4
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2204      	movs	r2, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	6878      	ldr	r0, [r7, #4]
 80002bc:	f000 f842 	bl	8000344 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	f003 030f 	and.w	r3, r3, #15
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2204      	movs	r2, #4
 80002ca:	4619      	mov	r1, r3
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f000 f839 	bl	8000344 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80002d2:	e005      	b.n	80002e0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2208      	movs	r2, #8
 80002d8:	4619      	mov	r1, r3
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 f832 	bl	8000344 <lcd_write>
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6898      	ldr	r0, [r3, #8]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	899b      	ldrh	r3, [r3, #12]
 80002fc:	2201      	movs	r2, #1
 80002fe:	4619      	mov	r1, r3
 8000300:	f000 fdd7 	bl	8000eb2 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7d9b      	ldrb	r3, [r3, #22]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d111      	bne.n	8000330 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	091b      	lsrs	r3, r3, #4
 8000310:	b2db      	uxtb	r3, r3
 8000312:	2204      	movs	r2, #4
 8000314:	4619      	mov	r1, r3
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f814 	bl	8000344 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2204      	movs	r2, #4
 8000326:	4619      	mov	r1, r3
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f000 f80b 	bl	8000344 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800032e:	e005      	b.n	800033c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2208      	movs	r2, #8
 8000334:	4619      	mov	r1, r3
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 f804 	bl	8000344 <lcd_write>
}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
 8000350:	4613      	mov	r3, r2
 8000352:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000354:	2300      	movs	r3, #0
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e019      	b.n	800038e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4413      	add	r3, r2
 8000364:	6818      	ldr	r0, [r3, #0]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	685a      	ldr	r2, [r3, #4]
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	4413      	add	r3, r2
 8000370:	8819      	ldrh	r1, [r3, #0]
 8000372:	78fa      	ldrb	r2, [r7, #3]
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	fa42 f303 	asr.w	r3, r2, r3
 800037a:	b2db      	uxtb	r3, r3
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	461a      	mov	r2, r3
 8000384:	f000 fd95 	bl	8000eb2 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	3301      	adds	r3, #1
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	7bfa      	ldrb	r2, [r7, #15]
 8000390:	78bb      	ldrb	r3, [r7, #2]
 8000392:	429a      	cmp	r2, r3
 8000394:	d3e1      	bcc.n	800035a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6918      	ldr	r0, [r3, #16]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	8a9b      	ldrh	r3, [r3, #20]
 800039e:	2201      	movs	r2, #1
 80003a0:	4619      	mov	r1, r3
 80003a2:	f000 fd86 	bl	8000eb2 <HAL_GPIO_WritePin>
	DELAY(1);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 fb14 	bl	80009d4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6918      	ldr	r0, [r3, #16]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	8a9b      	ldrh	r3, [r3, #20]
 80003b4:	2200      	movs	r2, #0
 80003b6:	4619      	mov	r1, r3
 80003b8:	f000 fd7b 	bl	8000eb2 <HAL_GPIO_WritePin>
}
 80003bc:	bf00      	nop
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b095      	sub	sp, #84	; 0x54
 80003c8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int vagas = 300;
 80003ca:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d0:	f000 fa9e 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d4:	f000 f8ea 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d8:	f000 f924 	bl	8000624 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports [] = {
 80003dc:	4b69      	ldr	r3, [pc, #420]	; (8000584 <main+0x1c0>)
 80003de:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80003e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		D5_GPIO_Port,
		D6_GPIO_Port,
		D7_GPIO_Port
  };

  Lcd_PinType pins [] = {
 80003e8:	4a67      	ldr	r2, [pc, #412]	; (8000588 <main+0x1c4>)
 80003ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003f2:	e883 0003 	stmia.w	r3, {r0, r1}
		D5_Pin,
		D6_Pin,
		D7_Pin
  };

  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 80003f6:	f107 000c 	add.w	r0, r7, #12
 80003fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80003fe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000402:	2300      	movs	r3, #0
 8000404:	9303      	str	r3, [sp, #12]
 8000406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800040a:	9302      	str	r3, [sp, #8]
 800040c:	4b5f      	ldr	r3, [pc, #380]	; (800058c <main+0x1c8>)
 800040e:	9301      	str	r3, [sp, #4]
 8000410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	4b5d      	ldr	r3, [pc, #372]	; (800058c <main+0x1c8>)
 8000418:	f7ff fea0 	bl	800015c <Lcd_create>
  Lcd_cursor(&lcd, 0, 0);
 800041c:	f107 030c 	add.w	r3, r7, #12
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff0b 	bl	8000240 <Lcd_cursor>
  Lcd_string(&lcd,"ESTACIONAMENTO");
 800042a:	f107 030c 	add.w	r3, r7, #12
 800042e:	4958      	ldr	r1, [pc, #352]	; (8000590 <main+0x1cc>)
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff fee7 	bl	8000204 <Lcd_string>
  Lcd_cursor(&lcd, 1, 0);
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	2200      	movs	r2, #0
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff fefe 	bl	8000240 <Lcd_cursor>
  Lcd_string(&lcd,"DEDEL");
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	4952      	ldr	r1, [pc, #328]	; (8000594 <main+0x1d0>)
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff feda 	bl	8000204 <Lcd_string>
  HAL_Delay(50);
 8000450:	2032      	movs	r0, #50	; 0x32
 8000452:	f000 fabf 	bl	80009d4 <HAL_Delay>
  Lcd_clear(&lcd);
 8000456:	f107 030c 	add.w	r3, r7, #12
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff0a 	bl	8000274 <Lcd_clear>
  HAL_Delay(50);
 8000460:	2032      	movs	r0, #50	; 0x32
 8000462:	f000 fab7 	bl	80009d4 <HAL_Delay>

  Lcd_cursor(&lcd, 0, 0);
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff fee6 	bl	8000240 <Lcd_cursor>
  Lcd_string(&lcd,"SEJA");
 8000474:	f107 030c 	add.w	r3, r7, #12
 8000478:	4947      	ldr	r1, [pc, #284]	; (8000598 <main+0x1d4>)
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fec2 	bl	8000204 <Lcd_string>
  Lcd_cursor(&lcd, 1, 0);
 8000480:	f107 030c 	add.w	r3, r7, #12
 8000484:	2200      	movs	r2, #0
 8000486:	2101      	movs	r1, #1
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fed9 	bl	8000240 <Lcd_cursor>
  Lcd_string(&lcd,"BEM-VINDO");
 800048e:	f107 030c 	add.w	r3, r7, #12
 8000492:	4942      	ldr	r1, [pc, #264]	; (800059c <main+0x1d8>)
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff feb5 	bl	8000204 <Lcd_string>
  HAL_Delay(50);
 800049a:	2032      	movs	r0, #50	; 0x32
 800049c:	f000 fa9a 	bl	80009d4 <HAL_Delay>
  Lcd_clear(&lcd);
 80004a0:	f107 030c 	add.w	r3, r7, #12
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fee5 	bl	8000274 <Lcd_clear>
  HAL_Delay(50);
 80004aa:	2032      	movs	r0, #50	; 0x32
 80004ac:	f000 fa92 	bl	80009d4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Lcd_cursor(&lcd, 0, 0);
 80004b0:	f107 030c 	add.w	r3, r7, #12
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fec1 	bl	8000240 <Lcd_cursor>
	 	  Lcd_string(&lcd,"VAGAS");
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	4937      	ldr	r1, [pc, #220]	; (80005a0 <main+0x1dc>)
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe9d 	bl	8000204 <Lcd_string>
	 	  Lcd_cursor(&lcd, 1, 0);
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff feb4 	bl	8000240 <Lcd_cursor>

	 	  char snum[5];

	 	  // convert 123 to string [buf]
	 	  itoa(vagas, snum, 10);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	220a      	movs	r2, #10
 80004dc:	4619      	mov	r1, r3
 80004de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80004e0:	f001 f92c 	bl	800173c <itoa>

	 	  // print our string
	 	  printf("%s\n", snum);
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 f98e 	bl	8001808 <puts>
	 	  Lcd_string(&lcd, snum);
 80004ec:	1d3a      	adds	r2, r7, #4
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	4611      	mov	r1, r2
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff fe85 	bl	8000204 <Lcd_string>
	 	  HAL_Delay(50);
 80004fa:	2032      	movs	r0, #50	; 0x32
 80004fc:	f000 fa6a 	bl	80009d4 <HAL_Delay>
	 	  Lcd_clear(&lcd);
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff feb5 	bl	8000274 <Lcd_clear>
	 	  HAL_Delay(50);
 800050a:	2032      	movs	r0, #50	; 0x32
 800050c:	f000 fa62 	bl	80009d4 <HAL_Delay>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8000510:	2101      	movs	r1, #1
 8000512:	4824      	ldr	r0, [pc, #144]	; (80005a4 <main+0x1e0>)
 8000514:	f000 fcb6 	bl	8000e84 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d018      	beq.n	8000550 <main+0x18c>
		  vagas++;
 800051e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000520:	3301      	adds	r3, #1
 8000522:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Lcd_cursor(&lcd, 0, 0);
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff fe87 	bl	8000240 <Lcd_cursor>
		 	 	  Lcd_string(&lcd,"AGUARDE");
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	491c      	ldr	r1, [pc, #112]	; (80005a8 <main+0x1e4>)
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff fe63 	bl	8000204 <Lcd_string>
		  HAL_Delay(1000);
 800053e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000542:	f000 fa47 	bl	80009d4 <HAL_Delay>
		  Lcd_clear(&lcd);
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe92 	bl	8000274 <Lcd_clear>

	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 8000550:	2102      	movs	r1, #2
 8000552:	4814      	ldr	r0, [pc, #80]	; (80005a4 <main+0x1e0>)
 8000554:	f000 fc96 	bl	8000e84 <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0a8      	beq.n	80004b0 <main+0xec>
	  		  vagas--;
 800055e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000560:	3b01      	subs	r3, #1
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
	  	 	  Lcd_string(&lcd,"AGUARDE");
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	490f      	ldr	r1, [pc, #60]	; (80005a8 <main+0x1e4>)
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff fe4a 	bl	8000204 <Lcd_string>
	  			  HAL_Delay(1000);
 8000570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000574:	f000 fa2e 	bl	80009d4 <HAL_Delay>
	  			  Lcd_clear(&lcd);
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fe79 	bl	8000274 <Lcd_clear>
  {
 8000582:	e795      	b.n	80004b0 <main+0xec>
 8000584:	080020ec 	.word	0x080020ec
 8000588:	080020fc 	.word	0x080020fc
 800058c:	40010800 	.word	0x40010800
 8000590:	080020b0 	.word	0x080020b0
 8000594:	080020c0 	.word	0x080020c0
 8000598:	080020c8 	.word	0x080020c8
 800059c:	080020d0 	.word	0x080020d0
 80005a0:	080020dc 	.word	0x080020dc
 80005a4:	40010c00 	.word	0x40010c00
 80005a8:	080020e4 	.word	0x080020e4

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b090      	sub	sp, #64	; 0x40
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	2228      	movs	r2, #40	; 0x28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f8c0 	bl	8001740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d2:	2301      	movs	r3, #1
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2310      	movs	r3, #16
 80005d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005da:	2300      	movs	r3, #0
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fc7e 	bl	8000ee4 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005ee:	f000 f867 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f000 feea 	bl	80013e4 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000616:	f000 f853 	bl	80006c0 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3740      	adds	r7, #64	; 0x40
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_GPIO_Init+0x90>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <MX_GPIO_Init+0x90>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_GPIO_Init+0x90>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_GPIO_Init+0x90>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_GPIO_Init+0x90>)
 8000656:	f043 0308 	orr.w	r3, r3, #8
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_GPIO_Init+0x90>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0308 	and.w	r3, r3, #8
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 715e 	mov.w	r1, #888	; 0x378
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_GPIO_Init+0x94>)
 8000670:	f000 fc1f 	bl	8000eb2 <HAL_GPIO_WritePin>
                          |RS_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000674:	f44f 735e 	mov.w	r3, #888	; 0x378
 8000678:	60bb      	str	r3, [r7, #8]
                          |RS_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2302      	movs	r3, #2
 8000684:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	4619      	mov	r1, r3
 800068c:	480a      	ldr	r0, [pc, #40]	; (80006b8 <MX_GPIO_Init+0x94>)
 800068e:	f000 faa7 	bl	8000be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000692:	2303      	movs	r3, #3
 8000694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_GPIO_Init+0x98>)
 80006a6:	f000 fa9b 	bl	8000be0 <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010800 	.word	0x40010800
 80006bc:	40010c00 	.word	0x40010c00

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <Error_Handler+0x6>

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_MspInit+0x5c>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_MspInit+0x5c>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_MspInit+0x5c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_MspInit+0x5c>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <HAL_MspInit+0x5c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_MspInit+0x5c>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_MspInit+0x60>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_MspInit+0x60>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000
 8000728:	40010000 	.word	0x40010000

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f913 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	e00a      	b.n	80007a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800078c:	f3af 8000 	nop.w
 8000790:	4601      	mov	r1, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	60ba      	str	r2, [r7, #8]
 8000798:	b2ca      	uxtb	r2, r1
 800079a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	3301      	adds	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dbf0      	blt.n	800078c <_read+0x12>
	}

return len;
 80007aa:	687b      	ldr	r3, [r7, #4]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	e009      	b.n	80007da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	60ba      	str	r2, [r7, #8]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3301      	adds	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dbf1      	blt.n	80007c6 <_write+0x12>
	}
	return len;
 80007e2:	687b      	ldr	r3, [r7, #4]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <_close>:

int _close(int file)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return -1;
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000812:	605a      	str	r2, [r3, #4]
	return 0;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <_isatty>:

int _isatty(int file)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	return 1;
 8000828:	2301      	movs	r3, #1
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
	return 0;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <_sbrk+0x5c>)
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <_sbrk+0x60>)
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_sbrk+0x64>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <_sbrk+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800087c:	f000 ff1c 	bl	80016b8 <__errno>
 8000880:	4602      	mov	r2, r0
 8000882:	230c      	movs	r3, #12
 8000884:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e009      	b.n	80008a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_sbrk+0x64>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20002800 	.word	0x20002800
 80008ac:	00000400 	.word	0x00000400
 80008b0:	2000008c 	.word	0x2000008c
 80008b4:	200000a0 	.word	0x200000a0

080008b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008c6:	e003      	b.n	80008d0 <LoopCopyDataInit>

080008c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008ce:	3104      	adds	r1, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008d0:	480a      	ldr	r0, [pc, #40]	; (80008fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008d8:	d3f6      	bcc.n	80008c8 <CopyDataInit>
  ldr r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008dc:	e002      	b.n	80008e4 <LoopFillZerobss>

080008de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008e0:	f842 3b04 	str.w	r3, [r2], #4

080008e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008e8:	d3f9      	bcc.n	80008de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ea:	f7ff ffe5 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ee:	f000 fee9 	bl	80016c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f2:	f7ff fd67 	bl	80003c4 <main>
  bx lr
 80008f6:	4770      	bx	lr
  ldr r3, =_sidata
 80008f8:	080021c0 	.word	0x080021c0
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000900:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000904:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000908:	200000a0 	.word	0x200000a0

0800090c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_2_IRQHandler>
	...

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_Init+0x28>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_Init+0x28>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f929 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	2000      	movs	r0, #0
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff fecc 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40022000 	.word	0x40022000

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f933 	bl	8000bc6 <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f909 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000008 	.word	0x20000008
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x1c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x20>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x20>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000098 	.word	0x20000098

080009c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <HAL_GetTick+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000098 	.word	0x20000098

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff fff0 	bl	80009c0 <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_Delay+0x40>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffe0 	bl	80009c0 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000008 	.word	0x20000008

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f7ff ff90 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff49 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff5e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff90 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5f 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffb0 	bl	8000b34 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf2:	e121      	b.n	8000e38 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	f040 8110 	bne.w	8000e32 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b12      	cmp	r3, #18
 8000c18:	d034      	beq.n	8000c84 <HAL_GPIO_Init+0xa4>
 8000c1a:	2b12      	cmp	r3, #18
 8000c1c:	d80d      	bhi.n	8000c3a <HAL_GPIO_Init+0x5a>
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d02b      	beq.n	8000c7a <HAL_GPIO_Init+0x9a>
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d804      	bhi.n	8000c30 <HAL_GPIO_Init+0x50>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d031      	beq.n	8000c8e <HAL_GPIO_Init+0xae>
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d01c      	beq.n	8000c68 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c2e:	e048      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d043      	beq.n	8000cbc <HAL_GPIO_Init+0xdc>
 8000c34:	2b11      	cmp	r3, #17
 8000c36:	d01b      	beq.n	8000c70 <HAL_GPIO_Init+0x90>
          break;
 8000c38:	e043      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c3a:	4a86      	ldr	r2, [pc, #536]	; (8000e54 <HAL_GPIO_Init+0x274>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d026      	beq.n	8000c8e <HAL_GPIO_Init+0xae>
 8000c40:	4a84      	ldr	r2, [pc, #528]	; (8000e54 <HAL_GPIO_Init+0x274>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d806      	bhi.n	8000c54 <HAL_GPIO_Init+0x74>
 8000c46:	4a84      	ldr	r2, [pc, #528]	; (8000e58 <HAL_GPIO_Init+0x278>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d020      	beq.n	8000c8e <HAL_GPIO_Init+0xae>
 8000c4c:	4a83      	ldr	r2, [pc, #524]	; (8000e5c <HAL_GPIO_Init+0x27c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d01d      	beq.n	8000c8e <HAL_GPIO_Init+0xae>
          break;
 8000c52:	e036      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c54:	4a82      	ldr	r2, [pc, #520]	; (8000e60 <HAL_GPIO_Init+0x280>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d019      	beq.n	8000c8e <HAL_GPIO_Init+0xae>
 8000c5a:	4a82      	ldr	r2, [pc, #520]	; (8000e64 <HAL_GPIO_Init+0x284>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d016      	beq.n	8000c8e <HAL_GPIO_Init+0xae>
 8000c60:	4a81      	ldr	r2, [pc, #516]	; (8000e68 <HAL_GPIO_Init+0x288>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d013      	beq.n	8000c8e <HAL_GPIO_Init+0xae>
          break;
 8000c66:	e02c      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	623b      	str	r3, [r7, #32]
          break;
 8000c6e:	e028      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	3304      	adds	r3, #4
 8000c76:	623b      	str	r3, [r7, #32]
          break;
 8000c78:	e023      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	3308      	adds	r3, #8
 8000c80:	623b      	str	r3, [r7, #32]
          break;
 8000c82:	e01e      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	330c      	adds	r3, #12
 8000c8a:	623b      	str	r3, [r7, #32]
          break;
 8000c8c:	e019      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d102      	bne.n	8000c9c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c96:	2304      	movs	r3, #4
 8000c98:	623b      	str	r3, [r7, #32]
          break;
 8000c9a:	e012      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d105      	bne.n	8000cb0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	611a      	str	r2, [r3, #16]
          break;
 8000cae:	e008      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69fa      	ldr	r2, [r7, #28]
 8000cb8:	615a      	str	r2, [r3, #20]
          break;
 8000cba:	e002      	b.n	8000cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
          break;
 8000cc0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2bff      	cmp	r3, #255	; 0xff
 8000cc6:	d801      	bhi.n	8000ccc <HAL_GPIO_Init+0xec>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	e001      	b.n	8000cd0 <HAL_GPIO_Init+0xf0>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	2bff      	cmp	r3, #255	; 0xff
 8000cd6:	d802      	bhi.n	8000cde <HAL_GPIO_Init+0xfe>
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	e002      	b.n	8000ce4 <HAL_GPIO_Init+0x104>
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	3b08      	subs	r3, #8
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	210f      	movs	r1, #15
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	6a39      	ldr	r1, [r7, #32]
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 8090 	beq.w	8000e32 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d12:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <HAL_GPIO_Init+0x28c>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4a55      	ldr	r2, [pc, #340]	; (8000e6c <HAL_GPIO_Init+0x28c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6193      	str	r3, [r2, #24]
 8000d1e:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <HAL_GPIO_Init+0x28c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d2a:	4a51      	ldr	r2, [pc, #324]	; (8000e70 <HAL_GPIO_Init+0x290>)
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a48      	ldr	r2, [pc, #288]	; (8000e74 <HAL_GPIO_Init+0x294>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00d      	beq.n	8000d72 <HAL_GPIO_Init+0x192>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a47      	ldr	r2, [pc, #284]	; (8000e78 <HAL_GPIO_Init+0x298>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x18e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a46      	ldr	r2, [pc, #280]	; (8000e7c <HAL_GPIO_Init+0x29c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_GPIO_Init+0x18a>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e004      	b.n	8000d74 <HAL_GPIO_Init+0x194>
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e002      	b.n	8000d74 <HAL_GPIO_Init+0x194>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <HAL_GPIO_Init+0x194>
 8000d72:	2300      	movs	r3, #0
 8000d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d76:	f002 0203 	and.w	r2, r2, #3
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	4093      	lsls	r3, r2
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d84:	493a      	ldr	r1, [pc, #232]	; (8000e70 <HAL_GPIO_Init+0x290>)
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	089b      	lsrs	r3, r3, #2
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9e:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4937      	ldr	r1, [pc, #220]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	600b      	str	r3, [r1, #0]
 8000daa:	e006      	b.n	8000dba <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dac:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4932      	ldr	r1, [pc, #200]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000db6:	4013      	ands	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d006      	beq.n	8000dd4 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	492d      	ldr	r1, [pc, #180]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4928      	ldr	r1, [pc, #160]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	4923      	ldr	r1, [pc, #140]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	608b      	str	r3, [r1, #8]
 8000dfa:	e006      	b.n	8000e0a <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	491e      	ldr	r1, [pc, #120]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	4919      	ldr	r1, [pc, #100]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60cb      	str	r3, [r1, #12]
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4914      	ldr	r1, [pc, #80]	; (8000e80 <HAL_GPIO_Init+0x2a0>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	3301      	adds	r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f47f aed6 	bne.w	8000bf4 <HAL_GPIO_Init+0x14>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	372c      	adds	r7, #44	; 0x2c
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	10210000 	.word	0x10210000
 8000e58:	10110000 	.word	0x10110000
 8000e5c:	10120000 	.word	0x10120000
 8000e60:	10310000 	.word	0x10310000
 8000e64:	10320000 	.word	0x10320000
 8000e68:	10220000 	.word	0x10220000
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000
 8000e74:	40010800 	.word	0x40010800
 8000e78:	40010c00 	.word	0x40010c00
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	40010400 	.word	0x40010400

08000e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	4013      	ands	r3, r2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	e001      	b.n	8000ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	807b      	strh	r3, [r7, #2]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec2:	787b      	ldrb	r3, [r7, #1]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec8:	887a      	ldrh	r2, [r7, #2]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ece:	e003      	b.n	8000ed8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	041a      	lsls	r2, r3, #16
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	611a      	str	r2, [r3, #16]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
	...

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e26c      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8087 	beq.w	8001012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f04:	4b92      	ldr	r3, [pc, #584]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 030c 	and.w	r3, r3, #12
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d00c      	beq.n	8000f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f10:	4b8f      	ldr	r3, [pc, #572]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 030c 	and.w	r3, r3, #12
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d112      	bne.n	8000f42 <HAL_RCC_OscConfig+0x5e>
 8000f1c:	4b8c      	ldr	r3, [pc, #560]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f28:	d10b      	bne.n	8000f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2a:	4b89      	ldr	r3, [pc, #548]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d06c      	beq.n	8001010 <HAL_RCC_OscConfig+0x12c>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d168      	bne.n	8001010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e246      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4a:	d106      	bne.n	8000f5a <HAL_RCC_OscConfig+0x76>
 8000f4c:	4b80      	ldr	r3, [pc, #512]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a7f      	ldr	r2, [pc, #508]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e02e      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd4>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x98>
 8000f62:	4b7b      	ldr	r3, [pc, #492]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a7a      	ldr	r2, [pc, #488]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b78      	ldr	r3, [pc, #480]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a77      	ldr	r2, [pc, #476]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e01d      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd4>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0xbc>
 8000f86:	4b72      	ldr	r3, [pc, #456]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a71      	ldr	r2, [pc, #452]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b6f      	ldr	r3, [pc, #444]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6e      	ldr	r2, [pc, #440]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd4>
 8000fa0:	4b6b      	ldr	r3, [pc, #428]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a6a      	ldr	r2, [pc, #424]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b68      	ldr	r3, [pc, #416]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a67      	ldr	r2, [pc, #412]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fcfe 	bl	80009c0 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fcfa 	bl	80009c0 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e1fa      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	4b5d      	ldr	r3, [pc, #372]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0xe4>
 8000fe6:	e014      	b.n	8001012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fcea 	bl	80009c0 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fce6 	bl	80009c0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e1e6      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	4b53      	ldr	r3, [pc, #332]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x10c>
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d063      	beq.n	80010e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800101e:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00b      	beq.n	8001042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800102a:	4b49      	ldr	r3, [pc, #292]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	2b08      	cmp	r3, #8
 8001034:	d11c      	bne.n	8001070 <HAL_RCC_OscConfig+0x18c>
 8001036:	4b46      	ldr	r3, [pc, #280]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d116      	bne.n	8001070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001042:	4b43      	ldr	r3, [pc, #268]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <HAL_RCC_OscConfig+0x176>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d001      	beq.n	800105a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e1ba      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4939      	ldr	r1, [pc, #228]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106e:	e03a      	b.n	80010e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d020      	beq.n	80010ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001078:	4b36      	ldr	r3, [pc, #216]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107e:	f7ff fc9f 	bl	80009c0 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff fc9b 	bl	80009c0 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e19b      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4927      	ldr	r1, [pc, #156]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
 80010b8:	e015      	b.n	80010e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc7e 	bl	80009c0 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc7a 	bl	80009c0 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e17a      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d03a      	beq.n	8001168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d019      	beq.n	800112e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_RCC_OscConfig+0x274>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001100:	f7ff fc5e 	bl	80009c0 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001108:	f7ff fc5a 	bl	80009c0 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e15a      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_RCC_OscConfig+0x26c>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 faa8 	bl	800167c <RCC_Delay>
 800112c:	e01c      	b.n	8001168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_RCC_OscConfig+0x274>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001134:	f7ff fc44 	bl	80009c0 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113a:	e00f      	b.n	800115c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fc40 	bl	80009c0 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d908      	bls.n	800115c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e140      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	42420000 	.word	0x42420000
 8001158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115c:	4b9e      	ldr	r3, [pc, #632]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1e9      	bne.n	800113c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a6 	beq.w	80012c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117a:	4b97      	ldr	r3, [pc, #604]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10d      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b94      	ldr	r3, [pc, #592]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a93      	ldr	r2, [pc, #588]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119e:	2301      	movs	r3, #1
 80011a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4b8e      	ldr	r3, [pc, #568]	; (80013dc <HAL_RCC_OscConfig+0x4f8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d118      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ae:	4b8b      	ldr	r3, [pc, #556]	; (80013dc <HAL_RCC_OscConfig+0x4f8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a8a      	ldr	r2, [pc, #552]	; (80013dc <HAL_RCC_OscConfig+0x4f8>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fc01 	bl	80009c0 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c2:	f7ff fbfd 	bl	80009c0 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b64      	cmp	r3, #100	; 0x64
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e0fd      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	4b81      	ldr	r3, [pc, #516]	; (80013dc <HAL_RCC_OscConfig+0x4f8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x312>
 80011e8:	4b7b      	ldr	r3, [pc, #492]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4a7a      	ldr	r2, [pc, #488]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6213      	str	r3, [r2, #32]
 80011f4:	e02d      	b.n	8001252 <HAL_RCC_OscConfig+0x36e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x334>
 80011fe:	4b76      	ldr	r3, [pc, #472]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a75      	ldr	r2, [pc, #468]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	4b73      	ldr	r3, [pc, #460]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4a72      	ldr	r2, [pc, #456]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	6213      	str	r3, [r2, #32]
 8001216:	e01c      	b.n	8001252 <HAL_RCC_OscConfig+0x36e>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b05      	cmp	r3, #5
 800121e:	d10c      	bne.n	800123a <HAL_RCC_OscConfig+0x356>
 8001220:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4a6c      	ldr	r2, [pc, #432]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6213      	str	r3, [r2, #32]
 800122c:	4b6a      	ldr	r3, [pc, #424]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4a69      	ldr	r2, [pc, #420]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6213      	str	r3, [r2, #32]
 8001238:	e00b      	b.n	8001252 <HAL_RCC_OscConfig+0x36e>
 800123a:	4b67      	ldr	r3, [pc, #412]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a66      	ldr	r2, [pc, #408]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	4b64      	ldr	r3, [pc, #400]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4a63      	ldr	r2, [pc, #396]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	f023 0304 	bic.w	r3, r3, #4
 8001250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d015      	beq.n	8001286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fbb1 	bl	80009c0 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001260:	e00a      	b.n	8001278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f7ff fbad 	bl	80009c0 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001270:	4293      	cmp	r3, r2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e0ab      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0ee      	beq.n	8001262 <HAL_RCC_OscConfig+0x37e>
 8001284:	e014      	b.n	80012b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fb9b 	bl	80009c0 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128c:	e00a      	b.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f7ff fb97 	bl	80009c0 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f241 3288 	movw	r2, #5000	; 0x1388
 800129c:	4293      	cmp	r3, r2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e095      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a4:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1ee      	bne.n	800128e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d105      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b6:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a47      	ldr	r2, [pc, #284]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8081 	beq.w	80013ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012cc:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d061      	beq.n	800139c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d146      	bne.n	800136e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <HAL_RCC_OscConfig+0x4fc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb6b 	bl	80009c0 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff fb67 	bl	80009c0 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e067      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001314:	d108      	bne.n	8001328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001316:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	492d      	ldr	r1, [pc, #180]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001328:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a19      	ldr	r1, [r3, #32]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	430b      	orrs	r3, r1
 800133a:	4927      	ldr	r1, [pc, #156]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_RCC_OscConfig+0x4fc>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fb3b 	bl	80009c0 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff fb37 	bl	80009c0 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e037      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x46a>
 800136c:	e02f      	b.n	80013ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_RCC_OscConfig+0x4fc>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fb24 	bl	80009c0 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff fb20 	bl	80009c0 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e020      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x498>
 800139a:	e018      	b.n	80013ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e013      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40007000 	.word	0x40007000
 80013e0:	42420060 	.word	0x42420060

080013e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0d0      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f8:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d910      	bls.n	8001428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b67      	ldr	r3, [pc, #412]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 0207 	bic.w	r2, r3, #7
 800140e:	4965      	ldr	r1, [pc, #404]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001416:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d001      	beq.n	8001428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0b8      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001440:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800144a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001464:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	494d      	ldr	r1, [pc, #308]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d040      	beq.n	8001504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d115      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e07f      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e073      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e06b      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f023 0203 	bic.w	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4936      	ldr	r1, [pc, #216]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fa74 	bl	80009c0 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014dc:	f7ff fa70 	bl	80009c0 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e053      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 020c 	and.w	r2, r3, #12
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	429a      	cmp	r2, r3
 8001502:	d1eb      	bne.n	80014dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d210      	bcs.n	8001534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 0207 	bic.w	r2, r3, #7
 800151a:	4922      	ldr	r1, [pc, #136]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e032      	b.n	800159a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4916      	ldr	r1, [pc, #88]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	4313      	orrs	r3, r2
 8001550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d009      	beq.n	8001572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	490e      	ldr	r1, [pc, #56]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001572:	f000 f821 	bl	80015b8 <HAL_RCC_GetSysClockFreq>
 8001576:	4601      	mov	r1, r0
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_RCC_ClockConfig+0x1c8>)
 8001584:	5cd3      	ldrb	r3, [r2, r3]
 8001586:	fa21 f303 	lsr.w	r3, r1, r3
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <HAL_RCC_ClockConfig+0x1cc>)
 800158c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f9d2 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40022000 	.word	0x40022000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	0800211c 	.word	0x0800211c
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b8:	b490      	push	{r4, r7}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015c0:	1d3c      	adds	r4, r7, #4
 80015c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d002      	beq.n	80015f8 <HAL_RCC_GetSysClockFreq+0x40>
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d003      	beq.n	80015fe <HAL_RCC_GetSysClockFreq+0x46>
 80015f6:	e02d      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015fa:	623b      	str	r3, [r7, #32]
      break;
 80015fc:	e02d      	b.n	800165a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	0c9b      	lsrs	r3, r3, #18
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800160a:	4413      	add	r3, r2
 800160c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001610:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_RCC_GetSysClockFreq+0xb8>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	0c5b      	lsrs	r3, r3, #17
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800162a:	4413      	add	r3, r2
 800162c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001630:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001636:	fb02 f203 	mul.w	r2, r2, r3
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
 8001642:	e004      	b.n	800164e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	623b      	str	r3, [r7, #32]
      break;
 8001652:	e002      	b.n	800165a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001656:	623b      	str	r3, [r7, #32]
      break;
 8001658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800165a:	6a3b      	ldr	r3, [r7, #32]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bc90      	pop	{r4, r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	08002104 	.word	0x08002104
 800166c:	08002114 	.word	0x08002114
 8001670:	40021000 	.word	0x40021000
 8001674:	007a1200 	.word	0x007a1200
 8001678:	003d0900 	.word	0x003d0900

0800167c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <RCC_Delay+0x34>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <RCC_Delay+0x38>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0a5b      	lsrs	r3, r3, #9
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001698:	bf00      	nop
  }
  while (Delay --);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1e5a      	subs	r2, r3, #1
 800169e:	60fa      	str	r2, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f9      	bne.n	8001698 <RCC_Delay+0x1c>
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000000 	.word	0x20000000
 80016b4:	10624dd3 	.word	0x10624dd3

080016b8 <__errno>:
 80016b8:	4b01      	ldr	r3, [pc, #4]	; (80016c0 <__errno+0x8>)
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2000000c 	.word	0x2000000c

080016c4 <__libc_init_array>:
 80016c4:	b570      	push	{r4, r5, r6, lr}
 80016c6:	2500      	movs	r5, #0
 80016c8:	4e0c      	ldr	r6, [pc, #48]	; (80016fc <__libc_init_array+0x38>)
 80016ca:	4c0d      	ldr	r4, [pc, #52]	; (8001700 <__libc_init_array+0x3c>)
 80016cc:	1ba4      	subs	r4, r4, r6
 80016ce:	10a4      	asrs	r4, r4, #2
 80016d0:	42a5      	cmp	r5, r4
 80016d2:	d109      	bne.n	80016e8 <__libc_init_array+0x24>
 80016d4:	f000 fce0 	bl	8002098 <_init>
 80016d8:	2500      	movs	r5, #0
 80016da:	4e0a      	ldr	r6, [pc, #40]	; (8001704 <__libc_init_array+0x40>)
 80016dc:	4c0a      	ldr	r4, [pc, #40]	; (8001708 <__libc_init_array+0x44>)
 80016de:	1ba4      	subs	r4, r4, r6
 80016e0:	10a4      	asrs	r4, r4, #2
 80016e2:	42a5      	cmp	r5, r4
 80016e4:	d105      	bne.n	80016f2 <__libc_init_array+0x2e>
 80016e6:	bd70      	pop	{r4, r5, r6, pc}
 80016e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016ec:	4798      	blx	r3
 80016ee:	3501      	adds	r5, #1
 80016f0:	e7ee      	b.n	80016d0 <__libc_init_array+0xc>
 80016f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016f6:	4798      	blx	r3
 80016f8:	3501      	adds	r5, #1
 80016fa:	e7f2      	b.n	80016e2 <__libc_init_array+0x1e>
 80016fc:	080021b8 	.word	0x080021b8
 8001700:	080021b8 	.word	0x080021b8
 8001704:	080021b8 	.word	0x080021b8
 8001708:	080021bc 	.word	0x080021bc

0800170c <__itoa>:
 800170c:	1e93      	subs	r3, r2, #2
 800170e:	2b22      	cmp	r3, #34	; 0x22
 8001710:	b510      	push	{r4, lr}
 8001712:	460c      	mov	r4, r1
 8001714:	d904      	bls.n	8001720 <__itoa+0x14>
 8001716:	2300      	movs	r3, #0
 8001718:	461c      	mov	r4, r3
 800171a:	700b      	strb	r3, [r1, #0]
 800171c:	4620      	mov	r0, r4
 800171e:	bd10      	pop	{r4, pc}
 8001720:	2a0a      	cmp	r2, #10
 8001722:	d109      	bne.n	8001738 <__itoa+0x2c>
 8001724:	2800      	cmp	r0, #0
 8001726:	da07      	bge.n	8001738 <__itoa+0x2c>
 8001728:	232d      	movs	r3, #45	; 0x2d
 800172a:	700b      	strb	r3, [r1, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	4240      	negs	r0, r0
 8001730:	4421      	add	r1, r4
 8001732:	f000 f871 	bl	8001818 <__utoa>
 8001736:	e7f1      	b.n	800171c <__itoa+0x10>
 8001738:	2100      	movs	r1, #0
 800173a:	e7f9      	b.n	8001730 <__itoa+0x24>

0800173c <itoa>:
 800173c:	f7ff bfe6 	b.w	800170c <__itoa>

08001740 <memset>:
 8001740:	4603      	mov	r3, r0
 8001742:	4402      	add	r2, r0
 8001744:	4293      	cmp	r3, r2
 8001746:	d100      	bne.n	800174a <memset+0xa>
 8001748:	4770      	bx	lr
 800174a:	f803 1b01 	strb.w	r1, [r3], #1
 800174e:	e7f9      	b.n	8001744 <memset+0x4>

08001750 <_puts_r>:
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	460e      	mov	r6, r1
 8001754:	4605      	mov	r5, r0
 8001756:	b118      	cbz	r0, 8001760 <_puts_r+0x10>
 8001758:	6983      	ldr	r3, [r0, #24]
 800175a:	b90b      	cbnz	r3, 8001760 <_puts_r+0x10>
 800175c:	f000 fa4a 	bl	8001bf4 <__sinit>
 8001760:	69ab      	ldr	r3, [r5, #24]
 8001762:	68ac      	ldr	r4, [r5, #8]
 8001764:	b913      	cbnz	r3, 800176c <_puts_r+0x1c>
 8001766:	4628      	mov	r0, r5
 8001768:	f000 fa44 	bl	8001bf4 <__sinit>
 800176c:	4b23      	ldr	r3, [pc, #140]	; (80017fc <_puts_r+0xac>)
 800176e:	429c      	cmp	r4, r3
 8001770:	d117      	bne.n	80017a2 <_puts_r+0x52>
 8001772:	686c      	ldr	r4, [r5, #4]
 8001774:	89a3      	ldrh	r3, [r4, #12]
 8001776:	071b      	lsls	r3, r3, #28
 8001778:	d51d      	bpl.n	80017b6 <_puts_r+0x66>
 800177a:	6923      	ldr	r3, [r4, #16]
 800177c:	b1db      	cbz	r3, 80017b6 <_puts_r+0x66>
 800177e:	3e01      	subs	r6, #1
 8001780:	68a3      	ldr	r3, [r4, #8]
 8001782:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001786:	3b01      	subs	r3, #1
 8001788:	60a3      	str	r3, [r4, #8]
 800178a:	b9e9      	cbnz	r1, 80017c8 <_puts_r+0x78>
 800178c:	2b00      	cmp	r3, #0
 800178e:	da2e      	bge.n	80017ee <_puts_r+0x9e>
 8001790:	4622      	mov	r2, r4
 8001792:	210a      	movs	r1, #10
 8001794:	4628      	mov	r0, r5
 8001796:	f000 f87d 	bl	8001894 <__swbuf_r>
 800179a:	3001      	adds	r0, #1
 800179c:	d011      	beq.n	80017c2 <_puts_r+0x72>
 800179e:	200a      	movs	r0, #10
 80017a0:	e011      	b.n	80017c6 <_puts_r+0x76>
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <_puts_r+0xb0>)
 80017a4:	429c      	cmp	r4, r3
 80017a6:	d101      	bne.n	80017ac <_puts_r+0x5c>
 80017a8:	68ac      	ldr	r4, [r5, #8]
 80017aa:	e7e3      	b.n	8001774 <_puts_r+0x24>
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_puts_r+0xb4>)
 80017ae:	429c      	cmp	r4, r3
 80017b0:	bf08      	it	eq
 80017b2:	68ec      	ldreq	r4, [r5, #12]
 80017b4:	e7de      	b.n	8001774 <_puts_r+0x24>
 80017b6:	4621      	mov	r1, r4
 80017b8:	4628      	mov	r0, r5
 80017ba:	f000 f8bd 	bl	8001938 <__swsetup_r>
 80017be:	2800      	cmp	r0, #0
 80017c0:	d0dd      	beq.n	800177e <_puts_r+0x2e>
 80017c2:	f04f 30ff 	mov.w	r0, #4294967295
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da04      	bge.n	80017d6 <_puts_r+0x86>
 80017cc:	69a2      	ldr	r2, [r4, #24]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	dc06      	bgt.n	80017e0 <_puts_r+0x90>
 80017d2:	290a      	cmp	r1, #10
 80017d4:	d004      	beq.n	80017e0 <_puts_r+0x90>
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	6022      	str	r2, [r4, #0]
 80017dc:	7019      	strb	r1, [r3, #0]
 80017de:	e7cf      	b.n	8001780 <_puts_r+0x30>
 80017e0:	4622      	mov	r2, r4
 80017e2:	4628      	mov	r0, r5
 80017e4:	f000 f856 	bl	8001894 <__swbuf_r>
 80017e8:	3001      	adds	r0, #1
 80017ea:	d1c9      	bne.n	8001780 <_puts_r+0x30>
 80017ec:	e7e9      	b.n	80017c2 <_puts_r+0x72>
 80017ee:	200a      	movs	r0, #10
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	6022      	str	r2, [r4, #0]
 80017f6:	7018      	strb	r0, [r3, #0]
 80017f8:	e7e5      	b.n	80017c6 <_puts_r+0x76>
 80017fa:	bf00      	nop
 80017fc:	08002178 	.word	0x08002178
 8001800:	08002198 	.word	0x08002198
 8001804:	08002158 	.word	0x08002158

08001808 <puts>:
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <puts+0xc>)
 800180a:	4601      	mov	r1, r0
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	f7ff bf9f 	b.w	8001750 <_puts_r>
 8001812:	bf00      	nop
 8001814:	2000000c 	.word	0x2000000c

08001818 <__utoa>:
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b08b      	sub	sp, #44	; 0x2c
 800181c:	4605      	mov	r5, r0
 800181e:	460c      	mov	r4, r1
 8001820:	466e      	mov	r6, sp
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <__utoa+0x78>)
 8001824:	f103 0c20 	add.w	ip, r3, #32
 8001828:	4637      	mov	r7, r6
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	6859      	ldr	r1, [r3, #4]
 800182e:	3308      	adds	r3, #8
 8001830:	c703      	stmia	r7!, {r0, r1}
 8001832:	4563      	cmp	r3, ip
 8001834:	463e      	mov	r6, r7
 8001836:	d1f7      	bne.n	8001828 <__utoa+0x10>
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	791b      	ldrb	r3, [r3, #4]
 800183c:	6038      	str	r0, [r7, #0]
 800183e:	713b      	strb	r3, [r7, #4]
 8001840:	1e93      	subs	r3, r2, #2
 8001842:	2b22      	cmp	r3, #34	; 0x22
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	d904      	bls.n	8001854 <__utoa+0x3c>
 800184a:	7023      	strb	r3, [r4, #0]
 800184c:	461c      	mov	r4, r3
 800184e:	4620      	mov	r0, r4
 8001850:	b00b      	add	sp, #44	; 0x2c
 8001852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001854:	1e66      	subs	r6, r4, #1
 8001856:	fbb5 f0f2 	udiv	r0, r5, r2
 800185a:	fb02 5510 	mls	r5, r2, r0, r5
 800185e:	af0a      	add	r7, sp, #40	; 0x28
 8001860:	443d      	add	r5, r7
 8001862:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8001866:	1c59      	adds	r1, r3, #1
 8001868:	f806 5f01 	strb.w	r5, [r6, #1]!
 800186c:	4605      	mov	r5, r0
 800186e:	b968      	cbnz	r0, 800188c <__utoa+0x74>
 8001870:	4622      	mov	r2, r4
 8001872:	5460      	strb	r0, [r4, r1]
 8001874:	4423      	add	r3, r4
 8001876:	1b19      	subs	r1, r3, r4
 8001878:	1b10      	subs	r0, r2, r4
 800187a:	4281      	cmp	r1, r0
 800187c:	dde7      	ble.n	800184e <__utoa+0x36>
 800187e:	7811      	ldrb	r1, [r2, #0]
 8001880:	7818      	ldrb	r0, [r3, #0]
 8001882:	f802 0b01 	strb.w	r0, [r2], #1
 8001886:	f803 1901 	strb.w	r1, [r3], #-1
 800188a:	e7f4      	b.n	8001876 <__utoa+0x5e>
 800188c:	460b      	mov	r3, r1
 800188e:	e7e2      	b.n	8001856 <__utoa+0x3e>
 8001890:	08002130 	.word	0x08002130

08001894 <__swbuf_r>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	460e      	mov	r6, r1
 8001898:	4614      	mov	r4, r2
 800189a:	4605      	mov	r5, r0
 800189c:	b118      	cbz	r0, 80018a6 <__swbuf_r+0x12>
 800189e:	6983      	ldr	r3, [r0, #24]
 80018a0:	b90b      	cbnz	r3, 80018a6 <__swbuf_r+0x12>
 80018a2:	f000 f9a7 	bl	8001bf4 <__sinit>
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <__swbuf_r+0x98>)
 80018a8:	429c      	cmp	r4, r3
 80018aa:	d12a      	bne.n	8001902 <__swbuf_r+0x6e>
 80018ac:	686c      	ldr	r4, [r5, #4]
 80018ae:	69a3      	ldr	r3, [r4, #24]
 80018b0:	60a3      	str	r3, [r4, #8]
 80018b2:	89a3      	ldrh	r3, [r4, #12]
 80018b4:	071a      	lsls	r2, r3, #28
 80018b6:	d52e      	bpl.n	8001916 <__swbuf_r+0x82>
 80018b8:	6923      	ldr	r3, [r4, #16]
 80018ba:	b363      	cbz	r3, 8001916 <__swbuf_r+0x82>
 80018bc:	6923      	ldr	r3, [r4, #16]
 80018be:	6820      	ldr	r0, [r4, #0]
 80018c0:	b2f6      	uxtb	r6, r6
 80018c2:	1ac0      	subs	r0, r0, r3
 80018c4:	6963      	ldr	r3, [r4, #20]
 80018c6:	4637      	mov	r7, r6
 80018c8:	4283      	cmp	r3, r0
 80018ca:	dc04      	bgt.n	80018d6 <__swbuf_r+0x42>
 80018cc:	4621      	mov	r1, r4
 80018ce:	4628      	mov	r0, r5
 80018d0:	f000 f926 	bl	8001b20 <_fflush_r>
 80018d4:	bb28      	cbnz	r0, 8001922 <__swbuf_r+0x8e>
 80018d6:	68a3      	ldr	r3, [r4, #8]
 80018d8:	3001      	adds	r0, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	60a3      	str	r3, [r4, #8]
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	6022      	str	r2, [r4, #0]
 80018e4:	701e      	strb	r6, [r3, #0]
 80018e6:	6963      	ldr	r3, [r4, #20]
 80018e8:	4283      	cmp	r3, r0
 80018ea:	d004      	beq.n	80018f6 <__swbuf_r+0x62>
 80018ec:	89a3      	ldrh	r3, [r4, #12]
 80018ee:	07db      	lsls	r3, r3, #31
 80018f0:	d519      	bpl.n	8001926 <__swbuf_r+0x92>
 80018f2:	2e0a      	cmp	r6, #10
 80018f4:	d117      	bne.n	8001926 <__swbuf_r+0x92>
 80018f6:	4621      	mov	r1, r4
 80018f8:	4628      	mov	r0, r5
 80018fa:	f000 f911 	bl	8001b20 <_fflush_r>
 80018fe:	b190      	cbz	r0, 8001926 <__swbuf_r+0x92>
 8001900:	e00f      	b.n	8001922 <__swbuf_r+0x8e>
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <__swbuf_r+0x9c>)
 8001904:	429c      	cmp	r4, r3
 8001906:	d101      	bne.n	800190c <__swbuf_r+0x78>
 8001908:	68ac      	ldr	r4, [r5, #8]
 800190a:	e7d0      	b.n	80018ae <__swbuf_r+0x1a>
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <__swbuf_r+0xa0>)
 800190e:	429c      	cmp	r4, r3
 8001910:	bf08      	it	eq
 8001912:	68ec      	ldreq	r4, [r5, #12]
 8001914:	e7cb      	b.n	80018ae <__swbuf_r+0x1a>
 8001916:	4621      	mov	r1, r4
 8001918:	4628      	mov	r0, r5
 800191a:	f000 f80d 	bl	8001938 <__swsetup_r>
 800191e:	2800      	cmp	r0, #0
 8001920:	d0cc      	beq.n	80018bc <__swbuf_r+0x28>
 8001922:	f04f 37ff 	mov.w	r7, #4294967295
 8001926:	4638      	mov	r0, r7
 8001928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800192a:	bf00      	nop
 800192c:	08002178 	.word	0x08002178
 8001930:	08002198 	.word	0x08002198
 8001934:	08002158 	.word	0x08002158

08001938 <__swsetup_r>:
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <__swsetup_r+0xcc>)
 800193a:	b570      	push	{r4, r5, r6, lr}
 800193c:	681d      	ldr	r5, [r3, #0]
 800193e:	4606      	mov	r6, r0
 8001940:	460c      	mov	r4, r1
 8001942:	b125      	cbz	r5, 800194e <__swsetup_r+0x16>
 8001944:	69ab      	ldr	r3, [r5, #24]
 8001946:	b913      	cbnz	r3, 800194e <__swsetup_r+0x16>
 8001948:	4628      	mov	r0, r5
 800194a:	f000 f953 	bl	8001bf4 <__sinit>
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <__swsetup_r+0xd0>)
 8001950:	429c      	cmp	r4, r3
 8001952:	d10f      	bne.n	8001974 <__swsetup_r+0x3c>
 8001954:	686c      	ldr	r4, [r5, #4]
 8001956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800195a:	b29a      	uxth	r2, r3
 800195c:	0715      	lsls	r5, r2, #28
 800195e:	d42c      	bmi.n	80019ba <__swsetup_r+0x82>
 8001960:	06d0      	lsls	r0, r2, #27
 8001962:	d411      	bmi.n	8001988 <__swsetup_r+0x50>
 8001964:	2209      	movs	r2, #9
 8001966:	6032      	str	r2, [r6, #0]
 8001968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800196c:	81a3      	strh	r3, [r4, #12]
 800196e:	f04f 30ff 	mov.w	r0, #4294967295
 8001972:	e03e      	b.n	80019f2 <__swsetup_r+0xba>
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <__swsetup_r+0xd4>)
 8001976:	429c      	cmp	r4, r3
 8001978:	d101      	bne.n	800197e <__swsetup_r+0x46>
 800197a:	68ac      	ldr	r4, [r5, #8]
 800197c:	e7eb      	b.n	8001956 <__swsetup_r+0x1e>
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <__swsetup_r+0xd8>)
 8001980:	429c      	cmp	r4, r3
 8001982:	bf08      	it	eq
 8001984:	68ec      	ldreq	r4, [r5, #12]
 8001986:	e7e6      	b.n	8001956 <__swsetup_r+0x1e>
 8001988:	0751      	lsls	r1, r2, #29
 800198a:	d512      	bpl.n	80019b2 <__swsetup_r+0x7a>
 800198c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800198e:	b141      	cbz	r1, 80019a2 <__swsetup_r+0x6a>
 8001990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001994:	4299      	cmp	r1, r3
 8001996:	d002      	beq.n	800199e <__swsetup_r+0x66>
 8001998:	4630      	mov	r0, r6
 800199a:	f000 fa19 	bl	8001dd0 <_free_r>
 800199e:	2300      	movs	r3, #0
 80019a0:	6363      	str	r3, [r4, #52]	; 0x34
 80019a2:	89a3      	ldrh	r3, [r4, #12]
 80019a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019a8:	81a3      	strh	r3, [r4, #12]
 80019aa:	2300      	movs	r3, #0
 80019ac:	6063      	str	r3, [r4, #4]
 80019ae:	6923      	ldr	r3, [r4, #16]
 80019b0:	6023      	str	r3, [r4, #0]
 80019b2:	89a3      	ldrh	r3, [r4, #12]
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	81a3      	strh	r3, [r4, #12]
 80019ba:	6923      	ldr	r3, [r4, #16]
 80019bc:	b94b      	cbnz	r3, 80019d2 <__swsetup_r+0x9a>
 80019be:	89a3      	ldrh	r3, [r4, #12]
 80019c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c8:	d003      	beq.n	80019d2 <__swsetup_r+0x9a>
 80019ca:	4621      	mov	r1, r4
 80019cc:	4630      	mov	r0, r6
 80019ce:	f000 f9bf 	bl	8001d50 <__smakebuf_r>
 80019d2:	89a2      	ldrh	r2, [r4, #12]
 80019d4:	f012 0301 	ands.w	r3, r2, #1
 80019d8:	d00c      	beq.n	80019f4 <__swsetup_r+0xbc>
 80019da:	2300      	movs	r3, #0
 80019dc:	60a3      	str	r3, [r4, #8]
 80019de:	6963      	ldr	r3, [r4, #20]
 80019e0:	425b      	negs	r3, r3
 80019e2:	61a3      	str	r3, [r4, #24]
 80019e4:	6923      	ldr	r3, [r4, #16]
 80019e6:	b953      	cbnz	r3, 80019fe <__swsetup_r+0xc6>
 80019e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80019f0:	d1ba      	bne.n	8001968 <__swsetup_r+0x30>
 80019f2:	bd70      	pop	{r4, r5, r6, pc}
 80019f4:	0792      	lsls	r2, r2, #30
 80019f6:	bf58      	it	pl
 80019f8:	6963      	ldrpl	r3, [r4, #20]
 80019fa:	60a3      	str	r3, [r4, #8]
 80019fc:	e7f2      	b.n	80019e4 <__swsetup_r+0xac>
 80019fe:	2000      	movs	r0, #0
 8001a00:	e7f7      	b.n	80019f2 <__swsetup_r+0xba>
 8001a02:	bf00      	nop
 8001a04:	2000000c 	.word	0x2000000c
 8001a08:	08002178 	.word	0x08002178
 8001a0c:	08002198 	.word	0x08002198
 8001a10:	08002158 	.word	0x08002158

08001a14 <__sflush_r>:
 8001a14:	898a      	ldrh	r2, [r1, #12]
 8001a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a1a:	4605      	mov	r5, r0
 8001a1c:	0710      	lsls	r0, r2, #28
 8001a1e:	460c      	mov	r4, r1
 8001a20:	d458      	bmi.n	8001ad4 <__sflush_r+0xc0>
 8001a22:	684b      	ldr	r3, [r1, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	dc05      	bgt.n	8001a34 <__sflush_r+0x20>
 8001a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	dc02      	bgt.n	8001a34 <__sflush_r+0x20>
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a36:	2e00      	cmp	r6, #0
 8001a38:	d0f9      	beq.n	8001a2e <__sflush_r+0x1a>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a40:	682f      	ldr	r7, [r5, #0]
 8001a42:	6a21      	ldr	r1, [r4, #32]
 8001a44:	602b      	str	r3, [r5, #0]
 8001a46:	d032      	beq.n	8001aae <__sflush_r+0x9a>
 8001a48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a4a:	89a3      	ldrh	r3, [r4, #12]
 8001a4c:	075a      	lsls	r2, r3, #29
 8001a4e:	d505      	bpl.n	8001a5c <__sflush_r+0x48>
 8001a50:	6863      	ldr	r3, [r4, #4]
 8001a52:	1ac0      	subs	r0, r0, r3
 8001a54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a56:	b10b      	cbz	r3, 8001a5c <__sflush_r+0x48>
 8001a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a5a:	1ac0      	subs	r0, r0, r3
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	4602      	mov	r2, r0
 8001a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a62:	6a21      	ldr	r1, [r4, #32]
 8001a64:	4628      	mov	r0, r5
 8001a66:	47b0      	blx	r6
 8001a68:	1c43      	adds	r3, r0, #1
 8001a6a:	89a3      	ldrh	r3, [r4, #12]
 8001a6c:	d106      	bne.n	8001a7c <__sflush_r+0x68>
 8001a6e:	6829      	ldr	r1, [r5, #0]
 8001a70:	291d      	cmp	r1, #29
 8001a72:	d848      	bhi.n	8001b06 <__sflush_r+0xf2>
 8001a74:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <__sflush_r+0x108>)
 8001a76:	40ca      	lsrs	r2, r1
 8001a78:	07d6      	lsls	r6, r2, #31
 8001a7a:	d544      	bpl.n	8001b06 <__sflush_r+0xf2>
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6062      	str	r2, [r4, #4]
 8001a80:	6922      	ldr	r2, [r4, #16]
 8001a82:	04d9      	lsls	r1, r3, #19
 8001a84:	6022      	str	r2, [r4, #0]
 8001a86:	d504      	bpl.n	8001a92 <__sflush_r+0x7e>
 8001a88:	1c42      	adds	r2, r0, #1
 8001a8a:	d101      	bne.n	8001a90 <__sflush_r+0x7c>
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	b903      	cbnz	r3, 8001a92 <__sflush_r+0x7e>
 8001a90:	6560      	str	r0, [r4, #84]	; 0x54
 8001a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a94:	602f      	str	r7, [r5, #0]
 8001a96:	2900      	cmp	r1, #0
 8001a98:	d0c9      	beq.n	8001a2e <__sflush_r+0x1a>
 8001a9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a9e:	4299      	cmp	r1, r3
 8001aa0:	d002      	beq.n	8001aa8 <__sflush_r+0x94>
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	f000 f994 	bl	8001dd0 <_free_r>
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	6360      	str	r0, [r4, #52]	; 0x34
 8001aac:	e7c0      	b.n	8001a30 <__sflush_r+0x1c>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	47b0      	blx	r6
 8001ab4:	1c41      	adds	r1, r0, #1
 8001ab6:	d1c8      	bne.n	8001a4a <__sflush_r+0x36>
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0c5      	beq.n	8001a4a <__sflush_r+0x36>
 8001abe:	2b1d      	cmp	r3, #29
 8001ac0:	d001      	beq.n	8001ac6 <__sflush_r+0xb2>
 8001ac2:	2b16      	cmp	r3, #22
 8001ac4:	d101      	bne.n	8001aca <__sflush_r+0xb6>
 8001ac6:	602f      	str	r7, [r5, #0]
 8001ac8:	e7b1      	b.n	8001a2e <__sflush_r+0x1a>
 8001aca:	89a3      	ldrh	r3, [r4, #12]
 8001acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad0:	81a3      	strh	r3, [r4, #12]
 8001ad2:	e7ad      	b.n	8001a30 <__sflush_r+0x1c>
 8001ad4:	690f      	ldr	r7, [r1, #16]
 8001ad6:	2f00      	cmp	r7, #0
 8001ad8:	d0a9      	beq.n	8001a2e <__sflush_r+0x1a>
 8001ada:	0793      	lsls	r3, r2, #30
 8001adc:	bf18      	it	ne
 8001ade:	2300      	movne	r3, #0
 8001ae0:	680e      	ldr	r6, [r1, #0]
 8001ae2:	bf08      	it	eq
 8001ae4:	694b      	ldreq	r3, [r1, #20]
 8001ae6:	eba6 0807 	sub.w	r8, r6, r7
 8001aea:	600f      	str	r7, [r1, #0]
 8001aec:	608b      	str	r3, [r1, #8]
 8001aee:	f1b8 0f00 	cmp.w	r8, #0
 8001af2:	dd9c      	ble.n	8001a2e <__sflush_r+0x1a>
 8001af4:	4643      	mov	r3, r8
 8001af6:	463a      	mov	r2, r7
 8001af8:	6a21      	ldr	r1, [r4, #32]
 8001afa:	4628      	mov	r0, r5
 8001afc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001afe:	47b0      	blx	r6
 8001b00:	2800      	cmp	r0, #0
 8001b02:	dc06      	bgt.n	8001b12 <__sflush_r+0xfe>
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b0a:	81a3      	strh	r3, [r4, #12]
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	e78e      	b.n	8001a30 <__sflush_r+0x1c>
 8001b12:	4407      	add	r7, r0
 8001b14:	eba8 0800 	sub.w	r8, r8, r0
 8001b18:	e7e9      	b.n	8001aee <__sflush_r+0xda>
 8001b1a:	bf00      	nop
 8001b1c:	20400001 	.word	0x20400001

08001b20 <_fflush_r>:
 8001b20:	b538      	push	{r3, r4, r5, lr}
 8001b22:	690b      	ldr	r3, [r1, #16]
 8001b24:	4605      	mov	r5, r0
 8001b26:	460c      	mov	r4, r1
 8001b28:	b1db      	cbz	r3, 8001b62 <_fflush_r+0x42>
 8001b2a:	b118      	cbz	r0, 8001b34 <_fflush_r+0x14>
 8001b2c:	6983      	ldr	r3, [r0, #24]
 8001b2e:	b90b      	cbnz	r3, 8001b34 <_fflush_r+0x14>
 8001b30:	f000 f860 	bl	8001bf4 <__sinit>
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <_fflush_r+0x48>)
 8001b36:	429c      	cmp	r4, r3
 8001b38:	d109      	bne.n	8001b4e <_fflush_r+0x2e>
 8001b3a:	686c      	ldr	r4, [r5, #4]
 8001b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b40:	b17b      	cbz	r3, 8001b62 <_fflush_r+0x42>
 8001b42:	4621      	mov	r1, r4
 8001b44:	4628      	mov	r0, r5
 8001b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b4a:	f7ff bf63 	b.w	8001a14 <__sflush_r>
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_fflush_r+0x4c>)
 8001b50:	429c      	cmp	r4, r3
 8001b52:	d101      	bne.n	8001b58 <_fflush_r+0x38>
 8001b54:	68ac      	ldr	r4, [r5, #8]
 8001b56:	e7f1      	b.n	8001b3c <_fflush_r+0x1c>
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <_fflush_r+0x50>)
 8001b5a:	429c      	cmp	r4, r3
 8001b5c:	bf08      	it	eq
 8001b5e:	68ec      	ldreq	r4, [r5, #12]
 8001b60:	e7ec      	b.n	8001b3c <_fflush_r+0x1c>
 8001b62:	2000      	movs	r0, #0
 8001b64:	bd38      	pop	{r3, r4, r5, pc}
 8001b66:	bf00      	nop
 8001b68:	08002178 	.word	0x08002178
 8001b6c:	08002198 	.word	0x08002198
 8001b70:	08002158 	.word	0x08002158

08001b74 <std>:
 8001b74:	2300      	movs	r3, #0
 8001b76:	b510      	push	{r4, lr}
 8001b78:	4604      	mov	r4, r0
 8001b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8001b7e:	6083      	str	r3, [r0, #8]
 8001b80:	8181      	strh	r1, [r0, #12]
 8001b82:	6643      	str	r3, [r0, #100]	; 0x64
 8001b84:	81c2      	strh	r2, [r0, #14]
 8001b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b8a:	6183      	str	r3, [r0, #24]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	2208      	movs	r2, #8
 8001b90:	305c      	adds	r0, #92	; 0x5c
 8001b92:	f7ff fdd5 	bl	8001740 <memset>
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <std+0x38>)
 8001b98:	6224      	str	r4, [r4, #32]
 8001b9a:	6263      	str	r3, [r4, #36]	; 0x24
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <std+0x3c>)
 8001b9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <std+0x40>)
 8001ba2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <std+0x44>)
 8001ba6:	6323      	str	r3, [r4, #48]	; 0x30
 8001ba8:	bd10      	pop	{r4, pc}
 8001baa:	bf00      	nop
 8001bac:	08001f3d 	.word	0x08001f3d
 8001bb0:	08001f5f 	.word	0x08001f5f
 8001bb4:	08001f97 	.word	0x08001f97
 8001bb8:	08001fbb 	.word	0x08001fbb

08001bbc <_cleanup_r>:
 8001bbc:	4901      	ldr	r1, [pc, #4]	; (8001bc4 <_cleanup_r+0x8>)
 8001bbe:	f000 b885 	b.w	8001ccc <_fwalk_reent>
 8001bc2:	bf00      	nop
 8001bc4:	08001b21 	.word	0x08001b21

08001bc8 <__sfmoreglue>:
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	2568      	movs	r5, #104	; 0x68
 8001bcc:	1e4a      	subs	r2, r1, #1
 8001bce:	4355      	muls	r5, r2
 8001bd0:	460e      	mov	r6, r1
 8001bd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001bd6:	f000 f947 	bl	8001e68 <_malloc_r>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	b140      	cbz	r0, 8001bf0 <__sfmoreglue+0x28>
 8001bde:	2100      	movs	r1, #0
 8001be0:	e9c0 1600 	strd	r1, r6, [r0]
 8001be4:	300c      	adds	r0, #12
 8001be6:	60a0      	str	r0, [r4, #8]
 8001be8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001bec:	f7ff fda8 	bl	8001740 <memset>
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}

08001bf4 <__sinit>:
 8001bf4:	6983      	ldr	r3, [r0, #24]
 8001bf6:	b510      	push	{r4, lr}
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	bb33      	cbnz	r3, 8001c4a <__sinit+0x56>
 8001bfc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001c00:	6503      	str	r3, [r0, #80]	; 0x50
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <__sinit+0x58>)
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <__sinit+0x5c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6282      	str	r2, [r0, #40]	; 0x28
 8001c0a:	4298      	cmp	r0, r3
 8001c0c:	bf04      	itt	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	6183      	streq	r3, [r0, #24]
 8001c12:	f000 f81f 	bl	8001c54 <__sfp>
 8001c16:	6060      	str	r0, [r4, #4]
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f000 f81b 	bl	8001c54 <__sfp>
 8001c1e:	60a0      	str	r0, [r4, #8]
 8001c20:	4620      	mov	r0, r4
 8001c22:	f000 f817 	bl	8001c54 <__sfp>
 8001c26:	2200      	movs	r2, #0
 8001c28:	60e0      	str	r0, [r4, #12]
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	6860      	ldr	r0, [r4, #4]
 8001c2e:	f7ff ffa1 	bl	8001b74 <std>
 8001c32:	2201      	movs	r2, #1
 8001c34:	2109      	movs	r1, #9
 8001c36:	68a0      	ldr	r0, [r4, #8]
 8001c38:	f7ff ff9c 	bl	8001b74 <std>
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	2112      	movs	r1, #18
 8001c40:	68e0      	ldr	r0, [r4, #12]
 8001c42:	f7ff ff97 	bl	8001b74 <std>
 8001c46:	2301      	movs	r3, #1
 8001c48:	61a3      	str	r3, [r4, #24]
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	0800212c 	.word	0x0800212c
 8001c50:	08001bbd 	.word	0x08001bbd

08001c54 <__sfp>:
 8001c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <__sfp+0x70>)
 8001c58:	4607      	mov	r7, r0
 8001c5a:	681e      	ldr	r6, [r3, #0]
 8001c5c:	69b3      	ldr	r3, [r6, #24]
 8001c5e:	b913      	cbnz	r3, 8001c66 <__sfp+0x12>
 8001c60:	4630      	mov	r0, r6
 8001c62:	f7ff ffc7 	bl	8001bf4 <__sinit>
 8001c66:	3648      	adds	r6, #72	; 0x48
 8001c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	d503      	bpl.n	8001c78 <__sfp+0x24>
 8001c70:	6833      	ldr	r3, [r6, #0]
 8001c72:	b133      	cbz	r3, 8001c82 <__sfp+0x2e>
 8001c74:	6836      	ldr	r6, [r6, #0]
 8001c76:	e7f7      	b.n	8001c68 <__sfp+0x14>
 8001c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c7c:	b16d      	cbz	r5, 8001c9a <__sfp+0x46>
 8001c7e:	3468      	adds	r4, #104	; 0x68
 8001c80:	e7f4      	b.n	8001c6c <__sfp+0x18>
 8001c82:	2104      	movs	r1, #4
 8001c84:	4638      	mov	r0, r7
 8001c86:	f7ff ff9f 	bl	8001bc8 <__sfmoreglue>
 8001c8a:	6030      	str	r0, [r6, #0]
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	d1f1      	bne.n	8001c74 <__sfp+0x20>
 8001c90:	230c      	movs	r3, #12
 8001c92:	4604      	mov	r4, r0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4620      	mov	r0, r4
 8001c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <__sfp+0x74>)
 8001c9c:	6665      	str	r5, [r4, #100]	; 0x64
 8001c9e:	e9c4 5500 	strd	r5, r5, [r4]
 8001ca2:	60a5      	str	r5, [r4, #8]
 8001ca4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001ca8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001cac:	2208      	movs	r2, #8
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001cb4:	f7ff fd44 	bl	8001740 <memset>
 8001cb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001cbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001cc0:	e7e9      	b.n	8001c96 <__sfp+0x42>
 8001cc2:	bf00      	nop
 8001cc4:	0800212c 	.word	0x0800212c
 8001cc8:	ffff0001 	.word	0xffff0001

08001ccc <_fwalk_reent>:
 8001ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cd0:	4680      	mov	r8, r0
 8001cd2:	4689      	mov	r9, r1
 8001cd4:	2600      	movs	r6, #0
 8001cd6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cda:	b914      	cbnz	r4, 8001ce2 <_fwalk_reent+0x16>
 8001cdc:	4630      	mov	r0, r6
 8001cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ce2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001ce6:	3f01      	subs	r7, #1
 8001ce8:	d501      	bpl.n	8001cee <_fwalk_reent+0x22>
 8001cea:	6824      	ldr	r4, [r4, #0]
 8001cec:	e7f5      	b.n	8001cda <_fwalk_reent+0xe>
 8001cee:	89ab      	ldrh	r3, [r5, #12]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d907      	bls.n	8001d04 <_fwalk_reent+0x38>
 8001cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	d003      	beq.n	8001d04 <_fwalk_reent+0x38>
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	4640      	mov	r0, r8
 8001d00:	47c8      	blx	r9
 8001d02:	4306      	orrs	r6, r0
 8001d04:	3568      	adds	r5, #104	; 0x68
 8001d06:	e7ee      	b.n	8001ce6 <_fwalk_reent+0x1a>

08001d08 <__swhatbuf_r>:
 8001d08:	b570      	push	{r4, r5, r6, lr}
 8001d0a:	460e      	mov	r6, r1
 8001d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d10:	b096      	sub	sp, #88	; 0x58
 8001d12:	2900      	cmp	r1, #0
 8001d14:	4614      	mov	r4, r2
 8001d16:	461d      	mov	r5, r3
 8001d18:	da07      	bge.n	8001d2a <__swhatbuf_r+0x22>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	602b      	str	r3, [r5, #0]
 8001d1e:	89b3      	ldrh	r3, [r6, #12]
 8001d20:	061a      	lsls	r2, r3, #24
 8001d22:	d410      	bmi.n	8001d46 <__swhatbuf_r+0x3e>
 8001d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d28:	e00e      	b.n	8001d48 <__swhatbuf_r+0x40>
 8001d2a:	466a      	mov	r2, sp
 8001d2c:	f000 f96c 	bl	8002008 <_fstat_r>
 8001d30:	2800      	cmp	r0, #0
 8001d32:	dbf2      	blt.n	8001d1a <__swhatbuf_r+0x12>
 8001d34:	9a01      	ldr	r2, [sp, #4]
 8001d36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d3e:	425a      	negs	r2, r3
 8001d40:	415a      	adcs	r2, r3
 8001d42:	602a      	str	r2, [r5, #0]
 8001d44:	e7ee      	b.n	8001d24 <__swhatbuf_r+0x1c>
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	2000      	movs	r0, #0
 8001d4a:	6023      	str	r3, [r4, #0]
 8001d4c:	b016      	add	sp, #88	; 0x58
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}

08001d50 <__smakebuf_r>:
 8001d50:	898b      	ldrh	r3, [r1, #12]
 8001d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d54:	079d      	lsls	r5, r3, #30
 8001d56:	4606      	mov	r6, r0
 8001d58:	460c      	mov	r4, r1
 8001d5a:	d507      	bpl.n	8001d6c <__smakebuf_r+0x1c>
 8001d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d60:	6023      	str	r3, [r4, #0]
 8001d62:	6123      	str	r3, [r4, #16]
 8001d64:	2301      	movs	r3, #1
 8001d66:	6163      	str	r3, [r4, #20]
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd70      	pop	{r4, r5, r6, pc}
 8001d6c:	ab01      	add	r3, sp, #4
 8001d6e:	466a      	mov	r2, sp
 8001d70:	f7ff ffca 	bl	8001d08 <__swhatbuf_r>
 8001d74:	9900      	ldr	r1, [sp, #0]
 8001d76:	4605      	mov	r5, r0
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f000 f875 	bl	8001e68 <_malloc_r>
 8001d7e:	b948      	cbnz	r0, 8001d94 <__smakebuf_r+0x44>
 8001d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d84:	059a      	lsls	r2, r3, #22
 8001d86:	d4ef      	bmi.n	8001d68 <__smakebuf_r+0x18>
 8001d88:	f023 0303 	bic.w	r3, r3, #3
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	81a3      	strh	r3, [r4, #12]
 8001d92:	e7e3      	b.n	8001d5c <__smakebuf_r+0xc>
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <__smakebuf_r+0x7c>)
 8001d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d98:	89a3      	ldrh	r3, [r4, #12]
 8001d9a:	6020      	str	r0, [r4, #0]
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	81a3      	strh	r3, [r4, #12]
 8001da2:	9b00      	ldr	r3, [sp, #0]
 8001da4:	6120      	str	r0, [r4, #16]
 8001da6:	6163      	str	r3, [r4, #20]
 8001da8:	9b01      	ldr	r3, [sp, #4]
 8001daa:	b15b      	cbz	r3, 8001dc4 <__smakebuf_r+0x74>
 8001dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001db0:	4630      	mov	r0, r6
 8001db2:	f000 f93b 	bl	800202c <_isatty_r>
 8001db6:	b128      	cbz	r0, 8001dc4 <__smakebuf_r+0x74>
 8001db8:	89a3      	ldrh	r3, [r4, #12]
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	81a3      	strh	r3, [r4, #12]
 8001dc4:	89a3      	ldrh	r3, [r4, #12]
 8001dc6:	431d      	orrs	r5, r3
 8001dc8:	81a5      	strh	r5, [r4, #12]
 8001dca:	e7cd      	b.n	8001d68 <__smakebuf_r+0x18>
 8001dcc:	08001bbd 	.word	0x08001bbd

08001dd0 <_free_r>:
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	4605      	mov	r5, r0
 8001dd4:	2900      	cmp	r1, #0
 8001dd6:	d043      	beq.n	8001e60 <_free_r+0x90>
 8001dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ddc:	1f0c      	subs	r4, r1, #4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bfb8      	it	lt
 8001de2:	18e4      	addlt	r4, r4, r3
 8001de4:	f000 f944 	bl	8002070 <__malloc_lock>
 8001de8:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <_free_r+0x94>)
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	4610      	mov	r0, r2
 8001dee:	b933      	cbnz	r3, 8001dfe <_free_r+0x2e>
 8001df0:	6063      	str	r3, [r4, #4]
 8001df2:	6014      	str	r4, [r2, #0]
 8001df4:	4628      	mov	r0, r5
 8001df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dfa:	f000 b93a 	b.w	8002072 <__malloc_unlock>
 8001dfe:	42a3      	cmp	r3, r4
 8001e00:	d90b      	bls.n	8001e1a <_free_r+0x4a>
 8001e02:	6821      	ldr	r1, [r4, #0]
 8001e04:	1862      	adds	r2, r4, r1
 8001e06:	4293      	cmp	r3, r2
 8001e08:	bf01      	itttt	eq
 8001e0a:	681a      	ldreq	r2, [r3, #0]
 8001e0c:	685b      	ldreq	r3, [r3, #4]
 8001e0e:	1852      	addeq	r2, r2, r1
 8001e10:	6022      	streq	r2, [r4, #0]
 8001e12:	6063      	str	r3, [r4, #4]
 8001e14:	6004      	str	r4, [r0, #0]
 8001e16:	e7ed      	b.n	8001df4 <_free_r+0x24>
 8001e18:	4613      	mov	r3, r2
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	b10a      	cbz	r2, 8001e22 <_free_r+0x52>
 8001e1e:	42a2      	cmp	r2, r4
 8001e20:	d9fa      	bls.n	8001e18 <_free_r+0x48>
 8001e22:	6819      	ldr	r1, [r3, #0]
 8001e24:	1858      	adds	r0, r3, r1
 8001e26:	42a0      	cmp	r0, r4
 8001e28:	d10b      	bne.n	8001e42 <_free_r+0x72>
 8001e2a:	6820      	ldr	r0, [r4, #0]
 8001e2c:	4401      	add	r1, r0
 8001e2e:	1858      	adds	r0, r3, r1
 8001e30:	4282      	cmp	r2, r0
 8001e32:	6019      	str	r1, [r3, #0]
 8001e34:	d1de      	bne.n	8001df4 <_free_r+0x24>
 8001e36:	6810      	ldr	r0, [r2, #0]
 8001e38:	6852      	ldr	r2, [r2, #4]
 8001e3a:	4401      	add	r1, r0
 8001e3c:	6019      	str	r1, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	e7d8      	b.n	8001df4 <_free_r+0x24>
 8001e42:	d902      	bls.n	8001e4a <_free_r+0x7a>
 8001e44:	230c      	movs	r3, #12
 8001e46:	602b      	str	r3, [r5, #0]
 8001e48:	e7d4      	b.n	8001df4 <_free_r+0x24>
 8001e4a:	6820      	ldr	r0, [r4, #0]
 8001e4c:	1821      	adds	r1, r4, r0
 8001e4e:	428a      	cmp	r2, r1
 8001e50:	bf01      	itttt	eq
 8001e52:	6811      	ldreq	r1, [r2, #0]
 8001e54:	6852      	ldreq	r2, [r2, #4]
 8001e56:	1809      	addeq	r1, r1, r0
 8001e58:	6021      	streq	r1, [r4, #0]
 8001e5a:	6062      	str	r2, [r4, #4]
 8001e5c:	605c      	str	r4, [r3, #4]
 8001e5e:	e7c9      	b.n	8001df4 <_free_r+0x24>
 8001e60:	bd38      	pop	{r3, r4, r5, pc}
 8001e62:	bf00      	nop
 8001e64:	20000090 	.word	0x20000090

08001e68 <_malloc_r>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	1ccd      	adds	r5, r1, #3
 8001e6c:	f025 0503 	bic.w	r5, r5, #3
 8001e70:	3508      	adds	r5, #8
 8001e72:	2d0c      	cmp	r5, #12
 8001e74:	bf38      	it	cc
 8001e76:	250c      	movcc	r5, #12
 8001e78:	2d00      	cmp	r5, #0
 8001e7a:	4606      	mov	r6, r0
 8001e7c:	db01      	blt.n	8001e82 <_malloc_r+0x1a>
 8001e7e:	42a9      	cmp	r1, r5
 8001e80:	d903      	bls.n	8001e8a <_malloc_r+0x22>
 8001e82:	230c      	movs	r3, #12
 8001e84:	6033      	str	r3, [r6, #0]
 8001e86:	2000      	movs	r0, #0
 8001e88:	bd70      	pop	{r4, r5, r6, pc}
 8001e8a:	f000 f8f1 	bl	8002070 <__malloc_lock>
 8001e8e:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <_malloc_r+0xac>)
 8001e90:	6814      	ldr	r4, [r2, #0]
 8001e92:	4621      	mov	r1, r4
 8001e94:	b991      	cbnz	r1, 8001ebc <_malloc_r+0x54>
 8001e96:	4c20      	ldr	r4, [pc, #128]	; (8001f18 <_malloc_r+0xb0>)
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	b91b      	cbnz	r3, 8001ea4 <_malloc_r+0x3c>
 8001e9c:	4630      	mov	r0, r6
 8001e9e:	f000 f83d 	bl	8001f1c <_sbrk_r>
 8001ea2:	6020      	str	r0, [r4, #0]
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	4630      	mov	r0, r6
 8001ea8:	f000 f838 	bl	8001f1c <_sbrk_r>
 8001eac:	1c43      	adds	r3, r0, #1
 8001eae:	d124      	bne.n	8001efa <_malloc_r+0x92>
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	6033      	str	r3, [r6, #0]
 8001eb6:	f000 f8dc 	bl	8002072 <__malloc_unlock>
 8001eba:	e7e4      	b.n	8001e86 <_malloc_r+0x1e>
 8001ebc:	680b      	ldr	r3, [r1, #0]
 8001ebe:	1b5b      	subs	r3, r3, r5
 8001ec0:	d418      	bmi.n	8001ef4 <_malloc_r+0x8c>
 8001ec2:	2b0b      	cmp	r3, #11
 8001ec4:	d90f      	bls.n	8001ee6 <_malloc_r+0x7e>
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	18cc      	adds	r4, r1, r3
 8001eca:	50cd      	str	r5, [r1, r3]
 8001ecc:	4630      	mov	r0, r6
 8001ece:	f000 f8d0 	bl	8002072 <__malloc_unlock>
 8001ed2:	f104 000b 	add.w	r0, r4, #11
 8001ed6:	1d23      	adds	r3, r4, #4
 8001ed8:	f020 0007 	bic.w	r0, r0, #7
 8001edc:	1ac3      	subs	r3, r0, r3
 8001ede:	d0d3      	beq.n	8001e88 <_malloc_r+0x20>
 8001ee0:	425a      	negs	r2, r3
 8001ee2:	50e2      	str	r2, [r4, r3]
 8001ee4:	e7d0      	b.n	8001e88 <_malloc_r+0x20>
 8001ee6:	684b      	ldr	r3, [r1, #4]
 8001ee8:	428c      	cmp	r4, r1
 8001eea:	bf16      	itet	ne
 8001eec:	6063      	strne	r3, [r4, #4]
 8001eee:	6013      	streq	r3, [r2, #0]
 8001ef0:	460c      	movne	r4, r1
 8001ef2:	e7eb      	b.n	8001ecc <_malloc_r+0x64>
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	6849      	ldr	r1, [r1, #4]
 8001ef8:	e7cc      	b.n	8001e94 <_malloc_r+0x2c>
 8001efa:	1cc4      	adds	r4, r0, #3
 8001efc:	f024 0403 	bic.w	r4, r4, #3
 8001f00:	42a0      	cmp	r0, r4
 8001f02:	d005      	beq.n	8001f10 <_malloc_r+0xa8>
 8001f04:	1a21      	subs	r1, r4, r0
 8001f06:	4630      	mov	r0, r6
 8001f08:	f000 f808 	bl	8001f1c <_sbrk_r>
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d0cf      	beq.n	8001eb0 <_malloc_r+0x48>
 8001f10:	6025      	str	r5, [r4, #0]
 8001f12:	e7db      	b.n	8001ecc <_malloc_r+0x64>
 8001f14:	20000090 	.word	0x20000090
 8001f18:	20000094 	.word	0x20000094

08001f1c <_sbrk_r>:
 8001f1c:	b538      	push	{r3, r4, r5, lr}
 8001f1e:	2300      	movs	r3, #0
 8001f20:	4c05      	ldr	r4, [pc, #20]	; (8001f38 <_sbrk_r+0x1c>)
 8001f22:	4605      	mov	r5, r0
 8001f24:	4608      	mov	r0, r1
 8001f26:	6023      	str	r3, [r4, #0]
 8001f28:	f7fe fc90 	bl	800084c <_sbrk>
 8001f2c:	1c43      	adds	r3, r0, #1
 8001f2e:	d102      	bne.n	8001f36 <_sbrk_r+0x1a>
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	b103      	cbz	r3, 8001f36 <_sbrk_r+0x1a>
 8001f34:	602b      	str	r3, [r5, #0]
 8001f36:	bd38      	pop	{r3, r4, r5, pc}
 8001f38:	2000009c 	.word	0x2000009c

08001f3c <__sread>:
 8001f3c:	b510      	push	{r4, lr}
 8001f3e:	460c      	mov	r4, r1
 8001f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f44:	f000 f896 	bl	8002074 <_read_r>
 8001f48:	2800      	cmp	r0, #0
 8001f4a:	bfab      	itete	ge
 8001f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8001f50:	181b      	addge	r3, r3, r0
 8001f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f56:	bfac      	ite	ge
 8001f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f5a:	81a3      	strhlt	r3, [r4, #12]
 8001f5c:	bd10      	pop	{r4, pc}

08001f5e <__swrite>:
 8001f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f62:	461f      	mov	r7, r3
 8001f64:	898b      	ldrh	r3, [r1, #12]
 8001f66:	4605      	mov	r5, r0
 8001f68:	05db      	lsls	r3, r3, #23
 8001f6a:	460c      	mov	r4, r1
 8001f6c:	4616      	mov	r6, r2
 8001f6e:	d505      	bpl.n	8001f7c <__swrite+0x1e>
 8001f70:	2302      	movs	r3, #2
 8001f72:	2200      	movs	r2, #0
 8001f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f78:	f000 f868 	bl	800204c <_lseek_r>
 8001f7c:	89a3      	ldrh	r3, [r4, #12]
 8001f7e:	4632      	mov	r2, r6
 8001f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f84:	81a3      	strh	r3, [r4, #12]
 8001f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f92:	f000 b817 	b.w	8001fc4 <_write_r>

08001f96 <__sseek>:
 8001f96:	b510      	push	{r4, lr}
 8001f98:	460c      	mov	r4, r1
 8001f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f9e:	f000 f855 	bl	800204c <_lseek_r>
 8001fa2:	1c43      	adds	r3, r0, #1
 8001fa4:	89a3      	ldrh	r3, [r4, #12]
 8001fa6:	bf15      	itete	ne
 8001fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001fb2:	81a3      	strheq	r3, [r4, #12]
 8001fb4:	bf18      	it	ne
 8001fb6:	81a3      	strhne	r3, [r4, #12]
 8001fb8:	bd10      	pop	{r4, pc}

08001fba <__sclose>:
 8001fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fbe:	f000 b813 	b.w	8001fe8 <_close_r>
	...

08001fc4 <_write_r>:
 8001fc4:	b538      	push	{r3, r4, r5, lr}
 8001fc6:	4605      	mov	r5, r0
 8001fc8:	4608      	mov	r0, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	2200      	movs	r2, #0
 8001fce:	4c05      	ldr	r4, [pc, #20]	; (8001fe4 <_write_r+0x20>)
 8001fd0:	6022      	str	r2, [r4, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f7fe fbee 	bl	80007b4 <_write>
 8001fd8:	1c43      	adds	r3, r0, #1
 8001fda:	d102      	bne.n	8001fe2 <_write_r+0x1e>
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	b103      	cbz	r3, 8001fe2 <_write_r+0x1e>
 8001fe0:	602b      	str	r3, [r5, #0]
 8001fe2:	bd38      	pop	{r3, r4, r5, pc}
 8001fe4:	2000009c 	.word	0x2000009c

08001fe8 <_close_r>:
 8001fe8:	b538      	push	{r3, r4, r5, lr}
 8001fea:	2300      	movs	r3, #0
 8001fec:	4c05      	ldr	r4, [pc, #20]	; (8002004 <_close_r+0x1c>)
 8001fee:	4605      	mov	r5, r0
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	6023      	str	r3, [r4, #0]
 8001ff4:	f7fe fbfa 	bl	80007ec <_close>
 8001ff8:	1c43      	adds	r3, r0, #1
 8001ffa:	d102      	bne.n	8002002 <_close_r+0x1a>
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	b103      	cbz	r3, 8002002 <_close_r+0x1a>
 8002000:	602b      	str	r3, [r5, #0]
 8002002:	bd38      	pop	{r3, r4, r5, pc}
 8002004:	2000009c 	.word	0x2000009c

08002008 <_fstat_r>:
 8002008:	b538      	push	{r3, r4, r5, lr}
 800200a:	2300      	movs	r3, #0
 800200c:	4c06      	ldr	r4, [pc, #24]	; (8002028 <_fstat_r+0x20>)
 800200e:	4605      	mov	r5, r0
 8002010:	4608      	mov	r0, r1
 8002012:	4611      	mov	r1, r2
 8002014:	6023      	str	r3, [r4, #0]
 8002016:	f7fe fbf4 	bl	8000802 <_fstat>
 800201a:	1c43      	adds	r3, r0, #1
 800201c:	d102      	bne.n	8002024 <_fstat_r+0x1c>
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	b103      	cbz	r3, 8002024 <_fstat_r+0x1c>
 8002022:	602b      	str	r3, [r5, #0]
 8002024:	bd38      	pop	{r3, r4, r5, pc}
 8002026:	bf00      	nop
 8002028:	2000009c 	.word	0x2000009c

0800202c <_isatty_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	2300      	movs	r3, #0
 8002030:	4c05      	ldr	r4, [pc, #20]	; (8002048 <_isatty_r+0x1c>)
 8002032:	4605      	mov	r5, r0
 8002034:	4608      	mov	r0, r1
 8002036:	6023      	str	r3, [r4, #0]
 8002038:	f7fe fbf2 	bl	8000820 <_isatty>
 800203c:	1c43      	adds	r3, r0, #1
 800203e:	d102      	bne.n	8002046 <_isatty_r+0x1a>
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	b103      	cbz	r3, 8002046 <_isatty_r+0x1a>
 8002044:	602b      	str	r3, [r5, #0]
 8002046:	bd38      	pop	{r3, r4, r5, pc}
 8002048:	2000009c 	.word	0x2000009c

0800204c <_lseek_r>:
 800204c:	b538      	push	{r3, r4, r5, lr}
 800204e:	4605      	mov	r5, r0
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	2200      	movs	r2, #0
 8002056:	4c05      	ldr	r4, [pc, #20]	; (800206c <_lseek_r+0x20>)
 8002058:	6022      	str	r2, [r4, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	f7fe fbea 	bl	8000834 <_lseek>
 8002060:	1c43      	adds	r3, r0, #1
 8002062:	d102      	bne.n	800206a <_lseek_r+0x1e>
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	b103      	cbz	r3, 800206a <_lseek_r+0x1e>
 8002068:	602b      	str	r3, [r5, #0]
 800206a:	bd38      	pop	{r3, r4, r5, pc}
 800206c:	2000009c 	.word	0x2000009c

08002070 <__malloc_lock>:
 8002070:	4770      	bx	lr

08002072 <__malloc_unlock>:
 8002072:	4770      	bx	lr

08002074 <_read_r>:
 8002074:	b538      	push	{r3, r4, r5, lr}
 8002076:	4605      	mov	r5, r0
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
 800207c:	2200      	movs	r2, #0
 800207e:	4c05      	ldr	r4, [pc, #20]	; (8002094 <_read_r+0x20>)
 8002080:	6022      	str	r2, [r4, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	f7fe fb79 	bl	800077a <_read>
 8002088:	1c43      	adds	r3, r0, #1
 800208a:	d102      	bne.n	8002092 <_read_r+0x1e>
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	b103      	cbz	r3, 8002092 <_read_r+0x1e>
 8002090:	602b      	str	r3, [r5, #0]
 8002092:	bd38      	pop	{r3, r4, r5, pc}
 8002094:	2000009c 	.word	0x2000009c

08002098 <_init>:
 8002098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209a:	bf00      	nop
 800209c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209e:	bc08      	pop	{r3}
 80020a0:	469e      	mov	lr, r3
 80020a2:	4770      	bx	lr

080020a4 <_fini>:
 80020a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a6:	bf00      	nop
 80020a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020aa:	bc08      	pop	{r3}
 80020ac:	469e      	mov	lr, r3
 80020ae:	4770      	bx	lr
