
projeto_estacionamento_stm32f103c6_sensor_pir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce0  08003ce0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ce0  08003ce0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ce0  08003ce0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08003d58  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003d58  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fcb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001838  00000000  00000000  00028064  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000770  00000000  00000000  000298a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000698  00000000  00000000  0002a010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017617  00000000  00000000  0002a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007134  00000000  00000000  00041cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084f0a  00000000  00000000  00048df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdcfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002274  00000000  00000000  000cdd78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b64 	.word	0x08003b64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003b64 	.word	0x08003b64

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_frsub>:
 8000a5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	e002      	b.n	8000a68 <__addsf3>
 8000a62:	bf00      	nop

08000a64 <__aeabi_fsub>:
 8000a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a68 <__addsf3>:
 8000a68:	0042      	lsls	r2, r0, #1
 8000a6a:	bf1f      	itttt	ne
 8000a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a70:	ea92 0f03 	teqne	r2, r3
 8000a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7c:	d06a      	beq.n	8000b54 <__addsf3+0xec>
 8000a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a86:	bfc1      	itttt	gt
 8000a88:	18d2      	addgt	r2, r2, r3
 8000a8a:	4041      	eorgt	r1, r0
 8000a8c:	4048      	eorgt	r0, r1
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	bfb8      	it	lt
 8000a92:	425b      	neglt	r3, r3
 8000a94:	2b19      	cmp	r3, #25
 8000a96:	bf88      	it	hi
 8000a98:	4770      	bxhi	lr
 8000a9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ab2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4249      	negne	r1, r1
 8000aba:	ea92 0f03 	teq	r2, r3
 8000abe:	d03f      	beq.n	8000b40 <__addsf3+0xd8>
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac8:	eb10 000c 	adds.w	r0, r0, ip
 8000acc:	f1c3 0320 	rsb	r3, r3, #32
 8000ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__addsf3+0x78>
 8000ada:	4249      	negs	r1, r1
 8000adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ae4:	d313      	bcc.n	8000b0e <__addsf3+0xa6>
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aea:	d306      	bcc.n	8000afa <__addsf3+0x92>
 8000aec:	0840      	lsrs	r0, r0, #1
 8000aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af2:	f102 0201 	add.w	r2, r2, #1
 8000af6:	2afe      	cmp	r2, #254	; 0xfe
 8000af8:	d251      	bcs.n	8000b9e <__addsf3+0x136>
 8000afa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	ea40 0003 	orr.w	r0, r0, r3
 8000b0c:	4770      	bx	lr
 8000b0e:	0049      	lsls	r1, r1, #1
 8000b10:	eb40 0000 	adc.w	r0, r0, r0
 8000b14:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b18:	f1a2 0201 	sub.w	r2, r2, #1
 8000b1c:	d1ed      	bne.n	8000afa <__addsf3+0x92>
 8000b1e:	fab0 fc80 	clz	ip, r0
 8000b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b26:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b2e:	bfaa      	itet	ge
 8000b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b34:	4252      	neglt	r2, r2
 8000b36:	4318      	orrge	r0, r3
 8000b38:	bfbc      	itt	lt
 8000b3a:	40d0      	lsrlt	r0, r2
 8000b3c:	4318      	orrlt	r0, r3
 8000b3e:	4770      	bx	lr
 8000b40:	f092 0f00 	teq	r2, #0
 8000b44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b48:	bf06      	itte	eq
 8000b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b4e:	3201      	addeq	r2, #1
 8000b50:	3b01      	subne	r3, #1
 8000b52:	e7b5      	b.n	8000ac0 <__addsf3+0x58>
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d021      	beq.n	8000ba8 <__addsf3+0x140>
 8000b64:	ea92 0f03 	teq	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__addsf3+0x10c>
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	bf08      	it	eq
 8000b70:	4608      	moveq	r0, r1
 8000b72:	4770      	bx	lr
 8000b74:	ea90 0f01 	teq	r0, r1
 8000b78:	bf1c      	itt	ne
 8000b7a:	2000      	movne	r0, #0
 8000b7c:	4770      	bxne	lr
 8000b7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b82:	d104      	bne.n	8000b8e <__addsf3+0x126>
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	bf28      	it	cs
 8000b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	4770      	bx	lr
 8000b8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b92:	bf3c      	itt	cc
 8000b94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bxcc	lr
 8000b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	4770      	bx	lr
 8000ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bac:	bf16      	itet	ne
 8000bae:	4608      	movne	r0, r1
 8000bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb4:	4601      	movne	r1, r0
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	bf06      	itte	eq
 8000bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bbe:	ea90 0f01 	teqeq	r0, r1
 8000bc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ui2f>:
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e004      	b.n	8000bd8 <__aeabi_i2f+0x8>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_i2f>:
 8000bd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	bf48      	it	mi
 8000bd6:	4240      	negmi	r0, r0
 8000bd8:	ea5f 0c00 	movs.w	ip, r0
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000be4:	4601      	mov	r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	e01c      	b.n	8000c26 <__aeabi_l2f+0x2a>

08000bec <__aeabi_ul2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <__aeabi_l2f+0x14>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_l2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c08:	d502      	bpl.n	8000c10 <__aeabi_l2f+0x14>
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	ea5f 0c01 	movs.w	ip, r1
 8000c14:	bf02      	ittt	eq
 8000c16:	4684      	moveq	ip, r0
 8000c18:	4601      	moveq	r1, r0
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c20:	bf08      	it	eq
 8000c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c2a:	fabc f28c 	clz	r2, ip
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c34:	db10      	blt.n	8000c58 <__aeabi_l2f+0x5c>
 8000c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f102 0220 	add.w	r2, r2, #32
 8000c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c68:	fa21 f202 	lsr.w	r2, r1, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c76:	4770      	bx	lr

08000c78 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000c86:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000c8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000c8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000c92:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c96:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000c98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c9a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f80e 	bl	8000cce <Lcd_init>

	return lcd;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	f107 0410 	add.w	r4, r7, #16
 8000cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cc2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bdb0      	pop	{r4, r5, r7, pc}

08000cce <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7d9b      	ldrb	r3, [r3, #22]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10c      	bne.n	8000cf8 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000cde:	2133      	movs	r1, #51	; 0x33
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 f861 	bl	8000da8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000ce6:	2132      	movs	r1, #50	; 0x32
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f000 f85d 	bl	8000da8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000cee:	2128      	movs	r1, #40	; 0x28
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f859 	bl	8000da8 <lcd_write_command>
 8000cf6:	e003      	b.n	8000d00 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000cf8:	2138      	movs	r1, #56	; 0x38
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f854 	bl	8000da8 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000d00:	2101      	movs	r1, #1
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f850 	bl	8000da8 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000d08:	210c      	movs	r1, #12
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f84c 	bl	8000da8 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000d10:	2106      	movs	r1, #6
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f848 	bl	8000da8 <lcd_write_command>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e00a      	b.n	8000d46 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f862 	bl	8000e04 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	3301      	adds	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	7bfc      	ldrb	r4, [r7, #15]
 8000d48:	6838      	ldr	r0, [r7, #0]
 8000d4a:	f7ff fa01 	bl	8000150 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	429c      	cmp	r4, r3
 8000d52:	d3ed      	bcc.n	8000d30 <Lcd_string+0x10>
	}
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd90      	pop	{r4, r7, pc}

08000d5c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <Lcd_cursor+0x30>)
 8000d70:	5cd2      	ldrb	r2, [r2, r3]
 8000d72:	78bb      	ldrb	r3, [r7, #2]
 8000d74:	4413      	add	r3, r2
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	3b80      	subs	r3, #128	; 0x80
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f812 	bl	8000da8 <lcd_write_command>
	#endif
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	08003c6c 	.word	0x08003c6c

08000d90 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000d98:	2101      	movs	r1, #1
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f804 	bl	8000da8 <lcd_write_command>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6898      	ldr	r0, [r3, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	899b      	ldrh	r3, [r3, #12]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f001 fb91 	bl	80024e6 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7d9b      	ldrb	r3, [r3, #22]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d111      	bne.n	8000df0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f842 	bl	8000e60 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2204      	movs	r2, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f839 	bl	8000e60 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000dee:	e005      	b.n	8000dfc <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	2208      	movs	r2, #8
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f832 	bl	8000e60 <lcd_write>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6898      	ldr	r0, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	899b      	ldrh	r3, [r3, #12]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f001 fb63 	bl	80024e6 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7d9b      	ldrb	r3, [r3, #22]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d111      	bne.n	8000e4c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	091b      	lsrs	r3, r3, #4
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f814 	bl	8000e60 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2204      	movs	r2, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f80b 	bl	8000e60 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000e4a:	e005      	b.n	8000e58 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4619      	mov	r1, r3
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f804 	bl	8000e60 <lcd_write>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e019      	b.n	8000eaa <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	6818      	ldr	r0, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	8819      	ldrh	r1, [r3, #0]
 8000e8e:	78fa      	ldrb	r2, [r7, #3]
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	fa42 f303 	asr.w	r3, r2, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f001 fb21 	bl	80024e6 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	78bb      	ldrb	r3, [r7, #2]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d3e1      	bcc.n	8000e76 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6918      	ldr	r0, [r3, #16]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	8a9b      	ldrh	r3, [r3, #20]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f001 fb12 	bl	80024e6 <HAL_GPIO_WritePin>
	DELAY(1);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f000 fd8a 	bl	80019dc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6918      	ldr	r0, [r3, #16]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	8a9b      	ldrh	r3, [r3, #20]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f001 fb07 	bl	80024e6 <HAL_GPIO_WritePin>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b095      	sub	sp, #84	; 0x54
 8000ee4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fd17 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 fab9 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 fb6f 	bl	80015d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ef2:	f000 fb05 	bl	8001500 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ef6:	f000 fb41 	bl	800157c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //INICIALIZANDO A VARIÁVEL COM O NÚMERO DE VAGAS
  int vagas = 5;
 8000efa:	2305      	movs	r3, #5
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c

  //INICIALIZANDO O ACD
  HAL_ADC_Start(&hadc1);
 8000efe:	48a2      	ldr	r0, [pc, #648]	; (8001188 <main+0x2a8>)
 8000f00:	f000 fe66 	bl	8001bd0 <HAL_ADC_Start>

  //CONFIGURADO AS GPIOs  -- GPIOA RENOMEADAS COM AS IDENTIFICAÇÕES DO LCD
  Lcd_PortType ports [] = {
 8000f04:	4ba1      	ldr	r3, [pc, #644]	; (800118c <main+0x2ac>)
 8000f06:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000f0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		D6_GPIO_Port,
		D7_GPIO_Port
  };

  //CONFIGURADO OS PINOS DO LCD
  Lcd_PinType pins [] = {
 8000f10:	4a9f      	ldr	r2, [pc, #636]	; (8001190 <main+0x2b0>)
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f1a:	e883 0003 	stmia.w	r3, {r0, r1}
		D6_Pin,
		D7_Pin
  };

  //CONFIGURADO OS PINOS DO LCD COM AS GPIOs
  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000f1e:	f107 000c 	add.w	r0, r7, #12
 8000f22:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f26:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	9303      	str	r3, [sp, #12]
 8000f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	4b97      	ldr	r3, [pc, #604]	; (8001194 <main+0x2b4>)
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	4b95      	ldr	r3, [pc, #596]	; (8001194 <main+0x2b4>)
 8000f40:	f7ff fe9a 	bl	8000c78 <Lcd_create>

  //PARA IMPRIMIR NO LCD - PASSAR O ENDEREÇO DO OBJETO E A POSIÇÃO DO CURSOR
  Lcd_cursor(&lcd, 0, 0);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff05 	bl	8000d5c <Lcd_cursor>
  Lcd_string(&lcd,"ESTACIONAMENTO");
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	4990      	ldr	r1, [pc, #576]	; (8001198 <main+0x2b8>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fee1 	bl	8000d20 <Lcd_string>
  Lcd_cursor(&lcd, 1, 0);
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2200      	movs	r2, #0
 8000f64:	2101      	movs	r1, #1
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fef8 	bl	8000d5c <Lcd_cursor>
  Lcd_string(&lcd,"DEDEL");
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	498a      	ldr	r1, [pc, #552]	; (800119c <main+0x2bc>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fed4 	bl	8000d20 <Lcd_string>
  HAL_Delay(50);
 8000f78:	2032      	movs	r0, #50	; 0x32
 8000f7a:	f000 fd2f 	bl	80019dc <HAL_Delay>
  Lcd_clear(&lcd);
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff04 	bl	8000d90 <Lcd_clear>
  HAL_Delay(50);
 8000f88:	2032      	movs	r0, #50	; 0x32
 8000f8a:	f000 fd27 	bl	80019dc <HAL_Delay>

  Lcd_cursor(&lcd, 0, 0);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fee0 	bl	8000d5c <Lcd_cursor>
  Lcd_string(&lcd,"SEJA");
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	497f      	ldr	r1, [pc, #508]	; (80011a0 <main+0x2c0>)
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff febc 	bl	8000d20 <Lcd_string>
  Lcd_cursor(&lcd, 1, 0);
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fed3 	bl	8000d5c <Lcd_cursor>
  Lcd_string(&lcd,"BEM-VINDO");
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	497a      	ldr	r1, [pc, #488]	; (80011a4 <main+0x2c4>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff feaf 	bl	8000d20 <Lcd_string>
  HAL_Delay(50);
 8000fc2:	2032      	movs	r0, #50	; 0x32
 8000fc4:	f000 fd0a 	bl	80019dc <HAL_Delay>
  Lcd_clear(&lcd);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fedf 	bl	8000d90 <Lcd_clear>
  HAL_Delay(50);
 8000fd2:	2032      	movs	r0, #50	; 0x32
 8000fd4:	f000 fd02 	bl	80019dc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(((float)HAL_ADC_GetValue(&hadc1)/8.215)<=30){
 8000fd8:	486b      	ldr	r0, [pc, #428]	; (8001188 <main+0x2a8>)
 8000fda:	f000 fea7 	bl	8001d2c <HAL_ADC_GetValue>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fdf1 	bl	8000bc8 <__aeabi_ui2f>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa1d 	bl	8000428 <__aeabi_f2d>
 8000fee:	a364      	add	r3, pc, #400	; (adr r3, 8001180 <main+0x2a0>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fb9a 	bl	800072c <__aeabi_ddiv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	4621      	mov	r1, r4
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <main+0x2c8>)
 8001006:	f7ff fce3 	bl	80009d0 <__aeabi_dcmple>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 81dc 	beq.w	80013ca <main+0x4ea>
		  if(vagas!=0){
 8001012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 815a 	beq.w	80012ce <main+0x3ee>
			  //IMPRIMINDO O NÚMEROS DE VAGAS NO LCD
			  Lcd_cursor(&lcd, 0, 0);
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fe9a 	bl	8000d5c <Lcd_cursor>
			  Lcd_string(&lcd,"VAGAS");
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	495f      	ldr	r1, [pc, #380]	; (80011ac <main+0x2cc>)
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fe76 	bl	8000d20 <Lcd_string>
			  Lcd_cursor(&lcd, 1, 0);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fe8d 	bl	8000d5c <Lcd_cursor>
			  Lcd_string(&lcd,"DISPONIVEIS= ");
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	495a      	ldr	r1, [pc, #360]	; (80011b0 <main+0x2d0>)
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fe69 	bl	8000d20 <Lcd_string>
			  // Convertendo de inteiro para String
			  itoa(vagas, s_vagas, 10);
 800104e:	220a      	movs	r2, #10
 8001050:	4958      	ldr	r1, [pc, #352]	; (80011b4 <main+0x2d4>)
 8001052:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001054:	f002 f92c 	bl	80032b0 <itoa>
			  Lcd_cursor(&lcd, 1, 12);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	220c      	movs	r2, #12
 800105e:	2101      	movs	r1, #1
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe7b 	bl	8000d5c <Lcd_cursor>
			  Lcd_string(&lcd, s_vagas);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4952      	ldr	r1, [pc, #328]	; (80011b4 <main+0x2d4>)
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe57 	bl	8000d20 <Lcd_string>
			  HAL_Delay(100);
 8001072:	2064      	movs	r0, #100	; 0x64
 8001074:	f000 fcb2 	bl	80019dc <HAL_Delay>
			  Lcd_clear(&lcd);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fe87 	bl	8000d90 <Lcd_clear>

			  //VERIFICANDO SE OCORREU ENTRADA DE VEÍCULOS
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8001082:	2101      	movs	r1, #1
 8001084:	484c      	ldr	r0, [pc, #304]	; (80011b8 <main+0x2d8>)
 8001086:	f001 fa17 	bl	80024b8 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d031      	beq.n	80010f4 <main+0x214>
				  vagas--;
 8001090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001092:	3b01      	subs	r3, #1
 8001094:	63fb      	str	r3, [r7, #60]	; 0x3c
				  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8001096:	e00c      	b.n	80010b2 <main+0x1d2>
					 Lcd_cursor(&lcd, 0, 0);
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe5b 	bl	8000d5c <Lcd_cursor>
					 Lcd_string(&lcd,"AGUARDE");
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4944      	ldr	r1, [pc, #272]	; (80011bc <main+0x2dc>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fe37 	bl	8000d20 <Lcd_string>
				  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 80010b2:	2101      	movs	r1, #1
 80010b4:	4840      	ldr	r0, [pc, #256]	; (80011b8 <main+0x2d8>)
 80010b6:	f001 f9ff 	bl	80024b8 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1eb      	bne.n	8001098 <main+0x1b8>
				 }
				 Lcd_clear(&lcd);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fe63 	bl	8000d90 <Lcd_clear>
				 Lcd_cursor(&lcd, 0, 0);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fe42 	bl	8000d5c <Lcd_cursor>
				 Lcd_string(&lcd,"SIGA EM FRETE");
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4938      	ldr	r1, [pc, #224]	; (80011c0 <main+0x2e0>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fe1e 	bl	8000d20 <Lcd_string>
				 HAL_Delay(50);
 80010e4:	2032      	movs	r0, #50	; 0x32
 80010e6:	f000 fc79 	bl	80019dc <HAL_Delay>
				 Lcd_clear(&lcd);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe4e 	bl	8000d90 <Lcd_clear>
			  }

			  //VERIFICANDO SE OCORREU SAÍDA DE VEÍCULOS
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 80010f4:	2102      	movs	r1, #2
 80010f6:	4830      	ldr	r0, [pc, #192]	; (80011b8 <main+0x2d8>)
 80010f8:	f001 f9de 	bl	80024b8 <HAL_GPIO_ReadPin>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d079      	beq.n	80011f6 <main+0x316>
				  if(vagas<5){
 8001102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001104:	2b04      	cmp	r3, #4
 8001106:	dc61      	bgt.n	80011cc <main+0x2ec>
					vagas++;
 8001108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800110a:	3301      	adds	r3, #1
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
					while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 800110e:	e00c      	b.n	800112a <main+0x24a>
						 Lcd_cursor(&lcd, 0, 0);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fe1f 	bl	8000d5c <Lcd_cursor>
						 Lcd_string(&lcd,"AGUARDE");
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4926      	ldr	r1, [pc, #152]	; (80011bc <main+0x2dc>)
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fdfb 	bl	8000d20 <Lcd_string>
					while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 800112a:	2102      	movs	r1, #2
 800112c:	4822      	ldr	r0, [pc, #136]	; (80011b8 <main+0x2d8>)
 800112e:	f001 f9c3 	bl	80024b8 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1eb      	bne.n	8001110 <main+0x230>
					 }
					Lcd_clear(&lcd);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fe27 	bl	8000d90 <Lcd_clear>
					Lcd_cursor(&lcd, 0, 0);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fe06 	bl	8000d5c <Lcd_cursor>
					Lcd_string(&lcd,"OBRIGADO");
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	491b      	ldr	r1, [pc, #108]	; (80011c4 <main+0x2e4>)
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fde2 	bl	8000d20 <Lcd_string>
					Lcd_cursor(&lcd, 1, 0);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	2101      	movs	r1, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fdf9 	bl	8000d5c <Lcd_cursor>
					Lcd_string(&lcd,"VOLTE SEMPRE");
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4916      	ldr	r1, [pc, #88]	; (80011c8 <main+0x2e8>)
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fdd5 	bl	8000d20 <Lcd_string>
					HAL_Delay(50);
 8001176:	2032      	movs	r0, #50	; 0x32
 8001178:	f000 fc30 	bl	80019dc <HAL_Delay>
 800117c:	e036      	b.n	80011ec <main+0x30c>
 800117e:	bf00      	nop
 8001180:	7ae147ae 	.word	0x7ae147ae
 8001184:	40206e14 	.word	0x40206e14
 8001188:	200000ac 	.word	0x200000ac
 800118c:	08003c38 	.word	0x08003c38
 8001190:	08003c48 	.word	0x08003c48
 8001194:	40010800 	.word	0x40010800
 8001198:	08003b7c 	.word	0x08003b7c
 800119c:	08003b8c 	.word	0x08003b8c
 80011a0:	08003b94 	.word	0x08003b94
 80011a4:	08003b9c 	.word	0x08003b9c
 80011a8:	403e0000 	.word	0x403e0000
 80011ac:	08003ba8 	.word	0x08003ba8
 80011b0:	08003bb0 	.word	0x08003bb0
 80011b4:	20000090 	.word	0x20000090
 80011b8:	40010c00 	.word	0x40010c00
 80011bc:	08003bc0 	.word	0x08003bc0
 80011c0:	08003bc8 	.word	0x08003bc8
 80011c4:	08003bd8 	.word	0x08003bd8
 80011c8:	08003be4 	.word	0x08003be4
				  }
				  else{
					  Lcd_cursor(&lcd, 0, 0);
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fdc1 	bl	8000d5c <Lcd_cursor>
					  Lcd_string(&lcd,"DISPONIVEL");
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	498e      	ldr	r1, [pc, #568]	; (8001418 <main+0x538>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fd9d 	bl	8000d20 <Lcd_string>
					  HAL_Delay(100);
 80011e6:	2064      	movs	r0, #100	; 0x64
 80011e8:	f000 fbf8 	bl	80019dc <HAL_Delay>
				  }
				  Lcd_clear(&lcd);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fdcd 	bl	8000d90 <Lcd_clear>
			  }

			  //Utilizando função HAL para coletar o valor de ACD
			  //O sensor LM35 envia valores entre 0 e 1023
			  //Portanto realizamos a conversão para o valor em graus dividindo por 8,125
			  adc_buffer = (float)HAL_ADC_GetValue(&hadc1)/8.215;
 80011f6:	4889      	ldr	r0, [pc, #548]	; (800141c <main+0x53c>)
 80011f8:	f000 fd98 	bl	8001d2c <HAL_ADC_GetValue>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fce2 	bl	8000bc8 <__aeabi_ui2f>
 8001204:	4603      	mov	r3, r0
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f90e 	bl	8000428 <__aeabi_f2d>
 800120c:	a380      	add	r3, pc, #512	; (adr r3, 8001410 <main+0x530>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff fa8b 	bl	800072c <__aeabi_ddiv>
 8001216:	4603      	mov	r3, r0
 8001218:	460c      	mov	r4, r1
 800121a:	4618      	mov	r0, r3
 800121c:	4621      	mov	r1, r4
 800121e:	f7ff fbf5 	bl	8000a0c <__aeabi_d2iz>
 8001222:	4602      	mov	r2, r0
 8001224:	4b7e      	ldr	r3, [pc, #504]	; (8001420 <main+0x540>)
 8001226:	601a      	str	r2, [r3, #0]

			  //ENVIADO DADOS ATRAVÉS DA USART
			  uint8_t CRLFbuff[] = " C\r\n";
 8001228:	4a7e      	ldr	r2, [pc, #504]	; (8001424 <main+0x544>)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001230:	6018      	str	r0, [r3, #0]
 8001232:	3304      	adds	r3, #4
 8001234:	7019      	strb	r1, [r3, #0]
			  uint8_t Tempbuff[] = "T: ";
 8001236:	4b7c      	ldr	r3, [pc, #496]	; (8001428 <main+0x548>)
 8001238:	603b      	str	r3, [r7, #0]
			  HAL_UART_Transmit(&huart1, Tempbuff, 3, 0xFF);
 800123a:	4639      	mov	r1, r7
 800123c:	23ff      	movs	r3, #255	; 0xff
 800123e:	2203      	movs	r2, #3
 8001240:	487a      	ldr	r0, [pc, #488]	; (800142c <main+0x54c>)
 8001242:	f001 fe88 	bl	8002f56 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t*)temp, sprintf(temp, "%d",adc_buffer ), 100);
 8001246:	4b76      	ldr	r3, [pc, #472]	; (8001420 <main+0x540>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4978      	ldr	r1, [pc, #480]	; (8001430 <main+0x550>)
 800124e:	4879      	ldr	r0, [pc, #484]	; (8001434 <main+0x554>)
 8001250:	f002 f838 	bl	80032c4 <siprintf>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	2364      	movs	r3, #100	; 0x64
 800125a:	4976      	ldr	r1, [pc, #472]	; (8001434 <main+0x554>)
 800125c:	4873      	ldr	r0, [pc, #460]	; (800142c <main+0x54c>)
 800125e:	f001 fe7a 	bl	8002f56 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, CRLFbuff, 3, 0xFF);
 8001262:	1d39      	adds	r1, r7, #4
 8001264:	23ff      	movs	r3, #255	; 0xff
 8001266:	2203      	movs	r2, #3
 8001268:	4870      	ldr	r0, [pc, #448]	; (800142c <main+0x54c>)
 800126a:	f001 fe74 	bl	8002f56 <HAL_UART_Transmit>

			  //IMPRIMINDO A TEMPERATURA NO LCD
			  Lcd_cursor(&lcd, 0, 0);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fd70 	bl	8000d5c <Lcd_cursor>
			  Lcd_string(&lcd,"TEMPERATURA");
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	496d      	ldr	r1, [pc, #436]	; (8001438 <main+0x558>)
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fd4c 	bl	8000d20 <Lcd_string>
			  Lcd_cursor(&lcd, 1, 0);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	2101      	movs	r1, #1
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fd63 	bl	8000d5c <Lcd_cursor>
			  Lcd_string(&lcd,temp);
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4966      	ldr	r1, [pc, #408]	; (8001434 <main+0x554>)
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fd3f 	bl	8000d20 <Lcd_string>
			  Lcd_cursor(&lcd, 1, 2);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2202      	movs	r2, #2
 80012a8:	2101      	movs	r1, #1
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fd56 	bl	8000d5c <Lcd_cursor>
			  Lcd_string(&lcd,"C");
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4961      	ldr	r1, [pc, #388]	; (800143c <main+0x55c>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fd32 	bl	8000d20 <Lcd_string>
			  HAL_Delay(50);
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f000 fb8d 	bl	80019dc <HAL_Delay>
			  Lcd_clear(&lcd);
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fd62 	bl	8000d90 <Lcd_clear>
 80012cc:	e684      	b.n	8000fd8 <main+0xf8>
		  }
		  else{

			  //IMPRIMINDO A ESTACIONAMENTO LOTADO
			  Lcd_cursor(&lcd, 0, 0);
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fd40 	bl	8000d5c <Lcd_cursor>
			  Lcd_string(&lcd,"ESTACIONAMENTO");
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	4957      	ldr	r1, [pc, #348]	; (8001440 <main+0x560>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd1c 	bl	8000d20 <Lcd_string>
			  Lcd_cursor(&lcd, 1, 0);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	2101      	movs	r1, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fd33 	bl	8000d5c <Lcd_cursor>
			  Lcd_string(&lcd,"LOTADO");
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4952      	ldr	r1, [pc, #328]	; (8001444 <main+0x564>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fd0f 	bl	8000d20 <Lcd_string>
			  HAL_Delay(50);
 8001302:	2032      	movs	r0, #50	; 0x32
 8001304:	f000 fb6a 	bl	80019dc <HAL_Delay>
			  Lcd_clear(&lcd);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fd3f 	bl	8000d90 <Lcd_clear>

			  //VERIFICANDO SE OCORREU SAÍDA DE VEÍCULOS
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 8001312:	2102      	movs	r1, #2
 8001314:	484c      	ldr	r0, [pc, #304]	; (8001448 <main+0x568>)
 8001316:	f001 f8cf 	bl	80024b8 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	f43f ae5b 	beq.w	8000fd8 <main+0xf8>
				  if(vagas<5){
 8001322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001324:	2b04      	cmp	r3, #4
 8001326:	dc3a      	bgt.n	800139e <main+0x4be>
					vagas++;
 8001328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800132a:	3301      	adds	r3, #1
 800132c:	63fb      	str	r3, [r7, #60]	; 0x3c
					while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 800132e:	e00c      	b.n	800134a <main+0x46a>
						 Lcd_cursor(&lcd, 0, 0);
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fd0f 	bl	8000d5c <Lcd_cursor>
						 Lcd_string(&lcd,"AGUARDE");
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4942      	ldr	r1, [pc, #264]	; (800144c <main+0x56c>)
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fceb 	bl	8000d20 <Lcd_string>
					while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 800134a:	2102      	movs	r1, #2
 800134c:	483e      	ldr	r0, [pc, #248]	; (8001448 <main+0x568>)
 800134e:	f001 f8b3 	bl	80024b8 <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1eb      	bne.n	8001330 <main+0x450>
					 }
					Lcd_clear(&lcd);
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fd17 	bl	8000d90 <Lcd_clear>
					Lcd_cursor(&lcd, 0, 0);
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fcf6 	bl	8000d5c <Lcd_cursor>
					Lcd_string(&lcd,"OBRIGADO");
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4936      	ldr	r1, [pc, #216]	; (8001450 <main+0x570>)
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fcd2 	bl	8000d20 <Lcd_string>
					Lcd_cursor(&lcd, 1, 0);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fce9 	bl	8000d5c <Lcd_cursor>
					Lcd_string(&lcd,"VOLTE SEMPRE");
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4931      	ldr	r1, [pc, #196]	; (8001454 <main+0x574>)
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fcc5 	bl	8000d20 <Lcd_string>
					HAL_Delay(50);
 8001396:	2032      	movs	r0, #50	; 0x32
 8001398:	f000 fb20 	bl	80019dc <HAL_Delay>
 800139c:	e00f      	b.n	80013be <main+0x4de>
				  }
				  else{
					  Lcd_cursor(&lcd, 0, 0);
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fcd8 	bl	8000d5c <Lcd_cursor>
					  Lcd_string(&lcd,"DISPONIVEL");
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	4919      	ldr	r1, [pc, #100]	; (8001418 <main+0x538>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fcb4 	bl	8000d20 <Lcd_string>
					  HAL_Delay(100);
 80013b8:	2064      	movs	r0, #100	; 0x64
 80013ba:	f000 fb0f 	bl	80019dc <HAL_Delay>
				  }
				  Lcd_clear(&lcd);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fce4 	bl	8000d90 <Lcd_clear>
 80013c8:	e606      	b.n	8000fd8 <main+0xf8>

		  }
	  }
	  else{
		  //IMPRIMINDO A INCENDIO
		  Lcd_cursor(&lcd, 0, 0);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fcc2 	bl	8000d5c <Lcd_cursor>
		  Lcd_string(&lcd,"INCENDIO");
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	491e      	ldr	r1, [pc, #120]	; (8001458 <main+0x578>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fc9e 	bl	8000d20 <Lcd_string>
		  Lcd_cursor(&lcd, 1, 0);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	2101      	movs	r1, #1
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fcb5 	bl	8000d5c <Lcd_cursor>
		  Lcd_string(&lcd,"EVACUAR NOW!	");
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4919      	ldr	r1, [pc, #100]	; (800145c <main+0x57c>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc91 	bl	8000d20 <Lcd_string>
		  HAL_Delay(50);
 80013fe:	2032      	movs	r0, #50	; 0x32
 8001400:	f000 faec 	bl	80019dc <HAL_Delay>
		  Lcd_clear(&lcd);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fcc1 	bl	8000d90 <Lcd_clear>
	  if(((float)HAL_ADC_GetValue(&hadc1)/8.215)<=30){
 800140e:	e5e3      	b.n	8000fd8 <main+0xf8>
 8001410:	7ae147ae 	.word	0x7ae147ae
 8001414:	40206e14 	.word	0x40206e14
 8001418:	08003bf4 	.word	0x08003bf4
 800141c:	200000ac 	.word	0x200000ac
 8001420:	2000008c 	.word	0x2000008c
 8001424:	08003c50 	.word	0x08003c50
 8001428:	00203a54 	.word	0x00203a54
 800142c:	200000dc 	.word	0x200000dc
 8001430:	08003c00 	.word	0x08003c00
 8001434:	20000098 	.word	0x20000098
 8001438:	08003c04 	.word	0x08003c04
 800143c:	08003c10 	.word	0x08003c10
 8001440:	08003b7c 	.word	0x08003b7c
 8001444:	08003c14 	.word	0x08003c14
 8001448:	40010c00 	.word	0x40010c00
 800144c:	08003bc0 	.word	0x08003bc0
 8001450:	08003bd8 	.word	0x08003bd8
 8001454:	08003be4 	.word	0x08003be4
 8001458:	08003c1c 	.word	0x08003c1c
 800145c:	08003c28 	.word	0x08003c28

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	; 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146a:	2228      	movs	r2, #40	; 0x28
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f001 ff20 	bl	80032b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001490:	2302      	movs	r3, #2
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001494:	2301      	movs	r3, #1
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001498:	2310      	movs	r3, #16
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f837 	bl	8002518 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80014b0:	f000 f8dc 	bl	800166c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 faa2 	bl	8002a18 <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80014da:	f000 f8c7 	bl	800166c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014de:	2302      	movs	r3, #2
 80014e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fc31 	bl	8002d50 <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014f4:	f000 f8ba 	bl	800166c <Error_Handler>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3750      	adds	r7, #80	; 0x50
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_ADC1_Init+0x74>)
 8001512:	4a19      	ldr	r2, [pc, #100]	; (8001578 <MX_ADC1_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_ADC1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_ADC1_Init+0x74>)
 800151e:	2201      	movs	r2, #1
 8001520:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_ADC1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_ADC1_Init+0x74>)
 800152a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800152e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_ADC1_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_ADC1_Init+0x74>)
 8001538:	2201      	movs	r2, #1
 800153a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800153c:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_ADC1_Init+0x74>)
 800153e:	f000 fa6f 	bl	8001a20 <HAL_ADC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001548:	f000 f890 	bl	800166c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800154c:	2301      	movs	r3, #1
 800154e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001550:	2301      	movs	r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_ADC1_Init+0x74>)
 800155e:	f000 fbf1 	bl	8001d44 <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001568:	f000 f880 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200000ac 	.word	0x200000ac
 8001578:	40012400 	.word	0x40012400

0800157c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_USART1_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001588:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800158c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015b4:	f001 fc82 	bl	8002ebc <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015be:	f000 f855 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200000dc 	.word	0x200000dc
 80015cc:	40013800 	.word	0x40013800

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_GPIO_Init+0x90>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <MX_GPIO_Init+0x90>)
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_GPIO_Init+0x90>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_GPIO_Init+0x90>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a17      	ldr	r2, [pc, #92]	; (8001660 <MX_GPIO_Init+0x90>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_GPIO_Init+0x90>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 715e 	mov.w	r1, #888	; 0x378
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_GPIO_Init+0x94>)
 800161c:	f000 ff63 	bl	80024e6 <HAL_GPIO_WritePin>
                          |RS_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001620:	f44f 735e 	mov.w	r3, #888	; 0x378
 8001624:	60bb      	str	r3, [r7, #8]
                          |RS_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2302      	movs	r3, #2
 8001630:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4619      	mov	r1, r3
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <MX_GPIO_Init+0x94>)
 800163a:	f000 fdeb 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800163e:	2303      	movs	r3, #3
 8001640:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_GPIO_Init+0x98>)
 8001652:	f000 fddf 	bl	8002214 <HAL_GPIO_Init>

}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40010800 	.word	0x40010800
 8001668:	40010c00 	.word	0x40010c00

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001672:	e7fe      	b.n	8001672 <Error_Handler+0x6>

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_MspInit+0x5c>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <HAL_MspInit+0x5c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6193      	str	r3, [r2, #24]
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_MspInit+0x5c>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_MspInit+0x5c>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <HAL_MspInit+0x5c>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_MspInit+0x5c>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_MspInit+0x60>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_MspInit+0x60>)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000

080016d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_ADC_MspInit+0x6c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d121      	bne.n	800173c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_ADC_MspInit+0x70>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a12      	ldr	r2, [pc, #72]	; (8001748 <HAL_ADC_MspInit+0x70>)
 80016fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_ADC_MspInit+0x70>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_ADC_MspInit+0x70>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <HAL_ADC_MspInit+0x70>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_ADC_MspInit+0x70>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001728:	2302      	movs	r3, #2
 800172a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172c:	2303      	movs	r3, #3
 800172e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_ADC_MspInit+0x74>)
 8001738:	f000 fd6c 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40012400 	.word	0x40012400
 8001748:	40021000 	.word	0x40021000
 800174c:	40010800 	.word	0x40010800

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <HAL_UART_MspInit+0xa4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d13d      	bne.n	80017ec <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_UART_MspInit+0xa8>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <HAL_UART_MspInit+0xa8>)
 8001776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_UART_MspInit+0xa8>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_UART_MspInit+0xa8>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <HAL_UART_MspInit+0xa8>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_UART_MspInit+0xa8>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017a0:	2340      	movs	r3, #64	; 0x40
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4812      	ldr	r0, [pc, #72]	; (80017fc <HAL_UART_MspInit+0xac>)
 80017b4:	f000 fd2e 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <HAL_UART_MspInit+0xac>)
 80017cc:	f000 fd22 	bl	8002214 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_UART_MspInit+0xb0>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
 80017e6:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_UART_MspInit+0xb0>)
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	40010000 	.word	0x40010000

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <NMI_Handler+0x4>

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184a:	f000 f8ab 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f001 fcd2 	bl	800322c <__errno>
 8001888:	4602      	mov	r2, r0
 800188a:	230c      	movs	r3, #12
 800188c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20002800 	.word	0x20002800
 80018b4:	00000400 	.word	0x00000400
 80018b8:	200000a0 	.word	0x200000a0
 80018bc:	20000128 	.word	0x20000128

080018c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018ce:	e003      	b.n	80018d8 <LoopCopyDataInit>

080018d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80018d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018d6:	3104      	adds	r1, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018e0:	d3f6      	bcc.n	80018d0 <CopyDataInit>
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018e4:	e002      	b.n	80018ec <LoopFillZerobss>

080018e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018e8:	f842 3b04 	str.w	r3, [r2], #4

080018ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018f0:	d3f9      	bcc.n	80018e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018f2:	f7ff ffe5 	bl	80018c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f6:	f001 fc9f 	bl	8003238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018fa:	f7ff faf1 	bl	8000ee0 <main>
  bx lr
 80018fe:	4770      	bx	lr
  ldr r3, =_sidata
 8001900:	08003ce8 	.word	0x08003ce8
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001908:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800190c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001910:	20000124 	.word	0x20000124

08001914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_2_IRQHandler>
	...

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x28>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x28>)
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 fc3f 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	2000      	movs	r0, #0
 8001930:	f000 f808 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fe9e 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40022000 	.word	0x40022000

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fc49 	bl	80021fa <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 fc1f 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_IncTick+0x1c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_IncTick+0x20>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_IncTick+0x20>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000008 	.word	0x20000008
 80019c4:	2000011c 	.word	0x2000011c

080019c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <HAL_GetTick+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	2000011c 	.word	0x2000011c

080019dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff fff0 	bl	80019c8 <HAL_GetTick>
 80019e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f4:	d005      	beq.n	8001a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_Delay+0x40>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a02:	bf00      	nop
 8001a04:	f7ff ffe0 	bl	80019c8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8f7      	bhi.n	8001a04 <HAL_Delay+0x28>
  {
  }
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000008 	.word	0x20000008

08001a20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0be      	b.n	8001bc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fe3a 	bl	80016d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fab7 	bl	8001fd8 <ADC_ConversionStop_Disable>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 8099 	bne.w	8001bae <HAL_ADC_Init+0x18e>
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 8095 	bne.w	8001bae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a8c:	f023 0302 	bic.w	r3, r3, #2
 8001a90:	f043 0202 	orr.w	r2, r3, #2
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aa0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7b1b      	ldrb	r3, [r3, #12]
 8001aa6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001aa8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ab8:	d003      	beq.n	8001ac2 <HAL_ADC_Init+0xa2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d102      	bne.n	8001ac8 <HAL_ADC_Init+0xa8>
 8001ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac6:	e000      	b.n	8001aca <HAL_ADC_Init+0xaa>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7d1b      	ldrb	r3, [r3, #20]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d119      	bne.n	8001b0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7b1b      	ldrb	r3, [r3, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	035a      	lsls	r2, r3, #13
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	e00b      	b.n	8001b0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f043 0220 	orr.w	r2, r3, #32
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <HAL_ADC_Init+0x1a8>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3c:	d003      	beq.n	8001b46 <HAL_ADC_Init+0x126>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d104      	bne.n	8001b50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	051b      	lsls	r3, r3, #20
 8001b4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_ADC_Init+0x1ac>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d10b      	bne.n	8001b8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	f043 0201 	orr.w	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b8a:	e018      	b.n	8001bbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	f023 0312 	bic.w	r3, r3, #18
 8001b94:	f043 0210 	orr.w	r2, r3, #16
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bac:	e007      	b.n	8001bbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	f043 0210 	orr.w	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	ffe1f7fd 	.word	0xffe1f7fd
 8001bcc:	ff1f0efe 	.word	0xff1f0efe

08001bd0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Start+0x1a>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e098      	b.n	8001d1c <HAL_ADC_Start+0x14c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f99e 	bl	8001f34 <ADC_Enable>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 8087 	bne.w	8001d12 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <HAL_ADC_Start+0x154>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d105      	bne.n	8001c2e <HAL_ADC_Start+0x5e>
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_ADC_Start+0x158>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d115      	bne.n	8001c5a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d026      	beq.n	8001c96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c58:	e01d      	b.n	8001c96 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <HAL_ADC_Start+0x158>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d004      	beq.n	8001c7a <HAL_ADC_Start+0xaa>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <HAL_ADC_Start+0x154>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10d      	bne.n	8001c96 <HAL_ADC_Start+0xc6>
 8001c7a:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_ADC_Start+0x158>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d006      	beq.n	8001cb0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f023 0206 	bic.w	r2, r3, #6
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cae:	e002      	b.n	8001cb6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f06f 0202 	mvn.w	r2, #2
 8001cc6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cd6:	d113      	bne.n	8001d00 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_ADC_Start+0x154>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d105      	bne.n	8001cee <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_ADC_Start+0x158>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	e00c      	b.n	8001d1a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	e003      	b.n	8001d1a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40012800 	.word	0x40012800
 8001d28:	40012400 	.word	0x40012400

08001d2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x20>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e0dc      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1da>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b06      	cmp	r3, #6
 8001d72:	d81c      	bhi.n	8001dae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	3b05      	subs	r3, #5
 8001d86:	221f      	movs	r2, #31
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4019      	ands	r1, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3b05      	subs	r3, #5
 8001da0:	fa00 f203 	lsl.w	r2, r0, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34
 8001dac:	e03c      	b.n	8001e28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d81c      	bhi.n	8001df0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b23      	subs	r3, #35	; 0x23
 8001dc8:	221f      	movs	r2, #31
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	4019      	ands	r1, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	3b23      	subs	r3, #35	; 0x23
 8001de2:	fa00 f203 	lsl.w	r2, r0, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
 8001dee:	e01b      	b.n	8001e28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b41      	subs	r3, #65	; 0x41
 8001e02:	221f      	movs	r2, #31
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4019      	ands	r1, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	3b41      	subs	r3, #65	; 0x41
 8001e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d91c      	bls.n	8001e6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68d9      	ldr	r1, [r3, #12]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	3b1e      	subs	r3, #30
 8001e42:	2207      	movs	r2, #7
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	4019      	ands	r1, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	6898      	ldr	r0, [r3, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b1e      	subs	r3, #30
 8001e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	e019      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6919      	ldr	r1, [r3, #16]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4019      	ands	r1, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	6898      	ldr	r0, [r3, #8]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	fa00 f203 	lsl.w	r2, r0, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	d003      	beq.n	8001eae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eaa:	2b11      	cmp	r3, #17
 8001eac:	d132      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_ADC_ConfigChannel+0x1e4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d125      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d126      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ed4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d11a      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_ADC_ConfigChannel+0x1e8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	0c9a      	lsrs	r2, r3, #18
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f9      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x1b2>
 8001f02:	e007      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	f043 0220 	orr.w	r2, r3, #32
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	40012400 	.word	0x40012400
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	431bde83 	.word	0x431bde83

08001f34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d039      	beq.n	8001fc6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <ADC_Enable+0x9c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <ADC_Enable+0xa0>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	0c9b      	lsrs	r3, r3, #18
 8001f6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f70:	e002      	b.n	8001f78 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f9      	bne.n	8001f72 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f7e:	f7ff fd23 	bl	80019c8 <HAL_GetTick>
 8001f82:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f84:	e018      	b.n	8001fb8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f86:	f7ff fd1f 	bl	80019c8 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d911      	bls.n	8001fb8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	f043 0210 	orr.w	r2, r3, #16
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e007      	b.n	8001fc8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d1df      	bne.n	8001f86 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	431bde83 	.word	0x431bde83

08001fd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d127      	bne.n	8002042 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002002:	f7ff fce1 	bl	80019c8 <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002008:	e014      	b.n	8002034 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800200a:	f7ff fcdd 	bl	80019c8 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d90d      	bls.n	8002034 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	f043 0210 	orr.w	r2, r3, #16
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e007      	b.n	8002044 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d0e3      	beq.n	800200a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	; (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	; (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff90 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff49 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff5e 	bl	8002094 <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff90 	bl	8002104 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5f 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffb0 	bl	8002168 <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b08b      	sub	sp, #44	; 0x2c
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	e121      	b.n	800246c <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002228:	2201      	movs	r2, #1
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	429a      	cmp	r2, r3
 8002242:	f040 8110 	bne.w	8002466 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b12      	cmp	r3, #18
 800224c:	d034      	beq.n	80022b8 <HAL_GPIO_Init+0xa4>
 800224e:	2b12      	cmp	r3, #18
 8002250:	d80d      	bhi.n	800226e <HAL_GPIO_Init+0x5a>
 8002252:	2b02      	cmp	r3, #2
 8002254:	d02b      	beq.n	80022ae <HAL_GPIO_Init+0x9a>
 8002256:	2b02      	cmp	r3, #2
 8002258:	d804      	bhi.n	8002264 <HAL_GPIO_Init+0x50>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d031      	beq.n	80022c2 <HAL_GPIO_Init+0xae>
 800225e:	2b01      	cmp	r3, #1
 8002260:	d01c      	beq.n	800229c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002262:	e048      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002264:	2b03      	cmp	r3, #3
 8002266:	d043      	beq.n	80022f0 <HAL_GPIO_Init+0xdc>
 8002268:	2b11      	cmp	r3, #17
 800226a:	d01b      	beq.n	80022a4 <HAL_GPIO_Init+0x90>
          break;
 800226c:	e043      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800226e:	4a86      	ldr	r2, [pc, #536]	; (8002488 <HAL_GPIO_Init+0x274>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d026      	beq.n	80022c2 <HAL_GPIO_Init+0xae>
 8002274:	4a84      	ldr	r2, [pc, #528]	; (8002488 <HAL_GPIO_Init+0x274>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d806      	bhi.n	8002288 <HAL_GPIO_Init+0x74>
 800227a:	4a84      	ldr	r2, [pc, #528]	; (800248c <HAL_GPIO_Init+0x278>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d020      	beq.n	80022c2 <HAL_GPIO_Init+0xae>
 8002280:	4a83      	ldr	r2, [pc, #524]	; (8002490 <HAL_GPIO_Init+0x27c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01d      	beq.n	80022c2 <HAL_GPIO_Init+0xae>
          break;
 8002286:	e036      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002288:	4a82      	ldr	r2, [pc, #520]	; (8002494 <HAL_GPIO_Init+0x280>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d019      	beq.n	80022c2 <HAL_GPIO_Init+0xae>
 800228e:	4a82      	ldr	r2, [pc, #520]	; (8002498 <HAL_GPIO_Init+0x284>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d016      	beq.n	80022c2 <HAL_GPIO_Init+0xae>
 8002294:	4a81      	ldr	r2, [pc, #516]	; (800249c <HAL_GPIO_Init+0x288>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0xae>
          break;
 800229a:	e02c      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	623b      	str	r3, [r7, #32]
          break;
 80022a2:	e028      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	3304      	adds	r3, #4
 80022aa:	623b      	str	r3, [r7, #32]
          break;
 80022ac:	e023      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	3308      	adds	r3, #8
 80022b4:	623b      	str	r3, [r7, #32]
          break;
 80022b6:	e01e      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	330c      	adds	r3, #12
 80022be:	623b      	str	r3, [r7, #32]
          break;
 80022c0:	e019      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ca:	2304      	movs	r3, #4
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e012      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d8:	2308      	movs	r3, #8
 80022da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	611a      	str	r2, [r3, #16]
          break;
 80022e2:	e008      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e4:	2308      	movs	r3, #8
 80022e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	615a      	str	r2, [r3, #20]
          break;
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
          break;
 80022f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2bff      	cmp	r3, #255	; 0xff
 80022fa:	d801      	bhi.n	8002300 <HAL_GPIO_Init+0xec>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	e001      	b.n	8002304 <HAL_GPIO_Init+0xf0>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2bff      	cmp	r3, #255	; 0xff
 800230a:	d802      	bhi.n	8002312 <HAL_GPIO_Init+0xfe>
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x104>
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	3b08      	subs	r3, #8
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	210f      	movs	r1, #15
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	401a      	ands	r2, r3
 800232a:	6a39      	ldr	r1, [r7, #32]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	431a      	orrs	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8090 	beq.w	8002466 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002346:	4b56      	ldr	r3, [pc, #344]	; (80024a0 <HAL_GPIO_Init+0x28c>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	4a55      	ldr	r2, [pc, #340]	; (80024a0 <HAL_GPIO_Init+0x28c>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6193      	str	r3, [r2, #24]
 8002352:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_GPIO_Init+0x28c>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800235e:	4a51      	ldr	r2, [pc, #324]	; (80024a4 <HAL_GPIO_Init+0x290>)
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4013      	ands	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a48      	ldr	r2, [pc, #288]	; (80024a8 <HAL_GPIO_Init+0x294>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00d      	beq.n	80023a6 <HAL_GPIO_Init+0x192>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a47      	ldr	r2, [pc, #284]	; (80024ac <HAL_GPIO_Init+0x298>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <HAL_GPIO_Init+0x18e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_GPIO_Init+0x29c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_GPIO_Init+0x18a>
 800239a:	2302      	movs	r3, #2
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x194>
 800239e:	2303      	movs	r3, #3
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x194>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x194>
 80023a6:	2300      	movs	r3, #0
 80023a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023b8:	493a      	ldr	r1, [pc, #232]	; (80024a4 <HAL_GPIO_Init+0x290>)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d006      	beq.n	80023e0 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023d2:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4937      	ldr	r1, [pc, #220]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
 80023de:	e006      	b.n	80023ee <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023e0:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	4932      	ldr	r1, [pc, #200]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023fa:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	492d      	ldr	r1, [pc, #180]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
 8002406:	e006      	b.n	8002416 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	43db      	mvns	r3, r3
 8002410:	4928      	ldr	r1, [pc, #160]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 8002412:	4013      	ands	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	4923      	ldr	r1, [pc, #140]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
 800242e:	e006      	b.n	800243e <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	43db      	mvns	r3, r3
 8002438:	491e      	ldr	r1, [pc, #120]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 800243a:	4013      	ands	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	4919      	ldr	r1, [pc, #100]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	60cb      	str	r3, [r1, #12]
 8002456:	e006      	b.n	8002466 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	43db      	mvns	r3, r3
 8002460:	4914      	ldr	r1, [pc, #80]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 8002462:	4013      	ands	r3, r2
 8002464:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	3301      	adds	r3, #1
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	f47f aed6 	bne.w	8002228 <HAL_GPIO_Init+0x14>
  }
}
 800247c:	bf00      	nop
 800247e:	372c      	adds	r7, #44	; 0x2c
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	10210000 	.word	0x10210000
 800248c:	10110000 	.word	0x10110000
 8002490:	10120000 	.word	0x10120000
 8002494:	10310000 	.word	0x10310000
 8002498:	10320000 	.word	0x10320000
 800249c:	10220000 	.word	0x10220000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010000 	.word	0x40010000
 80024a8:	40010800 	.word	0x40010800
 80024ac:	40010c00 	.word	0x40010c00
 80024b0:	40011000 	.word	0x40011000
 80024b4:	40010400 	.word	0x40010400

080024b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e001      	b.n	80024da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	807b      	strh	r3, [r7, #2]
 80024f2:	4613      	mov	r3, r2
 80024f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f6:	787b      	ldrb	r3, [r7, #1]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fc:	887a      	ldrh	r2, [r7, #2]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002502:	e003      	b.n	800250c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	041a      	lsls	r2, r3, #16
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	611a      	str	r2, [r3, #16]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e26c      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8087 	beq.w	8002646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002538:	4b92      	ldr	r3, [pc, #584]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b04      	cmp	r3, #4
 8002542:	d00c      	beq.n	800255e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002544:	4b8f      	ldr	r3, [pc, #572]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d112      	bne.n	8002576 <HAL_RCC_OscConfig+0x5e>
 8002550:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255c:	d10b      	bne.n	8002576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255e:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d06c      	beq.n	8002644 <HAL_RCC_OscConfig+0x12c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d168      	bne.n	8002644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e246      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x76>
 8002580:	4b80      	ldr	r3, [pc, #512]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a7f      	ldr	r2, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e02e      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x98>
 8002596:	4b7b      	ldr	r3, [pc, #492]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7a      	ldr	r2, [pc, #488]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b78      	ldr	r3, [pc, #480]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a77      	ldr	r2, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0xbc>
 80025ba:	4b72      	ldr	r3, [pc, #456]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a71      	ldr	r2, [pc, #452]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6e      	ldr	r2, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 80025d4:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7ff f9e8 	bl	80019c8 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff f9e4 	bl	80019c8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1fa      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xe4>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff f9d4 	bl	80019c8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff f9d0 	bl	80019c8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1e6      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x10c>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d063      	beq.n	800271a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002652:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800265e:	4b49      	ldr	r3, [pc, #292]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b08      	cmp	r3, #8
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x18c>
 800266a:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x176>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1ba      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4939      	ldr	r1, [pc, #228]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	e03a      	b.n	800271a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7ff f989 	bl	80019c8 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff f985 	bl	80019c8 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e19b      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4927      	ldr	r1, [pc, #156]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff f968 	bl	80019c8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7ff f964 	bl	80019c8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e17a      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03a      	beq.n	800279c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d019      	beq.n	8002762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_RCC_OscConfig+0x274>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002734:	f7ff f948 	bl	80019c8 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff f944 	bl	80019c8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e15a      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800275a:	2001      	movs	r0, #1
 800275c:	f000 fada 	bl	8002d14 <RCC_Delay>
 8002760:	e01c      	b.n	800279c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_RCC_OscConfig+0x274>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7ff f92e 	bl	80019c8 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276e:	e00f      	b.n	8002790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7ff f92a 	bl	80019c8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d908      	bls.n	8002790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e140      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	42420000 	.word	0x42420000
 800278c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	4b9e      	ldr	r3, [pc, #632]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e9      	bne.n	8002770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80a6 	beq.w	80028f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ae:	4b97      	ldr	r3, [pc, #604]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b94      	ldr	r3, [pc, #592]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a93      	ldr	r2, [pc, #588]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	61d3      	str	r3, [r2, #28]
 80027c6:	4b91      	ldr	r3, [pc, #580]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d6:	4b8e      	ldr	r3, [pc, #568]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d118      	bne.n	8002814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e2:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a8a      	ldr	r2, [pc, #552]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ee:	f7ff f8eb 	bl	80019c8 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f6:	f7ff f8e7 	bl	80019c8 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b64      	cmp	r3, #100	; 0x64
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0fd      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x312>
 800281c:	4b7b      	ldr	r3, [pc, #492]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a7a      	ldr	r2, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	e02d      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x334>
 8002832:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a75      	ldr	r2, [pc, #468]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a72      	ldr	r2, [pc, #456]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	e01c      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b05      	cmp	r3, #5
 8002852:	d10c      	bne.n	800286e <HAL_RCC_OscConfig+0x356>
 8002854:	4b6d      	ldr	r3, [pc, #436]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4a6c      	ldr	r2, [pc, #432]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6213      	str	r3, [r2, #32]
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6213      	str	r3, [r2, #32]
 800286c:	e00b      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a66      	ldr	r2, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002880:	f023 0304 	bic.w	r3, r3, #4
 8002884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d015      	beq.n	80028ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7ff f89b 	bl	80019c8 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7ff f897 	bl	80019c8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0ab      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ac:	4b57      	ldr	r3, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ee      	beq.n	8002896 <HAL_RCC_OscConfig+0x37e>
 80028b8:	e014      	b.n	80028e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7ff f885 	bl	80019c8 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7ff f881 	bl	80019c8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e095      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d8:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ee      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b48      	ldr	r3, [pc, #288]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a47      	ldr	r2, [pc, #284]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8081 	beq.w	8002a02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002900:	4b42      	ldr	r3, [pc, #264]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d061      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d146      	bne.n	80029a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_OscConfig+0x4fc>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7ff f855 	bl	80019c8 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7ff f851 	bl	80019c8 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e067      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002948:	d108      	bne.n	800295c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800294a:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	492d      	ldr	r1, [pc, #180]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a19      	ldr	r1, [r3, #32]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	430b      	orrs	r3, r1
 800296e:	4927      	ldr	r1, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x4fc>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7ff f825 	bl	80019c8 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7ff f821 	bl	80019c8 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e037      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x46a>
 80029a0:	e02f      	b.n	8002a02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <HAL_RCC_OscConfig+0x4fc>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff f80e 	bl	80019c8 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff f80a 	bl	80019c8 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e020      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x498>
 80029ce:	e018      	b.n	8002a02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e013      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42420060 	.word	0x42420060

08002a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0d0      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d910      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 0207 	bic.w	r2, r3, #7
 8002a42:	4965      	ldr	r1, [pc, #404]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0b8      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a74:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a58      	ldr	r2, [pc, #352]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a52      	ldr	r2, [pc, #328]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	494d      	ldr	r1, [pc, #308]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d040      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e07f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e073      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4936      	ldr	r1, [pc, #216]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b08:	f7fe ff5e 	bl	80019c8 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe ff5a 	bl	80019c8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e053      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d210      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	4922      	ldr	r1, [pc, #136]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e032      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4916      	ldr	r1, [pc, #88]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	490e      	ldr	r1, [pc, #56]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba6:	f000 f821 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002baa:	4601      	mov	r1, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	5cd3      	ldrb	r3, [r2, r3]
 8002bba:	fa21 f303 	lsr.w	r3, r1, r3
 8002bbe:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe febc 	bl	8001944 <HAL_InitTick>

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08003c70 	.word	0x08003c70
 8002be4:	20000000 	.word	0x20000000
 8002be8:	20000004 	.word	0x20000004

08002bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	b490      	push	{r4, r7}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bf4:	1d3c      	adds	r4, r7, #4
 8002bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bfc:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c16:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x40>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x46>
 8002c2a:	e02d      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c2e:	623b      	str	r3, [r7, #32]
      break;
 8002c30:	e02d      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c3e:	4413      	add	r3, r2
 8002c40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0c5b      	lsrs	r3, r3, #17
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c5e:	4413      	add	r3, r2
 8002c60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c6a:	fb02 f203 	mul.w	r2, r2, r3
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	e004      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	623b      	str	r3, [r7, #32]
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c8a:	623b      	str	r3, [r7, #32]
      break;
 8002c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc90      	pop	{r4, r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	08003c58 	.word	0x08003c58
 8002ca0:	08003c68 	.word	0x08003c68
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	007a1200 	.word	0x007a1200
 8002cac:	003d0900 	.word	0x003d0900

08002cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b02      	ldr	r3, [pc, #8]	; (8002cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	20000000 	.word	0x20000000

08002cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc8:	f7ff fff2 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002ccc:	4601      	mov	r1, r0
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4a03      	ldr	r2, [pc, #12]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	08003c80 	.word	0x08003c80

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf0:	f7ff ffde 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4601      	mov	r1, r0
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08003c80 	.word	0x08003c80

08002d14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <RCC_Delay+0x34>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <RCC_Delay+0x38>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0a5b      	lsrs	r3, r3, #9
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d30:	bf00      	nop
  }
  while (Delay --);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	60fa      	str	r2, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f9      	bne.n	8002d30 <RCC_Delay+0x1c>
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	10624dd3 	.word	0x10624dd3

08002d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d07d      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d70:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d86:	61d3      	str	r3, [r2, #28]
 8002d88:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d118      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db0:	f7fe fe0a 	bl	80019c8 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	e008      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db8:	f7fe fe06 	bl	80019c8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e06d      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02e      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d027      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df4:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dfe:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e04:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d014      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fdd5 	bl	80019c8 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe fdd1 	bl	80019c8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e036      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ee      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4917      	ldr	r1, [pc, #92]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	490b      	ldr	r1, [pc, #44]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	42420440 	.word	0x42420440

08002ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e03f      	b.n	8002f4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe fc34 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f905 	bl	8003110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b08a      	sub	sp, #40	; 0x28
 8002f5a:	af02      	add	r7, sp, #8
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d17c      	bne.n	8003070 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_UART_Transmit+0x2c>
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e075      	b.n	8003072 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_UART_Transmit+0x3e>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e06e      	b.n	8003072 <HAL_UART_Transmit+0x11c>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2221      	movs	r2, #33	; 0x21
 8002fa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002faa:	f7fe fd0d 	bl	80019c8 <HAL_GetTick>
 8002fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	88fa      	ldrh	r2, [r7, #6]
 8002fb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	88fa      	ldrh	r2, [r7, #6]
 8002fba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	d108      	bne.n	8002fd8 <HAL_UART_Transmit+0x82>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d104      	bne.n	8002fd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e003      	b.n	8002fe0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002fe8:	e02a      	b.n	8003040 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f840 	bl	800307a <UART_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e036      	b.n	8003072 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	3302      	adds	r3, #2
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	e007      	b.n	8003032 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1cf      	bne.n	8002fea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2140      	movs	r1, #64	; 0x40
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f810 	bl	800307a <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e006      	b.n	8003072 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800308a:	e02c      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d028      	beq.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <UART_WaitOnFlagUntilTimeout+0x30>
 800309a:	f7fe fc95 	bl	80019c8 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d21d      	bcs.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e00f      	b.n	8003106 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4013      	ands	r3, r2
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	429a      	cmp	r2, r3
 8003102:	d0c3      	beq.n	800308c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800314a:	f023 030c 	bic.w	r3, r3, #12
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	430b      	orrs	r3, r1
 8003156:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2c      	ldr	r2, [pc, #176]	; (8003224 <UART_SetConfig+0x114>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003178:	f7ff fdb8 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	e002      	b.n	8003186 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003180:	f7ff fda0 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 8003184:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009a      	lsls	r2, r3, #2
 8003190:	441a      	add	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	4a22      	ldr	r2, [pc, #136]	; (8003228 <UART_SetConfig+0x118>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	0119      	lsls	r1, r3, #4
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009a      	lsls	r2, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031bc:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <UART_SetConfig+0x118>)
 80031be:	fba3 0302 	umull	r0, r3, r3, r2
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2064      	movs	r0, #100	; 0x64
 80031c6:	fb00 f303 	mul.w	r3, r0, r3
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	3332      	adds	r3, #50	; 0x32
 80031d0:	4a15      	ldr	r2, [pc, #84]	; (8003228 <UART_SetConfig+0x118>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031dc:	4419      	add	r1, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009a      	lsls	r2, r3, #2
 80031e8:	441a      	add	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <UART_SetConfig+0x118>)
 80031f6:	fba3 0302 	umull	r0, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2064      	movs	r0, #100	; 0x64
 80031fe:	fb00 f303 	mul.w	r3, r0, r3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	3332      	adds	r3, #50	; 0x32
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <UART_SetConfig+0x118>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	440a      	add	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40013800 	.word	0x40013800
 8003228:	51eb851f 	.word	0x51eb851f

0800322c <__errno>:
 800322c:	4b01      	ldr	r3, [pc, #4]	; (8003234 <__errno+0x8>)
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	2000000c 	.word	0x2000000c

08003238 <__libc_init_array>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	2500      	movs	r5, #0
 800323c:	4e0c      	ldr	r6, [pc, #48]	; (8003270 <__libc_init_array+0x38>)
 800323e:	4c0d      	ldr	r4, [pc, #52]	; (8003274 <__libc_init_array+0x3c>)
 8003240:	1ba4      	subs	r4, r4, r6
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	42a5      	cmp	r5, r4
 8003246:	d109      	bne.n	800325c <__libc_init_array+0x24>
 8003248:	f000 fc8c 	bl	8003b64 <_init>
 800324c:	2500      	movs	r5, #0
 800324e:	4e0a      	ldr	r6, [pc, #40]	; (8003278 <__libc_init_array+0x40>)
 8003250:	4c0a      	ldr	r4, [pc, #40]	; (800327c <__libc_init_array+0x44>)
 8003252:	1ba4      	subs	r4, r4, r6
 8003254:	10a4      	asrs	r4, r4, #2
 8003256:	42a5      	cmp	r5, r4
 8003258:	d105      	bne.n	8003266 <__libc_init_array+0x2e>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003260:	4798      	blx	r3
 8003262:	3501      	adds	r5, #1
 8003264:	e7ee      	b.n	8003244 <__libc_init_array+0xc>
 8003266:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800326a:	4798      	blx	r3
 800326c:	3501      	adds	r5, #1
 800326e:	e7f2      	b.n	8003256 <__libc_init_array+0x1e>
 8003270:	08003ce0 	.word	0x08003ce0
 8003274:	08003ce0 	.word	0x08003ce0
 8003278:	08003ce0 	.word	0x08003ce0
 800327c:	08003ce4 	.word	0x08003ce4

08003280 <__itoa>:
 8003280:	1e93      	subs	r3, r2, #2
 8003282:	2b22      	cmp	r3, #34	; 0x22
 8003284:	b510      	push	{r4, lr}
 8003286:	460c      	mov	r4, r1
 8003288:	d904      	bls.n	8003294 <__itoa+0x14>
 800328a:	2300      	movs	r3, #0
 800328c:	461c      	mov	r4, r3
 800328e:	700b      	strb	r3, [r1, #0]
 8003290:	4620      	mov	r0, r4
 8003292:	bd10      	pop	{r4, pc}
 8003294:	2a0a      	cmp	r2, #10
 8003296:	d109      	bne.n	80032ac <__itoa+0x2c>
 8003298:	2800      	cmp	r0, #0
 800329a:	da07      	bge.n	80032ac <__itoa+0x2c>
 800329c:	232d      	movs	r3, #45	; 0x2d
 800329e:	700b      	strb	r3, [r1, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	4240      	negs	r0, r0
 80032a4:	4421      	add	r1, r4
 80032a6:	f000 f82d 	bl	8003304 <__utoa>
 80032aa:	e7f1      	b.n	8003290 <__itoa+0x10>
 80032ac:	2100      	movs	r1, #0
 80032ae:	e7f9      	b.n	80032a4 <__itoa+0x24>

080032b0 <itoa>:
 80032b0:	f7ff bfe6 	b.w	8003280 <__itoa>

080032b4 <memset>:
 80032b4:	4603      	mov	r3, r0
 80032b6:	4402      	add	r2, r0
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d100      	bne.n	80032be <memset+0xa>
 80032bc:	4770      	bx	lr
 80032be:	f803 1b01 	strb.w	r1, [r3], #1
 80032c2:	e7f9      	b.n	80032b8 <memset+0x4>

080032c4 <siprintf>:
 80032c4:	b40e      	push	{r1, r2, r3}
 80032c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032ca:	b500      	push	{lr}
 80032cc:	b09c      	sub	sp, #112	; 0x70
 80032ce:	ab1d      	add	r3, sp, #116	; 0x74
 80032d0:	9002      	str	r0, [sp, #8]
 80032d2:	9006      	str	r0, [sp, #24]
 80032d4:	9107      	str	r1, [sp, #28]
 80032d6:	9104      	str	r1, [sp, #16]
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <siprintf+0x38>)
 80032da:	4909      	ldr	r1, [pc, #36]	; (8003300 <siprintf+0x3c>)
 80032dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80032e0:	9105      	str	r1, [sp, #20]
 80032e2:	6800      	ldr	r0, [r0, #0]
 80032e4:	a902      	add	r1, sp, #8
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	f000 f8a4 	bl	8003434 <_svfiprintf_r>
 80032ec:	2200      	movs	r2, #0
 80032ee:	9b02      	ldr	r3, [sp, #8]
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	b01c      	add	sp, #112	; 0x70
 80032f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032f8:	b003      	add	sp, #12
 80032fa:	4770      	bx	lr
 80032fc:	2000000c 	.word	0x2000000c
 8003300:	ffff0208 	.word	0xffff0208

08003304 <__utoa>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	b08b      	sub	sp, #44	; 0x2c
 8003308:	4605      	mov	r5, r0
 800330a:	460c      	mov	r4, r1
 800330c:	466e      	mov	r6, sp
 800330e:	4b1b      	ldr	r3, [pc, #108]	; (800337c <__utoa+0x78>)
 8003310:	f103 0c20 	add.w	ip, r3, #32
 8003314:	4637      	mov	r7, r6
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	3308      	adds	r3, #8
 800331c:	c703      	stmia	r7!, {r0, r1}
 800331e:	4563      	cmp	r3, ip
 8003320:	463e      	mov	r6, r7
 8003322:	d1f7      	bne.n	8003314 <__utoa+0x10>
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	791b      	ldrb	r3, [r3, #4]
 8003328:	6038      	str	r0, [r7, #0]
 800332a:	713b      	strb	r3, [r7, #4]
 800332c:	1e93      	subs	r3, r2, #2
 800332e:	2b22      	cmp	r3, #34	; 0x22
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	d904      	bls.n	8003340 <__utoa+0x3c>
 8003336:	7023      	strb	r3, [r4, #0]
 8003338:	461c      	mov	r4, r3
 800333a:	4620      	mov	r0, r4
 800333c:	b00b      	add	sp, #44	; 0x2c
 800333e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003340:	1e66      	subs	r6, r4, #1
 8003342:	fbb5 f0f2 	udiv	r0, r5, r2
 8003346:	fb02 5510 	mls	r5, r2, r0, r5
 800334a:	af0a      	add	r7, sp, #40	; 0x28
 800334c:	443d      	add	r5, r7
 800334e:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8003352:	1c59      	adds	r1, r3, #1
 8003354:	f806 5f01 	strb.w	r5, [r6, #1]!
 8003358:	4605      	mov	r5, r0
 800335a:	b968      	cbnz	r0, 8003378 <__utoa+0x74>
 800335c:	4622      	mov	r2, r4
 800335e:	5460      	strb	r0, [r4, r1]
 8003360:	4423      	add	r3, r4
 8003362:	1b19      	subs	r1, r3, r4
 8003364:	1b10      	subs	r0, r2, r4
 8003366:	4281      	cmp	r1, r0
 8003368:	dde7      	ble.n	800333a <__utoa+0x36>
 800336a:	7811      	ldrb	r1, [r2, #0]
 800336c:	7818      	ldrb	r0, [r3, #0]
 800336e:	f802 0b01 	strb.w	r0, [r2], #1
 8003372:	f803 1901 	strb.w	r1, [r3], #-1
 8003376:	e7f4      	b.n	8003362 <__utoa+0x5e>
 8003378:	460b      	mov	r3, r1
 800337a:	e7e2      	b.n	8003342 <__utoa+0x3e>
 800337c:	08003c88 	.word	0x08003c88

08003380 <__ssputs_r>:
 8003380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003384:	688e      	ldr	r6, [r1, #8]
 8003386:	4682      	mov	sl, r0
 8003388:	429e      	cmp	r6, r3
 800338a:	460c      	mov	r4, r1
 800338c:	4690      	mov	r8, r2
 800338e:	4699      	mov	r9, r3
 8003390:	d837      	bhi.n	8003402 <__ssputs_r+0x82>
 8003392:	898a      	ldrh	r2, [r1, #12]
 8003394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003398:	d031      	beq.n	80033fe <__ssputs_r+0x7e>
 800339a:	2302      	movs	r3, #2
 800339c:	6825      	ldr	r5, [r4, #0]
 800339e:	6909      	ldr	r1, [r1, #16]
 80033a0:	1a6f      	subs	r7, r5, r1
 80033a2:	6965      	ldr	r5, [r4, #20]
 80033a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80033ac:	f109 0301 	add.w	r3, r9, #1
 80033b0:	443b      	add	r3, r7
 80033b2:	429d      	cmp	r5, r3
 80033b4:	bf38      	it	cc
 80033b6:	461d      	movcc	r5, r3
 80033b8:	0553      	lsls	r3, r2, #21
 80033ba:	d530      	bpl.n	800341e <__ssputs_r+0x9e>
 80033bc:	4629      	mov	r1, r5
 80033be:	f000 fb37 	bl	8003a30 <_malloc_r>
 80033c2:	4606      	mov	r6, r0
 80033c4:	b950      	cbnz	r0, 80033dc <__ssputs_r+0x5c>
 80033c6:	230c      	movs	r3, #12
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	f8ca 3000 	str.w	r3, [sl]
 80033d0:	89a3      	ldrh	r3, [r4, #12]
 80033d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d6:	81a3      	strh	r3, [r4, #12]
 80033d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033dc:	463a      	mov	r2, r7
 80033de:	6921      	ldr	r1, [r4, #16]
 80033e0:	f000 fab6 	bl	8003950 <memcpy>
 80033e4:	89a3      	ldrh	r3, [r4, #12]
 80033e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ee:	81a3      	strh	r3, [r4, #12]
 80033f0:	6126      	str	r6, [r4, #16]
 80033f2:	443e      	add	r6, r7
 80033f4:	6026      	str	r6, [r4, #0]
 80033f6:	464e      	mov	r6, r9
 80033f8:	6165      	str	r5, [r4, #20]
 80033fa:	1bed      	subs	r5, r5, r7
 80033fc:	60a5      	str	r5, [r4, #8]
 80033fe:	454e      	cmp	r6, r9
 8003400:	d900      	bls.n	8003404 <__ssputs_r+0x84>
 8003402:	464e      	mov	r6, r9
 8003404:	4632      	mov	r2, r6
 8003406:	4641      	mov	r1, r8
 8003408:	6820      	ldr	r0, [r4, #0]
 800340a:	f000 faac 	bl	8003966 <memmove>
 800340e:	68a3      	ldr	r3, [r4, #8]
 8003410:	2000      	movs	r0, #0
 8003412:	1b9b      	subs	r3, r3, r6
 8003414:	60a3      	str	r3, [r4, #8]
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	441e      	add	r6, r3
 800341a:	6026      	str	r6, [r4, #0]
 800341c:	e7dc      	b.n	80033d8 <__ssputs_r+0x58>
 800341e:	462a      	mov	r2, r5
 8003420:	f000 fb60 	bl	8003ae4 <_realloc_r>
 8003424:	4606      	mov	r6, r0
 8003426:	2800      	cmp	r0, #0
 8003428:	d1e2      	bne.n	80033f0 <__ssputs_r+0x70>
 800342a:	6921      	ldr	r1, [r4, #16]
 800342c:	4650      	mov	r0, sl
 800342e:	f000 fab3 	bl	8003998 <_free_r>
 8003432:	e7c8      	b.n	80033c6 <__ssputs_r+0x46>

08003434 <_svfiprintf_r>:
 8003434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003438:	461d      	mov	r5, r3
 800343a:	898b      	ldrh	r3, [r1, #12]
 800343c:	b09d      	sub	sp, #116	; 0x74
 800343e:	061f      	lsls	r7, r3, #24
 8003440:	4680      	mov	r8, r0
 8003442:	460c      	mov	r4, r1
 8003444:	4616      	mov	r6, r2
 8003446:	d50f      	bpl.n	8003468 <_svfiprintf_r+0x34>
 8003448:	690b      	ldr	r3, [r1, #16]
 800344a:	b96b      	cbnz	r3, 8003468 <_svfiprintf_r+0x34>
 800344c:	2140      	movs	r1, #64	; 0x40
 800344e:	f000 faef 	bl	8003a30 <_malloc_r>
 8003452:	6020      	str	r0, [r4, #0]
 8003454:	6120      	str	r0, [r4, #16]
 8003456:	b928      	cbnz	r0, 8003464 <_svfiprintf_r+0x30>
 8003458:	230c      	movs	r3, #12
 800345a:	f8c8 3000 	str.w	r3, [r8]
 800345e:	f04f 30ff 	mov.w	r0, #4294967295
 8003462:	e0c8      	b.n	80035f6 <_svfiprintf_r+0x1c2>
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	6163      	str	r3, [r4, #20]
 8003468:	2300      	movs	r3, #0
 800346a:	9309      	str	r3, [sp, #36]	; 0x24
 800346c:	2320      	movs	r3, #32
 800346e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003472:	2330      	movs	r3, #48	; 0x30
 8003474:	f04f 0b01 	mov.w	fp, #1
 8003478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800347c:	9503      	str	r5, [sp, #12]
 800347e:	4637      	mov	r7, r6
 8003480:	463d      	mov	r5, r7
 8003482:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003486:	b10b      	cbz	r3, 800348c <_svfiprintf_r+0x58>
 8003488:	2b25      	cmp	r3, #37	; 0x25
 800348a:	d13e      	bne.n	800350a <_svfiprintf_r+0xd6>
 800348c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003490:	d00b      	beq.n	80034aa <_svfiprintf_r+0x76>
 8003492:	4653      	mov	r3, sl
 8003494:	4632      	mov	r2, r6
 8003496:	4621      	mov	r1, r4
 8003498:	4640      	mov	r0, r8
 800349a:	f7ff ff71 	bl	8003380 <__ssputs_r>
 800349e:	3001      	adds	r0, #1
 80034a0:	f000 80a4 	beq.w	80035ec <_svfiprintf_r+0x1b8>
 80034a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a6:	4453      	add	r3, sl
 80034a8:	9309      	str	r3, [sp, #36]	; 0x24
 80034aa:	783b      	ldrb	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 809d 	beq.w	80035ec <_svfiprintf_r+0x1b8>
 80034b2:	2300      	movs	r3, #0
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034bc:	9304      	str	r3, [sp, #16]
 80034be:	9307      	str	r3, [sp, #28]
 80034c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034c4:	931a      	str	r3, [sp, #104]	; 0x68
 80034c6:	462f      	mov	r7, r5
 80034c8:	2205      	movs	r2, #5
 80034ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80034ce:	4850      	ldr	r0, [pc, #320]	; (8003610 <_svfiprintf_r+0x1dc>)
 80034d0:	f000 fa30 	bl	8003934 <memchr>
 80034d4:	9b04      	ldr	r3, [sp, #16]
 80034d6:	b9d0      	cbnz	r0, 800350e <_svfiprintf_r+0xda>
 80034d8:	06d9      	lsls	r1, r3, #27
 80034da:	bf44      	itt	mi
 80034dc:	2220      	movmi	r2, #32
 80034de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034e2:	071a      	lsls	r2, r3, #28
 80034e4:	bf44      	itt	mi
 80034e6:	222b      	movmi	r2, #43	; 0x2b
 80034e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034ec:	782a      	ldrb	r2, [r5, #0]
 80034ee:	2a2a      	cmp	r2, #42	; 0x2a
 80034f0:	d015      	beq.n	800351e <_svfiprintf_r+0xea>
 80034f2:	462f      	mov	r7, r5
 80034f4:	2000      	movs	r0, #0
 80034f6:	250a      	movs	r5, #10
 80034f8:	9a07      	ldr	r2, [sp, #28]
 80034fa:	4639      	mov	r1, r7
 80034fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003500:	3b30      	subs	r3, #48	; 0x30
 8003502:	2b09      	cmp	r3, #9
 8003504:	d94d      	bls.n	80035a2 <_svfiprintf_r+0x16e>
 8003506:	b1b8      	cbz	r0, 8003538 <_svfiprintf_r+0x104>
 8003508:	e00f      	b.n	800352a <_svfiprintf_r+0xf6>
 800350a:	462f      	mov	r7, r5
 800350c:	e7b8      	b.n	8003480 <_svfiprintf_r+0x4c>
 800350e:	4a40      	ldr	r2, [pc, #256]	; (8003610 <_svfiprintf_r+0x1dc>)
 8003510:	463d      	mov	r5, r7
 8003512:	1a80      	subs	r0, r0, r2
 8003514:	fa0b f000 	lsl.w	r0, fp, r0
 8003518:	4318      	orrs	r0, r3
 800351a:	9004      	str	r0, [sp, #16]
 800351c:	e7d3      	b.n	80034c6 <_svfiprintf_r+0x92>
 800351e:	9a03      	ldr	r2, [sp, #12]
 8003520:	1d11      	adds	r1, r2, #4
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	9103      	str	r1, [sp, #12]
 8003526:	2a00      	cmp	r2, #0
 8003528:	db01      	blt.n	800352e <_svfiprintf_r+0xfa>
 800352a:	9207      	str	r2, [sp, #28]
 800352c:	e004      	b.n	8003538 <_svfiprintf_r+0x104>
 800352e:	4252      	negs	r2, r2
 8003530:	f043 0302 	orr.w	r3, r3, #2
 8003534:	9207      	str	r2, [sp, #28]
 8003536:	9304      	str	r3, [sp, #16]
 8003538:	783b      	ldrb	r3, [r7, #0]
 800353a:	2b2e      	cmp	r3, #46	; 0x2e
 800353c:	d10c      	bne.n	8003558 <_svfiprintf_r+0x124>
 800353e:	787b      	ldrb	r3, [r7, #1]
 8003540:	2b2a      	cmp	r3, #42	; 0x2a
 8003542:	d133      	bne.n	80035ac <_svfiprintf_r+0x178>
 8003544:	9b03      	ldr	r3, [sp, #12]
 8003546:	3702      	adds	r7, #2
 8003548:	1d1a      	adds	r2, r3, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	9203      	str	r2, [sp, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	bfb8      	it	lt
 8003552:	f04f 33ff 	movlt.w	r3, #4294967295
 8003556:	9305      	str	r3, [sp, #20]
 8003558:	4d2e      	ldr	r5, [pc, #184]	; (8003614 <_svfiprintf_r+0x1e0>)
 800355a:	2203      	movs	r2, #3
 800355c:	7839      	ldrb	r1, [r7, #0]
 800355e:	4628      	mov	r0, r5
 8003560:	f000 f9e8 	bl	8003934 <memchr>
 8003564:	b138      	cbz	r0, 8003576 <_svfiprintf_r+0x142>
 8003566:	2340      	movs	r3, #64	; 0x40
 8003568:	1b40      	subs	r0, r0, r5
 800356a:	fa03 f000 	lsl.w	r0, r3, r0
 800356e:	9b04      	ldr	r3, [sp, #16]
 8003570:	3701      	adds	r7, #1
 8003572:	4303      	orrs	r3, r0
 8003574:	9304      	str	r3, [sp, #16]
 8003576:	7839      	ldrb	r1, [r7, #0]
 8003578:	2206      	movs	r2, #6
 800357a:	4827      	ldr	r0, [pc, #156]	; (8003618 <_svfiprintf_r+0x1e4>)
 800357c:	1c7e      	adds	r6, r7, #1
 800357e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003582:	f000 f9d7 	bl	8003934 <memchr>
 8003586:	2800      	cmp	r0, #0
 8003588:	d038      	beq.n	80035fc <_svfiprintf_r+0x1c8>
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <_svfiprintf_r+0x1e8>)
 800358c:	bb13      	cbnz	r3, 80035d4 <_svfiprintf_r+0x1a0>
 800358e:	9b03      	ldr	r3, [sp, #12]
 8003590:	3307      	adds	r3, #7
 8003592:	f023 0307 	bic.w	r3, r3, #7
 8003596:	3308      	adds	r3, #8
 8003598:	9303      	str	r3, [sp, #12]
 800359a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800359c:	444b      	add	r3, r9
 800359e:	9309      	str	r3, [sp, #36]	; 0x24
 80035a0:	e76d      	b.n	800347e <_svfiprintf_r+0x4a>
 80035a2:	fb05 3202 	mla	r2, r5, r2, r3
 80035a6:	2001      	movs	r0, #1
 80035a8:	460f      	mov	r7, r1
 80035aa:	e7a6      	b.n	80034fa <_svfiprintf_r+0xc6>
 80035ac:	2300      	movs	r3, #0
 80035ae:	250a      	movs	r5, #10
 80035b0:	4619      	mov	r1, r3
 80035b2:	3701      	adds	r7, #1
 80035b4:	9305      	str	r3, [sp, #20]
 80035b6:	4638      	mov	r0, r7
 80035b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035bc:	3a30      	subs	r2, #48	; 0x30
 80035be:	2a09      	cmp	r2, #9
 80035c0:	d903      	bls.n	80035ca <_svfiprintf_r+0x196>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0c8      	beq.n	8003558 <_svfiprintf_r+0x124>
 80035c6:	9105      	str	r1, [sp, #20]
 80035c8:	e7c6      	b.n	8003558 <_svfiprintf_r+0x124>
 80035ca:	fb05 2101 	mla	r1, r5, r1, r2
 80035ce:	2301      	movs	r3, #1
 80035d0:	4607      	mov	r7, r0
 80035d2:	e7f0      	b.n	80035b6 <_svfiprintf_r+0x182>
 80035d4:	ab03      	add	r3, sp, #12
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4622      	mov	r2, r4
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <_svfiprintf_r+0x1ec>)
 80035dc:	a904      	add	r1, sp, #16
 80035de:	4640      	mov	r0, r8
 80035e0:	f3af 8000 	nop.w
 80035e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035e8:	4681      	mov	r9, r0
 80035ea:	d1d6      	bne.n	800359a <_svfiprintf_r+0x166>
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	065b      	lsls	r3, r3, #25
 80035f0:	f53f af35 	bmi.w	800345e <_svfiprintf_r+0x2a>
 80035f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035f6:	b01d      	add	sp, #116	; 0x74
 80035f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035fc:	ab03      	add	r3, sp, #12
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	4622      	mov	r2, r4
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <_svfiprintf_r+0x1ec>)
 8003604:	a904      	add	r1, sp, #16
 8003606:	4640      	mov	r0, r8
 8003608:	f000 f882 	bl	8003710 <_printf_i>
 800360c:	e7ea      	b.n	80035e4 <_svfiprintf_r+0x1b0>
 800360e:	bf00      	nop
 8003610:	08003cad 	.word	0x08003cad
 8003614:	08003cb3 	.word	0x08003cb3
 8003618:	08003cb7 	.word	0x08003cb7
 800361c:	00000000 	.word	0x00000000
 8003620:	08003381 	.word	0x08003381

08003624 <_printf_common>:
 8003624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	4691      	mov	r9, r2
 800362a:	461f      	mov	r7, r3
 800362c:	688a      	ldr	r2, [r1, #8]
 800362e:	690b      	ldr	r3, [r1, #16]
 8003630:	4606      	mov	r6, r0
 8003632:	4293      	cmp	r3, r2
 8003634:	bfb8      	it	lt
 8003636:	4613      	movlt	r3, r2
 8003638:	f8c9 3000 	str.w	r3, [r9]
 800363c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003640:	460c      	mov	r4, r1
 8003642:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003646:	b112      	cbz	r2, 800364e <_printf_common+0x2a>
 8003648:	3301      	adds	r3, #1
 800364a:	f8c9 3000 	str.w	r3, [r9]
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	0699      	lsls	r1, r3, #26
 8003652:	bf42      	ittt	mi
 8003654:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003658:	3302      	addmi	r3, #2
 800365a:	f8c9 3000 	strmi.w	r3, [r9]
 800365e:	6825      	ldr	r5, [r4, #0]
 8003660:	f015 0506 	ands.w	r5, r5, #6
 8003664:	d107      	bne.n	8003676 <_printf_common+0x52>
 8003666:	f104 0a19 	add.w	sl, r4, #25
 800366a:	68e3      	ldr	r3, [r4, #12]
 800366c:	f8d9 2000 	ldr.w	r2, [r9]
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	42ab      	cmp	r3, r5
 8003674:	dc29      	bgt.n	80036ca <_printf_common+0xa6>
 8003676:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800367a:	6822      	ldr	r2, [r4, #0]
 800367c:	3300      	adds	r3, #0
 800367e:	bf18      	it	ne
 8003680:	2301      	movne	r3, #1
 8003682:	0692      	lsls	r2, r2, #26
 8003684:	d42e      	bmi.n	80036e4 <_printf_common+0xc0>
 8003686:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800368a:	4639      	mov	r1, r7
 800368c:	4630      	mov	r0, r6
 800368e:	47c0      	blx	r8
 8003690:	3001      	adds	r0, #1
 8003692:	d021      	beq.n	80036d8 <_printf_common+0xb4>
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	68e5      	ldr	r5, [r4, #12]
 8003698:	f003 0306 	and.w	r3, r3, #6
 800369c:	2b04      	cmp	r3, #4
 800369e:	bf18      	it	ne
 80036a0:	2500      	movne	r5, #0
 80036a2:	f8d9 2000 	ldr.w	r2, [r9]
 80036a6:	f04f 0900 	mov.w	r9, #0
 80036aa:	bf08      	it	eq
 80036ac:	1aad      	subeq	r5, r5, r2
 80036ae:	68a3      	ldr	r3, [r4, #8]
 80036b0:	6922      	ldr	r2, [r4, #16]
 80036b2:	bf08      	it	eq
 80036b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bfc4      	itt	gt
 80036bc:	1a9b      	subgt	r3, r3, r2
 80036be:	18ed      	addgt	r5, r5, r3
 80036c0:	341a      	adds	r4, #26
 80036c2:	454d      	cmp	r5, r9
 80036c4:	d11a      	bne.n	80036fc <_printf_common+0xd8>
 80036c6:	2000      	movs	r0, #0
 80036c8:	e008      	b.n	80036dc <_printf_common+0xb8>
 80036ca:	2301      	movs	r3, #1
 80036cc:	4652      	mov	r2, sl
 80036ce:	4639      	mov	r1, r7
 80036d0:	4630      	mov	r0, r6
 80036d2:	47c0      	blx	r8
 80036d4:	3001      	adds	r0, #1
 80036d6:	d103      	bne.n	80036e0 <_printf_common+0xbc>
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e0:	3501      	adds	r5, #1
 80036e2:	e7c2      	b.n	800366a <_printf_common+0x46>
 80036e4:	2030      	movs	r0, #48	; 0x30
 80036e6:	18e1      	adds	r1, r4, r3
 80036e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036f2:	4422      	add	r2, r4
 80036f4:	3302      	adds	r3, #2
 80036f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036fa:	e7c4      	b.n	8003686 <_printf_common+0x62>
 80036fc:	2301      	movs	r3, #1
 80036fe:	4622      	mov	r2, r4
 8003700:	4639      	mov	r1, r7
 8003702:	4630      	mov	r0, r6
 8003704:	47c0      	blx	r8
 8003706:	3001      	adds	r0, #1
 8003708:	d0e6      	beq.n	80036d8 <_printf_common+0xb4>
 800370a:	f109 0901 	add.w	r9, r9, #1
 800370e:	e7d8      	b.n	80036c2 <_printf_common+0x9e>

08003710 <_printf_i>:
 8003710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003714:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003718:	460c      	mov	r4, r1
 800371a:	7e09      	ldrb	r1, [r1, #24]
 800371c:	b085      	sub	sp, #20
 800371e:	296e      	cmp	r1, #110	; 0x6e
 8003720:	4617      	mov	r7, r2
 8003722:	4606      	mov	r6, r0
 8003724:	4698      	mov	r8, r3
 8003726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003728:	f000 80b3 	beq.w	8003892 <_printf_i+0x182>
 800372c:	d822      	bhi.n	8003774 <_printf_i+0x64>
 800372e:	2963      	cmp	r1, #99	; 0x63
 8003730:	d036      	beq.n	80037a0 <_printf_i+0x90>
 8003732:	d80a      	bhi.n	800374a <_printf_i+0x3a>
 8003734:	2900      	cmp	r1, #0
 8003736:	f000 80b9 	beq.w	80038ac <_printf_i+0x19c>
 800373a:	2958      	cmp	r1, #88	; 0x58
 800373c:	f000 8083 	beq.w	8003846 <_printf_i+0x136>
 8003740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003744:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003748:	e032      	b.n	80037b0 <_printf_i+0xa0>
 800374a:	2964      	cmp	r1, #100	; 0x64
 800374c:	d001      	beq.n	8003752 <_printf_i+0x42>
 800374e:	2969      	cmp	r1, #105	; 0x69
 8003750:	d1f6      	bne.n	8003740 <_printf_i+0x30>
 8003752:	6820      	ldr	r0, [r4, #0]
 8003754:	6813      	ldr	r3, [r2, #0]
 8003756:	0605      	lsls	r5, r0, #24
 8003758:	f103 0104 	add.w	r1, r3, #4
 800375c:	d52a      	bpl.n	80037b4 <_printf_i+0xa4>
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6011      	str	r1, [r2, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	da03      	bge.n	800376e <_printf_i+0x5e>
 8003766:	222d      	movs	r2, #45	; 0x2d
 8003768:	425b      	negs	r3, r3
 800376a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800376e:	486f      	ldr	r0, [pc, #444]	; (800392c <_printf_i+0x21c>)
 8003770:	220a      	movs	r2, #10
 8003772:	e039      	b.n	80037e8 <_printf_i+0xd8>
 8003774:	2973      	cmp	r1, #115	; 0x73
 8003776:	f000 809d 	beq.w	80038b4 <_printf_i+0x1a4>
 800377a:	d808      	bhi.n	800378e <_printf_i+0x7e>
 800377c:	296f      	cmp	r1, #111	; 0x6f
 800377e:	d020      	beq.n	80037c2 <_printf_i+0xb2>
 8003780:	2970      	cmp	r1, #112	; 0x70
 8003782:	d1dd      	bne.n	8003740 <_printf_i+0x30>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	f043 0320 	orr.w	r3, r3, #32
 800378a:	6023      	str	r3, [r4, #0]
 800378c:	e003      	b.n	8003796 <_printf_i+0x86>
 800378e:	2975      	cmp	r1, #117	; 0x75
 8003790:	d017      	beq.n	80037c2 <_printf_i+0xb2>
 8003792:	2978      	cmp	r1, #120	; 0x78
 8003794:	d1d4      	bne.n	8003740 <_printf_i+0x30>
 8003796:	2378      	movs	r3, #120	; 0x78
 8003798:	4865      	ldr	r0, [pc, #404]	; (8003930 <_printf_i+0x220>)
 800379a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800379e:	e055      	b.n	800384c <_printf_i+0x13c>
 80037a0:	6813      	ldr	r3, [r2, #0]
 80037a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037a6:	1d19      	adds	r1, r3, #4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6011      	str	r1, [r2, #0]
 80037ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037b0:	2301      	movs	r3, #1
 80037b2:	e08c      	b.n	80038ce <_printf_i+0x1be>
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037ba:	6011      	str	r1, [r2, #0]
 80037bc:	bf18      	it	ne
 80037be:	b21b      	sxthne	r3, r3
 80037c0:	e7cf      	b.n	8003762 <_printf_i+0x52>
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	6825      	ldr	r5, [r4, #0]
 80037c6:	1d18      	adds	r0, r3, #4
 80037c8:	6010      	str	r0, [r2, #0]
 80037ca:	0628      	lsls	r0, r5, #24
 80037cc:	d501      	bpl.n	80037d2 <_printf_i+0xc2>
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	e002      	b.n	80037d8 <_printf_i+0xc8>
 80037d2:	0668      	lsls	r0, r5, #25
 80037d4:	d5fb      	bpl.n	80037ce <_printf_i+0xbe>
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	296f      	cmp	r1, #111	; 0x6f
 80037da:	bf14      	ite	ne
 80037dc:	220a      	movne	r2, #10
 80037de:	2208      	moveq	r2, #8
 80037e0:	4852      	ldr	r0, [pc, #328]	; (800392c <_printf_i+0x21c>)
 80037e2:	2100      	movs	r1, #0
 80037e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037e8:	6865      	ldr	r5, [r4, #4]
 80037ea:	2d00      	cmp	r5, #0
 80037ec:	60a5      	str	r5, [r4, #8]
 80037ee:	f2c0 8095 	blt.w	800391c <_printf_i+0x20c>
 80037f2:	6821      	ldr	r1, [r4, #0]
 80037f4:	f021 0104 	bic.w	r1, r1, #4
 80037f8:	6021      	str	r1, [r4, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d13d      	bne.n	800387a <_printf_i+0x16a>
 80037fe:	2d00      	cmp	r5, #0
 8003800:	f040 808e 	bne.w	8003920 <_printf_i+0x210>
 8003804:	4665      	mov	r5, ip
 8003806:	2a08      	cmp	r2, #8
 8003808:	d10b      	bne.n	8003822 <_printf_i+0x112>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	07db      	lsls	r3, r3, #31
 800380e:	d508      	bpl.n	8003822 <_printf_i+0x112>
 8003810:	6923      	ldr	r3, [r4, #16]
 8003812:	6862      	ldr	r2, [r4, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	bfde      	ittt	le
 8003818:	2330      	movle	r3, #48	; 0x30
 800381a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800381e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003822:	ebac 0305 	sub.w	r3, ip, r5
 8003826:	6123      	str	r3, [r4, #16]
 8003828:	f8cd 8000 	str.w	r8, [sp]
 800382c:	463b      	mov	r3, r7
 800382e:	aa03      	add	r2, sp, #12
 8003830:	4621      	mov	r1, r4
 8003832:	4630      	mov	r0, r6
 8003834:	f7ff fef6 	bl	8003624 <_printf_common>
 8003838:	3001      	adds	r0, #1
 800383a:	d14d      	bne.n	80038d8 <_printf_i+0x1c8>
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	b005      	add	sp, #20
 8003842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003846:	4839      	ldr	r0, [pc, #228]	; (800392c <_printf_i+0x21c>)
 8003848:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800384c:	6813      	ldr	r3, [r2, #0]
 800384e:	6821      	ldr	r1, [r4, #0]
 8003850:	1d1d      	adds	r5, r3, #4
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6015      	str	r5, [r2, #0]
 8003856:	060a      	lsls	r2, r1, #24
 8003858:	d50b      	bpl.n	8003872 <_printf_i+0x162>
 800385a:	07ca      	lsls	r2, r1, #31
 800385c:	bf44      	itt	mi
 800385e:	f041 0120 	orrmi.w	r1, r1, #32
 8003862:	6021      	strmi	r1, [r4, #0]
 8003864:	b91b      	cbnz	r3, 800386e <_printf_i+0x15e>
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	f022 0220 	bic.w	r2, r2, #32
 800386c:	6022      	str	r2, [r4, #0]
 800386e:	2210      	movs	r2, #16
 8003870:	e7b7      	b.n	80037e2 <_printf_i+0xd2>
 8003872:	064d      	lsls	r5, r1, #25
 8003874:	bf48      	it	mi
 8003876:	b29b      	uxthmi	r3, r3
 8003878:	e7ef      	b.n	800385a <_printf_i+0x14a>
 800387a:	4665      	mov	r5, ip
 800387c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003880:	fb02 3311 	mls	r3, r2, r1, r3
 8003884:	5cc3      	ldrb	r3, [r0, r3]
 8003886:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800388a:	460b      	mov	r3, r1
 800388c:	2900      	cmp	r1, #0
 800388e:	d1f5      	bne.n	800387c <_printf_i+0x16c>
 8003890:	e7b9      	b.n	8003806 <_printf_i+0xf6>
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	6825      	ldr	r5, [r4, #0]
 8003896:	1d18      	adds	r0, r3, #4
 8003898:	6961      	ldr	r1, [r4, #20]
 800389a:	6010      	str	r0, [r2, #0]
 800389c:	0628      	lsls	r0, r5, #24
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	d501      	bpl.n	80038a6 <_printf_i+0x196>
 80038a2:	6019      	str	r1, [r3, #0]
 80038a4:	e002      	b.n	80038ac <_printf_i+0x19c>
 80038a6:	066a      	lsls	r2, r5, #25
 80038a8:	d5fb      	bpl.n	80038a2 <_printf_i+0x192>
 80038aa:	8019      	strh	r1, [r3, #0]
 80038ac:	2300      	movs	r3, #0
 80038ae:	4665      	mov	r5, ip
 80038b0:	6123      	str	r3, [r4, #16]
 80038b2:	e7b9      	b.n	8003828 <_printf_i+0x118>
 80038b4:	6813      	ldr	r3, [r2, #0]
 80038b6:	1d19      	adds	r1, r3, #4
 80038b8:	6011      	str	r1, [r2, #0]
 80038ba:	681d      	ldr	r5, [r3, #0]
 80038bc:	6862      	ldr	r2, [r4, #4]
 80038be:	2100      	movs	r1, #0
 80038c0:	4628      	mov	r0, r5
 80038c2:	f000 f837 	bl	8003934 <memchr>
 80038c6:	b108      	cbz	r0, 80038cc <_printf_i+0x1bc>
 80038c8:	1b40      	subs	r0, r0, r5
 80038ca:	6060      	str	r0, [r4, #4]
 80038cc:	6863      	ldr	r3, [r4, #4]
 80038ce:	6123      	str	r3, [r4, #16]
 80038d0:	2300      	movs	r3, #0
 80038d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038d6:	e7a7      	b.n	8003828 <_printf_i+0x118>
 80038d8:	6923      	ldr	r3, [r4, #16]
 80038da:	462a      	mov	r2, r5
 80038dc:	4639      	mov	r1, r7
 80038de:	4630      	mov	r0, r6
 80038e0:	47c0      	blx	r8
 80038e2:	3001      	adds	r0, #1
 80038e4:	d0aa      	beq.n	800383c <_printf_i+0x12c>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	079b      	lsls	r3, r3, #30
 80038ea:	d413      	bmi.n	8003914 <_printf_i+0x204>
 80038ec:	68e0      	ldr	r0, [r4, #12]
 80038ee:	9b03      	ldr	r3, [sp, #12]
 80038f0:	4298      	cmp	r0, r3
 80038f2:	bfb8      	it	lt
 80038f4:	4618      	movlt	r0, r3
 80038f6:	e7a3      	b.n	8003840 <_printf_i+0x130>
 80038f8:	2301      	movs	r3, #1
 80038fa:	464a      	mov	r2, r9
 80038fc:	4639      	mov	r1, r7
 80038fe:	4630      	mov	r0, r6
 8003900:	47c0      	blx	r8
 8003902:	3001      	adds	r0, #1
 8003904:	d09a      	beq.n	800383c <_printf_i+0x12c>
 8003906:	3501      	adds	r5, #1
 8003908:	68e3      	ldr	r3, [r4, #12]
 800390a:	9a03      	ldr	r2, [sp, #12]
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	42ab      	cmp	r3, r5
 8003910:	dcf2      	bgt.n	80038f8 <_printf_i+0x1e8>
 8003912:	e7eb      	b.n	80038ec <_printf_i+0x1dc>
 8003914:	2500      	movs	r5, #0
 8003916:	f104 0919 	add.w	r9, r4, #25
 800391a:	e7f5      	b.n	8003908 <_printf_i+0x1f8>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1ac      	bne.n	800387a <_printf_i+0x16a>
 8003920:	7803      	ldrb	r3, [r0, #0]
 8003922:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003926:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800392a:	e76c      	b.n	8003806 <_printf_i+0xf6>
 800392c:	08003cbe 	.word	0x08003cbe
 8003930:	08003ccf 	.word	0x08003ccf

08003934 <memchr>:
 8003934:	b510      	push	{r4, lr}
 8003936:	b2c9      	uxtb	r1, r1
 8003938:	4402      	add	r2, r0
 800393a:	4290      	cmp	r0, r2
 800393c:	4603      	mov	r3, r0
 800393e:	d101      	bne.n	8003944 <memchr+0x10>
 8003940:	2300      	movs	r3, #0
 8003942:	e003      	b.n	800394c <memchr+0x18>
 8003944:	781c      	ldrb	r4, [r3, #0]
 8003946:	3001      	adds	r0, #1
 8003948:	428c      	cmp	r4, r1
 800394a:	d1f6      	bne.n	800393a <memchr+0x6>
 800394c:	4618      	mov	r0, r3
 800394e:	bd10      	pop	{r4, pc}

08003950 <memcpy>:
 8003950:	b510      	push	{r4, lr}
 8003952:	1e43      	subs	r3, r0, #1
 8003954:	440a      	add	r2, r1
 8003956:	4291      	cmp	r1, r2
 8003958:	d100      	bne.n	800395c <memcpy+0xc>
 800395a:	bd10      	pop	{r4, pc}
 800395c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003960:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003964:	e7f7      	b.n	8003956 <memcpy+0x6>

08003966 <memmove>:
 8003966:	4288      	cmp	r0, r1
 8003968:	b510      	push	{r4, lr}
 800396a:	eb01 0302 	add.w	r3, r1, r2
 800396e:	d807      	bhi.n	8003980 <memmove+0x1a>
 8003970:	1e42      	subs	r2, r0, #1
 8003972:	4299      	cmp	r1, r3
 8003974:	d00a      	beq.n	800398c <memmove+0x26>
 8003976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800397a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800397e:	e7f8      	b.n	8003972 <memmove+0xc>
 8003980:	4283      	cmp	r3, r0
 8003982:	d9f5      	bls.n	8003970 <memmove+0xa>
 8003984:	1881      	adds	r1, r0, r2
 8003986:	1ad2      	subs	r2, r2, r3
 8003988:	42d3      	cmn	r3, r2
 800398a:	d100      	bne.n	800398e <memmove+0x28>
 800398c:	bd10      	pop	{r4, pc}
 800398e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003992:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003996:	e7f7      	b.n	8003988 <memmove+0x22>

08003998 <_free_r>:
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	4605      	mov	r5, r0
 800399c:	2900      	cmp	r1, #0
 800399e:	d043      	beq.n	8003a28 <_free_r+0x90>
 80039a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039a4:	1f0c      	subs	r4, r1, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bfb8      	it	lt
 80039aa:	18e4      	addlt	r4, r4, r3
 80039ac:	f000 f8d0 	bl	8003b50 <__malloc_lock>
 80039b0:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <_free_r+0x94>)
 80039b2:	6813      	ldr	r3, [r2, #0]
 80039b4:	4610      	mov	r0, r2
 80039b6:	b933      	cbnz	r3, 80039c6 <_free_r+0x2e>
 80039b8:	6063      	str	r3, [r4, #4]
 80039ba:	6014      	str	r4, [r2, #0]
 80039bc:	4628      	mov	r0, r5
 80039be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039c2:	f000 b8c6 	b.w	8003b52 <__malloc_unlock>
 80039c6:	42a3      	cmp	r3, r4
 80039c8:	d90b      	bls.n	80039e2 <_free_r+0x4a>
 80039ca:	6821      	ldr	r1, [r4, #0]
 80039cc:	1862      	adds	r2, r4, r1
 80039ce:	4293      	cmp	r3, r2
 80039d0:	bf01      	itttt	eq
 80039d2:	681a      	ldreq	r2, [r3, #0]
 80039d4:	685b      	ldreq	r3, [r3, #4]
 80039d6:	1852      	addeq	r2, r2, r1
 80039d8:	6022      	streq	r2, [r4, #0]
 80039da:	6063      	str	r3, [r4, #4]
 80039dc:	6004      	str	r4, [r0, #0]
 80039de:	e7ed      	b.n	80039bc <_free_r+0x24>
 80039e0:	4613      	mov	r3, r2
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	b10a      	cbz	r2, 80039ea <_free_r+0x52>
 80039e6:	42a2      	cmp	r2, r4
 80039e8:	d9fa      	bls.n	80039e0 <_free_r+0x48>
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	1858      	adds	r0, r3, r1
 80039ee:	42a0      	cmp	r0, r4
 80039f0:	d10b      	bne.n	8003a0a <_free_r+0x72>
 80039f2:	6820      	ldr	r0, [r4, #0]
 80039f4:	4401      	add	r1, r0
 80039f6:	1858      	adds	r0, r3, r1
 80039f8:	4282      	cmp	r2, r0
 80039fa:	6019      	str	r1, [r3, #0]
 80039fc:	d1de      	bne.n	80039bc <_free_r+0x24>
 80039fe:	6810      	ldr	r0, [r2, #0]
 8003a00:	6852      	ldr	r2, [r2, #4]
 8003a02:	4401      	add	r1, r0
 8003a04:	6019      	str	r1, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	e7d8      	b.n	80039bc <_free_r+0x24>
 8003a0a:	d902      	bls.n	8003a12 <_free_r+0x7a>
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	602b      	str	r3, [r5, #0]
 8003a10:	e7d4      	b.n	80039bc <_free_r+0x24>
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	1821      	adds	r1, r4, r0
 8003a16:	428a      	cmp	r2, r1
 8003a18:	bf01      	itttt	eq
 8003a1a:	6811      	ldreq	r1, [r2, #0]
 8003a1c:	6852      	ldreq	r2, [r2, #4]
 8003a1e:	1809      	addeq	r1, r1, r0
 8003a20:	6021      	streq	r1, [r4, #0]
 8003a22:	6062      	str	r2, [r4, #4]
 8003a24:	605c      	str	r4, [r3, #4]
 8003a26:	e7c9      	b.n	80039bc <_free_r+0x24>
 8003a28:	bd38      	pop	{r3, r4, r5, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200000a4 	.word	0x200000a4

08003a30 <_malloc_r>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	1ccd      	adds	r5, r1, #3
 8003a34:	f025 0503 	bic.w	r5, r5, #3
 8003a38:	3508      	adds	r5, #8
 8003a3a:	2d0c      	cmp	r5, #12
 8003a3c:	bf38      	it	cc
 8003a3e:	250c      	movcc	r5, #12
 8003a40:	2d00      	cmp	r5, #0
 8003a42:	4606      	mov	r6, r0
 8003a44:	db01      	blt.n	8003a4a <_malloc_r+0x1a>
 8003a46:	42a9      	cmp	r1, r5
 8003a48:	d903      	bls.n	8003a52 <_malloc_r+0x22>
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	6033      	str	r3, [r6, #0]
 8003a4e:	2000      	movs	r0, #0
 8003a50:	bd70      	pop	{r4, r5, r6, pc}
 8003a52:	f000 f87d 	bl	8003b50 <__malloc_lock>
 8003a56:	4a21      	ldr	r2, [pc, #132]	; (8003adc <_malloc_r+0xac>)
 8003a58:	6814      	ldr	r4, [r2, #0]
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	b991      	cbnz	r1, 8003a84 <_malloc_r+0x54>
 8003a5e:	4c20      	ldr	r4, [pc, #128]	; (8003ae0 <_malloc_r+0xb0>)
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	b91b      	cbnz	r3, 8003a6c <_malloc_r+0x3c>
 8003a64:	4630      	mov	r0, r6
 8003a66:	f000 f863 	bl	8003b30 <_sbrk_r>
 8003a6a:	6020      	str	r0, [r4, #0]
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f000 f85e 	bl	8003b30 <_sbrk_r>
 8003a74:	1c43      	adds	r3, r0, #1
 8003a76:	d124      	bne.n	8003ac2 <_malloc_r+0x92>
 8003a78:	230c      	movs	r3, #12
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	6033      	str	r3, [r6, #0]
 8003a7e:	f000 f868 	bl	8003b52 <__malloc_unlock>
 8003a82:	e7e4      	b.n	8003a4e <_malloc_r+0x1e>
 8003a84:	680b      	ldr	r3, [r1, #0]
 8003a86:	1b5b      	subs	r3, r3, r5
 8003a88:	d418      	bmi.n	8003abc <_malloc_r+0x8c>
 8003a8a:	2b0b      	cmp	r3, #11
 8003a8c:	d90f      	bls.n	8003aae <_malloc_r+0x7e>
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	18cc      	adds	r4, r1, r3
 8003a92:	50cd      	str	r5, [r1, r3]
 8003a94:	4630      	mov	r0, r6
 8003a96:	f000 f85c 	bl	8003b52 <__malloc_unlock>
 8003a9a:	f104 000b 	add.w	r0, r4, #11
 8003a9e:	1d23      	adds	r3, r4, #4
 8003aa0:	f020 0007 	bic.w	r0, r0, #7
 8003aa4:	1ac3      	subs	r3, r0, r3
 8003aa6:	d0d3      	beq.n	8003a50 <_malloc_r+0x20>
 8003aa8:	425a      	negs	r2, r3
 8003aaa:	50e2      	str	r2, [r4, r3]
 8003aac:	e7d0      	b.n	8003a50 <_malloc_r+0x20>
 8003aae:	684b      	ldr	r3, [r1, #4]
 8003ab0:	428c      	cmp	r4, r1
 8003ab2:	bf16      	itet	ne
 8003ab4:	6063      	strne	r3, [r4, #4]
 8003ab6:	6013      	streq	r3, [r2, #0]
 8003ab8:	460c      	movne	r4, r1
 8003aba:	e7eb      	b.n	8003a94 <_malloc_r+0x64>
 8003abc:	460c      	mov	r4, r1
 8003abe:	6849      	ldr	r1, [r1, #4]
 8003ac0:	e7cc      	b.n	8003a5c <_malloc_r+0x2c>
 8003ac2:	1cc4      	adds	r4, r0, #3
 8003ac4:	f024 0403 	bic.w	r4, r4, #3
 8003ac8:	42a0      	cmp	r0, r4
 8003aca:	d005      	beq.n	8003ad8 <_malloc_r+0xa8>
 8003acc:	1a21      	subs	r1, r4, r0
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f000 f82e 	bl	8003b30 <_sbrk_r>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d0cf      	beq.n	8003a78 <_malloc_r+0x48>
 8003ad8:	6025      	str	r5, [r4, #0]
 8003ada:	e7db      	b.n	8003a94 <_malloc_r+0x64>
 8003adc:	200000a4 	.word	0x200000a4
 8003ae0:	200000a8 	.word	0x200000a8

08003ae4 <_realloc_r>:
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	4607      	mov	r7, r0
 8003ae8:	4614      	mov	r4, r2
 8003aea:	460e      	mov	r6, r1
 8003aec:	b921      	cbnz	r1, 8003af8 <_realloc_r+0x14>
 8003aee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003af2:	4611      	mov	r1, r2
 8003af4:	f7ff bf9c 	b.w	8003a30 <_malloc_r>
 8003af8:	b922      	cbnz	r2, 8003b04 <_realloc_r+0x20>
 8003afa:	f7ff ff4d 	bl	8003998 <_free_r>
 8003afe:	4625      	mov	r5, r4
 8003b00:	4628      	mov	r0, r5
 8003b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b04:	f000 f826 	bl	8003b54 <_malloc_usable_size_r>
 8003b08:	42a0      	cmp	r0, r4
 8003b0a:	d20f      	bcs.n	8003b2c <_realloc_r+0x48>
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	4638      	mov	r0, r7
 8003b10:	f7ff ff8e 	bl	8003a30 <_malloc_r>
 8003b14:	4605      	mov	r5, r0
 8003b16:	2800      	cmp	r0, #0
 8003b18:	d0f2      	beq.n	8003b00 <_realloc_r+0x1c>
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	f7ff ff17 	bl	8003950 <memcpy>
 8003b22:	4631      	mov	r1, r6
 8003b24:	4638      	mov	r0, r7
 8003b26:	f7ff ff37 	bl	8003998 <_free_r>
 8003b2a:	e7e9      	b.n	8003b00 <_realloc_r+0x1c>
 8003b2c:	4635      	mov	r5, r6
 8003b2e:	e7e7      	b.n	8003b00 <_realloc_r+0x1c>

08003b30 <_sbrk_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	2300      	movs	r3, #0
 8003b34:	4c05      	ldr	r4, [pc, #20]	; (8003b4c <_sbrk_r+0x1c>)
 8003b36:	4605      	mov	r5, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	f7fd fe8a 	bl	8001854 <_sbrk>
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d102      	bne.n	8003b4a <_sbrk_r+0x1a>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	b103      	cbz	r3, 8003b4a <_sbrk_r+0x1a>
 8003b48:	602b      	str	r3, [r5, #0]
 8003b4a:	bd38      	pop	{r3, r4, r5, pc}
 8003b4c:	20000120 	.word	0x20000120

08003b50 <__malloc_lock>:
 8003b50:	4770      	bx	lr

08003b52 <__malloc_unlock>:
 8003b52:	4770      	bx	lr

08003b54 <_malloc_usable_size_r>:
 8003b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b58:	1f18      	subs	r0, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bfbc      	itt	lt
 8003b5e:	580b      	ldrlt	r3, [r1, r0]
 8003b60:	18c0      	addlt	r0, r0, r3
 8003b62:	4770      	bx	lr

08003b64 <_init>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr

08003b70 <_fini>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr
